{
    "links": [
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1913774"
                        ],
                        "name": "Tianqi Chen",
                        "slug": "Tianqi-Chen",
                        "structuredName": {
                            "firstName": "Tianqi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianqi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47108160"
                        ],
                        "name": "T. Moreau",
                        "slug": "T.-Moreau",
                        "structuredName": {
                            "firstName": "Thierry",
                            "lastName": "Moreau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Moreau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1732910"
                        ],
                        "name": "Ziheng Jiang",
                        "slug": "Ziheng-Jiang",
                        "structuredName": {
                            "firstName": "Ziheng",
                            "lastName": "Jiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ziheng Jiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2149970173"
                        ],
                        "name": "Lianmin Zheng",
                        "slug": "Lianmin-Zheng",
                        "structuredName": {
                            "firstName": "Lianmin",
                            "lastName": "Zheng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lianmin Zheng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2621619"
                        ],
                        "name": "Eddie Q. Yan",
                        "slug": "Eddie-Q.-Yan",
                        "structuredName": {
                            "firstName": "Eddie",
                            "lastName": "Yan",
                            "middleNames": [
                                "Q."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eddie Q. Yan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3050154"
                        ],
                        "name": "Haichen Shen",
                        "slug": "Haichen-Shen",
                        "structuredName": {
                            "firstName": "Haichen",
                            "lastName": "Shen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Haichen Shen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "37270394"
                        ],
                        "name": "M. Cowan",
                        "slug": "M.-Cowan",
                        "structuredName": {
                            "firstName": "Meghan",
                            "lastName": "Cowan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Cowan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2185540"
                        ],
                        "name": "Leyuan Wang",
                        "slug": "Leyuan-Wang",
                        "structuredName": {
                            "firstName": "Leyuan",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Leyuan Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49994783"
                        ],
                        "name": "Yuwei Hu",
                        "slug": "Yuwei-Hu",
                        "structuredName": {
                            "firstName": "Yuwei",
                            "lastName": "Hu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yuwei Hu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1717411"
                        ],
                        "name": "L. Ceze",
                        "slug": "L.-Ceze",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Ceze",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Ceze"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1730156"
                        ],
                        "name": "Carlos Guestrin",
                        "slug": "Carlos-Guestrin",
                        "structuredName": {
                            "firstName": "Carlos",
                            "lastName": "Guestrin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Carlos Guestrin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144695691"
                        ],
                        "name": "A. Krishnamurthy",
                        "slug": "A.-Krishnamurthy",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Krishnamurthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Krishnamurthy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 52939079,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "df013a17ab84d5403361da4538a04d574f58be83",
            "isKey": false,
            "numCitedBy": 713,
            "numCiting": 51,
            "paperAbstract": {
                "fragments": [],
                "text": "There is an increasing need to bring machine learning to a wide diversity of hardware devices. Current frameworks rely on vendor-specific operator libraries and optimize for a narrow range of server-class GPUs. Deploying workloads to new platforms -- such as mobile phones, embedded devices, and accelerators (e.g., FPGAs, ASICs) -- requires significant manual effort. We propose TVM, a compiler that exposes graph-level and operator-level optimizations to provide performance portability to deep learning workloads across diverse hardware back-ends. TVM solves optimization challenges specific to deep learning, such as high-level operator fusion, mapping to arbitrary hardware primitives, and memory latency hiding. It also automates optimization of low-level programs to hardware characteristics by employing a novel, learning-based cost modeling method for rapid exploration of code optimizations. Experimental results show that TVM delivers performance across hardware back-ends that are competitive with state-of-the-art, hand-tuned libraries for low-power CPU, mobile GPU, and server-class GPUs. We also demonstrate TVM's ability to target new accelerator back-ends, such as the FPGA-based generic deep learning accelerator. The system is open sourced and in production use inside several major companies."
            },
            "slug": "TVM:-An-Automated-End-to-End-Optimizing-Compiler-Chen-Moreau",
            "title": {
                "fragments": [],
                "text": "TVM: An Automated End-to-End Optimizing Compiler for Deep Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "TVM is a compiler that exposes graph-level and operator-level optimizations to provide performance portability to deep learning workloads across diverse hardware back-ends and automates optimization of low-level programs to hardware characteristics by employing a novel, learning-based cost modeling method for rapid exploration of code optimizations."
            },
            "venue": {
                "fragments": [],
                "text": "OSDI"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3121592"
                        ],
                        "name": "Nadav Rotem",
                        "slug": "Nadav-Rotem",
                        "structuredName": {
                            "firstName": "Nadav",
                            "lastName": "Rotem",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nadav Rotem"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8855702"
                        ],
                        "name": "Jordan Fix",
                        "slug": "Jordan-Fix",
                        "structuredName": {
                            "firstName": "Jordan",
                            "lastName": "Fix",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jordan Fix"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46247320"
                        ],
                        "name": "Saleem Abdulrasool",
                        "slug": "Saleem-Abdulrasool",
                        "structuredName": {
                            "firstName": "Saleem",
                            "lastName": "Abdulrasool",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saleem Abdulrasool"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46193056"
                        ],
                        "name": "Summer Deng",
                        "slug": "Summer-Deng",
                        "structuredName": {
                            "firstName": "Summer",
                            "lastName": "Deng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Summer Deng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46257780"
                        ],
                        "name": "Roman Dzhabarov",
                        "slug": "Roman-Dzhabarov",
                        "structuredName": {
                            "firstName": "Roman",
                            "lastName": "Dzhabarov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Roman Dzhabarov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153509089"
                        ],
                        "name": "James Hegeman",
                        "slug": "James-Hegeman",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Hegeman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James Hegeman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46211183"
                        ],
                        "name": "Roman Levenstein",
                        "slug": "Roman-Levenstein",
                        "structuredName": {
                            "firstName": "Roman",
                            "lastName": "Levenstein",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Roman Levenstein"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2130533"
                        ],
                        "name": "Bertrand A. Maher",
                        "slug": "Bertrand-A.-Maher",
                        "structuredName": {
                            "firstName": "Bertrand",
                            "lastName": "Maher",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bertrand A. Maher"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143758120"
                        ],
                        "name": "N. Satish",
                        "slug": "N.-Satish",
                        "structuredName": {
                            "firstName": "Nadathur",
                            "lastName": "Satish",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Satish"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2925676"
                        ],
                        "name": "Jakob R. Olesen",
                        "slug": "Jakob-R.-Olesen",
                        "structuredName": {
                            "firstName": "Jakob",
                            "lastName": "Olesen",
                            "middleNames": [
                                "R."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jakob R. Olesen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1686843"
                        ],
                        "name": "Jongsoo Park",
                        "slug": "Jongsoo-Park",
                        "structuredName": {
                            "firstName": "Jongsoo",
                            "lastName": "Park",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jongsoo Park"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46250117"
                        ],
                        "name": "Artem Rakhov",
                        "slug": "Artem-Rakhov",
                        "structuredName": {
                            "firstName": "Artem",
                            "lastName": "Rakhov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Artem Rakhov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1711231"
                        ],
                        "name": "M. Smelyanskiy",
                        "slug": "M.-Smelyanskiy",
                        "structuredName": {
                            "firstName": "Mikhail",
                            "lastName": "Smelyanskiy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Smelyanskiy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 23823854,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0261195ae7e1545caefb0ea7afb92bd66bfbb790",
            "isKey": false,
            "numCitedBy": 164,
            "numCiting": 19,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents the design of Glow, a machine learning compiler for heterogeneous hardware. It is a pragmatic approach to compilation that enables the generation of highly optimized code for multiple targets. Glow lowers the traditional neural network dataflow graph into a two-phase strongly-typed intermediate representation. The high-level intermediate representation allows the optimizer to perform domain-specific optimizations. The lower-level instruction-based address-only intermediate representation allows the compiler to perform memory-related optimizations, such as instruction scheduling, static memory allocation and copy elimination. At the lowest level, the optimizer performs machine-specific code generation to take advantage of specialized hardware features. Glow features a lowering phase which enables the compiler to support a high number of input operators as well as a large number of hardware targets by eliminating the need to implement all operators on all targets. The lowering phase is designed to reduce the input space and allow new hardware backends to focus on a small number of linear algebra primitives."
            },
            "slug": "Glow:-Graph-Lowering-Compiler-Techniques-for-Neural-Rotem-Fix",
            "title": {
                "fragments": [],
                "text": "Glow: Graph Lowering Compiler Techniques for Neural Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "Glow features a lowering phase which enables the compiler to support a high number of input operators as well as a large number of hardware targets by eliminating the need to implement all operators on all targets."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1913774"
                        ],
                        "name": "Tianqi Chen",
                        "slug": "Tianqi-Chen",
                        "structuredName": {
                            "firstName": "Tianqi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianqi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2149970173"
                        ],
                        "name": "Lianmin Zheng",
                        "slug": "Lianmin-Zheng",
                        "structuredName": {
                            "firstName": "Lianmin",
                            "lastName": "Zheng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lianmin Zheng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2621619"
                        ],
                        "name": "Eddie Q. Yan",
                        "slug": "Eddie-Q.-Yan",
                        "structuredName": {
                            "firstName": "Eddie",
                            "lastName": "Yan",
                            "middleNames": [
                                "Q."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eddie Q. Yan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1732910"
                        ],
                        "name": "Ziheng Jiang",
                        "slug": "Ziheng-Jiang",
                        "structuredName": {
                            "firstName": "Ziheng",
                            "lastName": "Jiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ziheng Jiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47108160"
                        ],
                        "name": "T. Moreau",
                        "slug": "T.-Moreau",
                        "structuredName": {
                            "firstName": "Thierry",
                            "lastName": "Moreau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Moreau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1717411"
                        ],
                        "name": "L. Ceze",
                        "slug": "L.-Ceze",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Ceze",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Ceze"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1730156"
                        ],
                        "name": "Carlos Guestrin",
                        "slug": "Carlos-Guestrin",
                        "structuredName": {
                            "firstName": "Carlos",
                            "lastName": "Guestrin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Carlos Guestrin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144695691"
                        ],
                        "name": "A. Krishnamurthy",
                        "slug": "A.-Krishnamurthy",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Krishnamurthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Krishnamurthy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 48,
                                "start": 30
                            }
                        ],
                        "text": "ILIR Lowering: We extend TVM (Chen et al., 2018a) v0."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 100,
                                "start": 82
                            }
                        ],
                        "text": "As part of CORTEX\u2019s design, we extend a tensor compiler (RaganKelley et al., 2013; Chen et al., 2018a; Baghdadi et al., 2019; Kjolstad et al., 2017)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 80,
                                "start": 62
                            }
                        ],
                        "text": "Compilers for Machine Learning: Tensor compilers such as TVM (Chen et al., 2018a), Halide (Ragan-Kelley et al., 2013), Tiramisu (Baghdadi et al., 2019), Tensor Comprehensions (Vasilache et al., 2018) and Taco (Kjolstad et al., 2017) have been well studied."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 138,
                                "start": 120
                            }
                        ],
                        "text": "It also opens the door to the use of the extensive work on auto-scheduling (Mullapudi et al., 2016; Adams et al., 2019; Chen et al., 2018b; Zheng et al., 2020) for optimizing these models."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 198,
                                "start": 180
                            }
                        ],
                        "text": "But exploiting such reuse is difficult when using vendor libraries, especially on accelerators such as GPUs with manually managed caches (Liu et al., 2019; Vasilache et al., 2018; Chen et al., 2018a)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 29160233,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cb91c2f8d3cac0b655a39be318b603334eb18987",
            "isKey": false,
            "numCitedBy": 181,
            "numCiting": 46,
            "paperAbstract": {
                "fragments": [],
                "text": "We introduce a learning-based framework to optimize tensor programs for deep learning workloads. Efficient implementations of tensor operators, such as matrix multiplication and high dimensional convolution, are key enablers of effective deep learning systems. However, existing systems rely on manually optimized libraries such as cuDNN where only a narrow range of server class GPUs are well-supported. The reliance on hardware-specific operator libraries limits the applicability of high-level graph optimizations and incurs significant engineering costs when deploying to new hardware targets. We use learning to remove this engineering burden. We learn domain-specific statistical cost models to guide the search of tensor operator implementations over billions of possible program variants. We further accelerate the search by effective model transfer across workloads. Experimental results show that our framework delivers performance competitive with state-of-the-art hand-tuned libraries for low-power CPU, mobile GPU, and server-class GPU."
            },
            "slug": "Learning-to-Optimize-Tensor-Programs-Chen-Zheng",
            "title": {
                "fragments": [],
                "text": "Learning to Optimize Tensor Programs"
            },
            "tldr": {
                "abstractSimilarityScore": 57,
                "text": "A learning-based framework to optimize tensor programs for deep learning workloads that learns domain-specific statistical cost models to guide the search of tensor operator implementations over billions of possible program variants and accelerates the search by effective model transfer across workloads."
            },
            "venue": {
                "fragments": [],
                "text": "NeurIPS"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3003738"
                        ],
                        "name": "Sharan Chetlur",
                        "slug": "Sharan-Chetlur",
                        "structuredName": {
                            "firstName": "Sharan",
                            "lastName": "Chetlur",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sharan Chetlur"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2266717"
                        ],
                        "name": "Cliff Woolley",
                        "slug": "Cliff-Woolley",
                        "structuredName": {
                            "firstName": "Cliff",
                            "lastName": "Woolley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Cliff Woolley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2101730"
                        ],
                        "name": "Philippe Vandermersch",
                        "slug": "Philippe-Vandermersch",
                        "structuredName": {
                            "firstName": "Philippe",
                            "lastName": "Vandermersch",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Philippe Vandermersch"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145611200"
                        ],
                        "name": "Jonathan M. Cohen",
                        "slug": "Jonathan-M.-Cohen",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Cohen",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan M. Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2066786849"
                        ],
                        "name": "J. Tran",
                        "slug": "J.-Tran",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Tran",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Tran"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2301680"
                        ],
                        "name": "Bryan Catanzaro",
                        "slug": "Bryan-Catanzaro",
                        "structuredName": {
                            "firstName": "Bryan",
                            "lastName": "Catanzaro",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bryan Catanzaro"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1782282"
                        ],
                        "name": "Evan Shelhamer",
                        "slug": "Evan-Shelhamer",
                        "structuredName": {
                            "firstName": "Evan",
                            "lastName": "Shelhamer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Evan Shelhamer"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 111,
                                "start": 89
                            }
                        ],
                        "text": ", 2019) has relied on hardware-specific, highly-optimized vendor libraries such as cuDNN (Chetlur et al., 2014) for Nvidia GPUs and MKL (Intel, 2020a) for Intel CPUs."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 215,
                                "start": 195
                            }
                        ],
                        "text": "\u2026dynamic models such as DyNet (Neubig et al., 2017a;b), Cavs (Xu et al., 2018) and PyTorch (Paszke et al., 2019) has relied on hardware-specific, highly-optimized vendor libraries such as cuDNN (Chetlur et al., 2014) for Nvidia GPUs and MKL (In-\n1Carnegie Mellon University, Pittsburgh, USA 2OctoML."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 12330432,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "31c36d445367ba204244bb74893c5654e31c3869",
            "isKey": false,
            "numCitedBy": 1419,
            "numCiting": 25,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a library that provides optimized implementations for deep learning primitives. Deep learning workloads are computationally intensive, and optimizing the kernels of deep learning workloads is difficult and time-consuming. As parallel architectures evolve, kernels must be reoptimized for new processors, which makes maintaining codebases difficult over time. Similar issues have long been addressed in the HPC community by libraries such as the Basic Linear Algebra Subroutines (BLAS) [2]. However, there is no analogous library for deep learning. Without such a library, researchers implementing deep learning workloads on parallel processors must create and optimize their own implementations of the main computational kernels, and this work must be repeated as new parallel processors emerge. To address this problem, we have created a library similar in intent to BLAS, with optimized routines for deep learning workloads. Our implementation contains routines for GPUs, and similarly to the BLAS library, could be implemented for other platforms. The library is easy to integrate into existing frameworks, and provides optimized performance and memory usage. For example, integrating cuDNN into Caffe, a popular framework for convolutional networks, improves performance by 36% on a standard model while also reducing memory consumption."
            },
            "slug": "cuDNN:-Efficient-Primitives-for-Deep-Learning-Chetlur-Woolley",
            "title": {
                "fragments": [],
                "text": "cuDNN: Efficient Primitives for Deep Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 49,
                "text": "A library similar in intent to BLAS, with optimized routines for deep learning workloads, that contains routines for GPUs, and similarly to the BLAS library, could be implemented for other platforms."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3376483"
                        ],
                        "name": "Eunji Jeong",
                        "slug": "Eunji-Jeong",
                        "structuredName": {
                            "firstName": "Eunji",
                            "lastName": "Jeong",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eunji Jeong"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "13705521"
                        ],
                        "name": "Joo Seong Jeong",
                        "slug": "Joo-Seong-Jeong",
                        "structuredName": {
                            "firstName": "Joo",
                            "lastName": "Jeong",
                            "middleNames": [
                                "Seong"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Joo Seong Jeong"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2109668632"
                        ],
                        "name": "Soojeong Kim",
                        "slug": "Soojeong-Kim",
                        "structuredName": {
                            "firstName": "Soojeong",
                            "lastName": "Kim",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Soojeong Kim"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40928126"
                        ],
                        "name": "Gyeong-In Yu",
                        "slug": "Gyeong-In-Yu",
                        "structuredName": {
                            "firstName": "Gyeong-In",
                            "lastName": "Yu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gyeong-In Yu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1704157"
                        ],
                        "name": "Byung-Gon Chun",
                        "slug": "Byung-Gon-Chun",
                        "structuredName": {
                            "firstName": "Byung-Gon",
                            "lastName": "Chun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Byung-Gon Chun"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 22,
                                "start": 4
                            }
                        ],
                        "text": "In (Jeong et al., 2018), the authors extend TensorFlow\u2019s static dataflow graph with recursion."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 4945838,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "2911fbdee71bca10361f177cd732a75cec5a27a0",
            "isKey": false,
            "numCitedBy": 10,
            "numCiting": 36,
            "paperAbstract": {
                "fragments": [],
                "text": "Recursive neural networks have widely been used by researchers to handle applications with recursively or hierarchically structured data. However, embedded control flow deep learning frameworks such as TensorFlow, Theano, Caffe2, and MXNet fail to efficiently represent and execute such neural networks, due to lack of support for recursion. In this paper, we add recursion to the programming model of existing frameworks by complementing their design with recursive execution of dataflow graphs as well as additional APIs for recursive definitions. Unlike iterative implementations, which can only understand the topological index of each node in recursive data structures, our recursive implementation is able to exploit the recursive relationships between nodes for efficient execution based on parallel computation. We present an implementation on TensorFlow and evaluation results with various recursive neural network models, showing that our recursive implementation not only conveys the recursive nature of recursive neural networks better than other implementations, but also uses given resources more effectively to reduce training and inference time."
            },
            "slug": "Improving-the-expressiveness-of-deep-learning-with-Jeong-Jeong",
            "title": {
                "fragments": [],
                "text": "Improving the expressiveness of deep learning frameworks with recursion"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "An implementation on TensorFlow and evaluation results with various recursive neural network models are presented, showing that the recursive implementation not only conveys the recursive nature of recursive neural networks better than other implementations, but also uses given resources more effectively to reduce training and inference time."
            },
            "venue": {
                "fragments": [],
                "text": "EuroSys"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3407277"
                        ],
                        "name": "Adam Paszke",
                        "slug": "Adam-Paszke",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Paszke",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Adam Paszke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39793298"
                        ],
                        "name": "S. Gross",
                        "slug": "S.-Gross",
                        "structuredName": {
                            "firstName": "Sam",
                            "lastName": "Gross",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Gross"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1403239967"
                        ],
                        "name": "Francisco Massa",
                        "slug": "Francisco-Massa",
                        "structuredName": {
                            "firstName": "Francisco",
                            "lastName": "Massa",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Francisco Massa"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1977806"
                        ],
                        "name": "Adam Lerer",
                        "slug": "Adam-Lerer",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Lerer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Adam Lerer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065251344"
                        ],
                        "name": "James Bradbury",
                        "slug": "James-Bradbury",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Bradbury",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James Bradbury"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "114250963"
                        ],
                        "name": "Gregory Chanan",
                        "slug": "Gregory-Chanan",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Chanan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gregory Chanan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2059271276"
                        ],
                        "name": "Trevor Killeen",
                        "slug": "Trevor-Killeen",
                        "structuredName": {
                            "firstName": "Trevor",
                            "lastName": "Killeen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Trevor Killeen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3370429"
                        ],
                        "name": "Zeming Lin",
                        "slug": "Zeming-Lin",
                        "structuredName": {
                            "firstName": "Zeming",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zeming Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3365851"
                        ],
                        "name": "N. Gimelshein",
                        "slug": "N.-Gimelshein",
                        "structuredName": {
                            "firstName": "Natalia",
                            "lastName": "Gimelshein",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Gimelshein"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3029482"
                        ],
                        "name": "L. Antiga",
                        "slug": "L.-Antiga",
                        "structuredName": {
                            "firstName": "Luca",
                            "lastName": "Antiga",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Antiga"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3050846"
                        ],
                        "name": "Alban Desmaison",
                        "slug": "Alban-Desmaison",
                        "structuredName": {
                            "firstName": "Alban",
                            "lastName": "Desmaison",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alban Desmaison"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1473151134"
                        ],
                        "name": "Andreas K\u00f6pf",
                        "slug": "Andreas-K\u00f6pf",
                        "structuredName": {
                            "firstName": "Andreas",
                            "lastName": "K\u00f6pf",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andreas K\u00f6pf"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2052812305"
                        ],
                        "name": "E. Yang",
                        "slug": "E.-Yang",
                        "structuredName": {
                            "firstName": "Edward",
                            "lastName": "Yang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Yang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2375710"
                        ],
                        "name": "Zach DeVito",
                        "slug": "Zach-DeVito",
                        "structuredName": {
                            "firstName": "Zach",
                            "lastName": "DeVito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zach DeVito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "10707709"
                        ],
                        "name": "Martin Raison",
                        "slug": "Martin-Raison",
                        "structuredName": {
                            "firstName": "Martin",
                            "lastName": "Raison",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Martin Raison"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "41203992"
                        ],
                        "name": "Alykhan Tejani",
                        "slug": "Alykhan-Tejani",
                        "structuredName": {
                            "firstName": "Alykhan",
                            "lastName": "Tejani",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alykhan Tejani"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "22236100"
                        ],
                        "name": "Sasank Chilamkurthy",
                        "slug": "Sasank-Chilamkurthy",
                        "structuredName": {
                            "firstName": "Sasank",
                            "lastName": "Chilamkurthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sasank Chilamkurthy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32163737"
                        ],
                        "name": "Benoit Steiner",
                        "slug": "Benoit-Steiner",
                        "structuredName": {
                            "firstName": "Benoit",
                            "lastName": "Steiner",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Benoit Steiner"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152599430"
                        ],
                        "name": "Lu Fang",
                        "slug": "Lu-Fang",
                        "structuredName": {
                            "firstName": "Lu",
                            "lastName": "Fang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lu Fang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2113829116"
                        ],
                        "name": "Junjie Bai",
                        "slug": "Junjie-Bai",
                        "structuredName": {
                            "firstName": "Junjie",
                            "lastName": "Bai",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Junjie Bai"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2127604"
                        ],
                        "name": "Soumith Chintala",
                        "slug": "Soumith-Chintala",
                        "structuredName": {
                            "firstName": "Soumith",
                            "lastName": "Chintala",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Soumith Chintala"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 202786778,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3c8a456509e6c0805354bd40a35e3f2dbf8069b1",
            "isKey": false,
            "numCitedBy": 13996,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning frameworks have often focused on either usability or speed, but not both. PyTorch is a machine learning library that shows that these two goals are in fact compatible: it was designed from first principles to support an imperative and Pythonic programming style that supports code as a model, makes debugging easy and is consistent with other popular scientific computing libraries, while remaining efficient and supporting hardware accelerators such as GPUs. In this paper, we detail the principles that drove the implementation of PyTorch and how they are reflected in its architecture. We emphasize that every aspect of PyTorch is a regular Python program under the full control of its user. We also explain how the careful and pragmatic implementation of the key components of its runtime enables them to work together to achieve compelling performance. We demonstrate the efficiency of individual subsystems, as well as the overall speed of PyTorch on several commonly used benchmarks."
            },
            "slug": "PyTorch:-An-Imperative-Style,-High-Performance-Deep-Paszke-Gross",
            "title": {
                "fragments": [],
                "text": "PyTorch: An Imperative Style, High-Performance Deep Learning Library"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "This paper details the principles that drove the implementation of PyTorch and how they are reflected in its architecture, and explains how the careful and pragmatic implementation of the key components of its runtime enables them to work together to achieve compelling performance."
            },
            "venue": {
                "fragments": [],
                "text": "NeurIPS"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1704538"
                        ],
                        "name": "Shizhen Xu",
                        "slug": "Shizhen-Xu",
                        "structuredName": {
                            "firstName": "Shizhen",
                            "lastName": "Xu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shizhen Xu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1682058"
                        ],
                        "name": "H. Zhang",
                        "slug": "H.-Zhang",
                        "structuredName": {
                            "firstName": "H.",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1700325"
                        ],
                        "name": "Graham Neubig",
                        "slug": "Graham-Neubig",
                        "structuredName": {
                            "firstName": "Graham",
                            "lastName": "Neubig",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Graham Neubig"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143716171"
                        ],
                        "name": "Wei Dai",
                        "slug": "Wei-Dai",
                        "structuredName": {
                            "firstName": "Wei",
                            "lastName": "Dai",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wei Dai"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2152674455"
                        ],
                        "name": "Jin Kyu Kim",
                        "slug": "Jin-Kyu-Kim",
                        "structuredName": {
                            "firstName": "Jin",
                            "lastName": "Kim",
                            "middleNames": [
                                "Kyu"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jin Kyu Kim"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145114723"
                        ],
                        "name": "Zhijie Deng",
                        "slug": "Zhijie-Deng",
                        "structuredName": {
                            "firstName": "Zhijie",
                            "lastName": "Deng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zhijie Deng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1707357"
                        ],
                        "name": "Qirong Ho",
                        "slug": "Qirong-Ho",
                        "structuredName": {
                            "firstName": "Qirong",
                            "lastName": "Ho",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qirong Ho"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145789924"
                        ],
                        "name": "Guangwen Yang",
                        "slug": "Guangwen-Yang",
                        "structuredName": {
                            "firstName": "Guangwen",
                            "lastName": "Yang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Guangwen Yang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143977260"
                        ],
                        "name": "E. Xing",
                        "slug": "E.-Xing",
                        "structuredName": {
                            "firstName": "Eric",
                            "lastName": "Xing",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Xing"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 51876001,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "00799dceb9e7209bb9d71b38fa5b49483e886978",
            "isKey": false,
            "numCitedBy": 14,
            "numCiting": 48,
            "paperAbstract": {
                "fragments": [],
                "text": "Recent deep learning (DL) models are moving more and more to dynamic neural network (NN) architectures, where the NN structure changes for every data sample. However, existing DL programming models are inefficient in handling dynamic network architectures because of: (1) substantial overhead caused by repeating dataflow graph construction and processing every example; (2) difficulties in batched execution of multiple samples; (3) inability to incorporate graph optimization techniques such as those used in static graphs. In this paper, we present \u201cCavs\u201d, a runtime system that overcomes these bottlenecks and achieves efficient training and inference of dynamic NNs. Cavs represents a dynamic NN as a static vertex function F and a dynamic instance-specific graph G. It avoids the overhead of repeated graph construction by only declaring and constructing F once, and allows for the use of static graph optimization techniques on pre-defined operations in F . Cavs performs training and inference by scheduling the execution of F following the dependencies in G, hence naturally exposing batched execution opportunities over different samples. Experiments comparing Cavs to state-of-the-art frameworks for dynamic NNs (TensorFlow Fold, PyTorch and DyNet) demonstrate the efficacy of our approach: Cavs achieves a near one order of magnitude speedup on training of dynamic NN architectures, and ablations verify the effectiveness of our proposed design and optimizations."
            },
            "slug": "Cavs:-An-Efficient-Runtime-System-for-Dynamic-Xu-Zhang",
            "title": {
                "fragments": [],
                "text": "Cavs: An Efficient Runtime System for Dynamic Neural Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "Cavs is presented, a runtime system that overcomes bottlenecks and achieves efficient training and inference of dynamic NNs and avoids the overhead of repeated graph construction by only declaring and constructing F once, and allows for the use of static graph optimization techniques on pre-defined operations in F."
            },
            "venue": {
                "fragments": [],
                "text": "USENIX Annual Technical Conference"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2136341779"
                        ],
                        "name": "Yizhi Liu",
                        "slug": "Yizhi-Liu",
                        "structuredName": {
                            "firstName": "Yizhi",
                            "lastName": "Liu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yizhi Liu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2119049210"
                        ],
                        "name": "Yao Wang",
                        "slug": "Yao-Wang",
                        "structuredName": {
                            "firstName": "Yao",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yao Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "81228496"
                        ],
                        "name": "Ruofei Yu",
                        "slug": "Ruofei-Yu",
                        "structuredName": {
                            "firstName": "Ruofei",
                            "lastName": "Yu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ruofei Yu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2112144126"
                        ],
                        "name": "Mu Li",
                        "slug": "Mu-Li",
                        "structuredName": {
                            "firstName": "Mu",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mu Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153403129"
                        ],
                        "name": "Vin Sharma",
                        "slug": "Vin-Sharma",
                        "structuredName": {
                            "firstName": "Vin",
                            "lastName": "Sharma",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vin Sharma"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Yida Wang",
                        "slug": "Yida-Wang",
                        "structuredName": {
                            "firstName": "Yida",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yida Wang"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 154,
                                "start": 138
                            }
                        ],
                        "text": "But exploiting such reuse is difficult when using vendor libraries, especially on accelerators such as GPUs with manually managed caches (Liu et al., 2019; Vasilache et al., 2018; Chen et al., 2018a)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 52183221,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9d60ea2461172d30487743fa6ef8788db4b53759",
            "isKey": false,
            "numCitedBy": 74,
            "numCiting": 71,
            "paperAbstract": {
                "fragments": [],
                "text": "The popularity of Convolutional Neural Network (CNN) models and the ubiquity of CPUs imply that better performance of CNN model inference on CPUs can deliver significant gain to a large number of users. To improve the performance of CNN inference on CPUs, current approaches like MXNet and Intel OpenVINO usually treat the model as a graph and use the high-performance libraries such as Intel MKL-DNN to implement the operations of the graph. While achieving reasonable performance on individual operations from the off-the-shelf libraries, this solution makes it inflexible to conduct optimizations at the graph level, as the local operation-level optimizations are predefined. Therefore, it is restrictive and misses the opportunity to optimize the end-to-end inference pipeline as a whole. This paper presents \\emph{NeoCPU}, a comprehensive approach of CNN model inference on CPUs that employs a full-stack and systematic scheme of optimizations. \\emph{NeoCPU} optimizes the operations as templates without relying on third-parties libraries, which enables further improvement of the performance via operation- and graph-level joint optimization. Experiments show that \\emph{NeoCPU} achieves up to 3.45$\\times$ lower latency for CNN model inference than the current state-of-the-art implementations on various kinds of popular CPUs."
            },
            "slug": "Optimizing-CNN-Model-Inference-on-CPUs-Liu-Wang",
            "title": {
                "fragments": [],
                "text": "Optimizing CNN Model Inference on CPUs"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "A comprehensive approach of CNN model inference on CPUs that employs a full-stack and systematic scheme of optimizations, which optimizes the operations as templates without relying on third-parties libraries, which enables further improvement of the performance via operation- and graph-level joint optimization."
            },
            "venue": {
                "fragments": [],
                "text": "USENIX Annual Technical Conference"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3050154"
                        ],
                        "name": "Haichen Shen",
                        "slug": "Haichen-Shen",
                        "structuredName": {
                            "firstName": "Haichen",
                            "lastName": "Shen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Haichen Shen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "24961975"
                        ],
                        "name": "Jared Roesch",
                        "slug": "Jared-Roesch",
                        "structuredName": {
                            "firstName": "Jared",
                            "lastName": "Roesch",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jared Roesch"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2119232594"
                        ],
                        "name": "Zhi Chen",
                        "slug": "Zhi-Chen",
                        "structuredName": {
                            "firstName": "Zhi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zhi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2283009"
                        ],
                        "name": "Wei Chen",
                        "slug": "Wei-Chen",
                        "structuredName": {
                            "firstName": "Wei",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wei Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2115859471"
                        ],
                        "name": "Yong Wu",
                        "slug": "Yong-Wu",
                        "structuredName": {
                            "firstName": "Yong",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yong Wu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2112144126"
                        ],
                        "name": "Mu Li",
                        "slug": "Mu-Li",
                        "structuredName": {
                            "firstName": "Mu",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mu Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153403129"
                        ],
                        "name": "Vin Sharma",
                        "slug": "Vin-Sharma",
                        "structuredName": {
                            "firstName": "Vin",
                            "lastName": "Sharma",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vin Sharma"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2272813"
                        ],
                        "name": "Zachary Tatlock",
                        "slug": "Zachary-Tatlock",
                        "structuredName": {
                            "firstName": "Zachary",
                            "lastName": "Tatlock",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zachary Tatlock"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Yida Wang",
                        "slug": "Yida-Wang",
                        "structuredName": {
                            "firstName": "Yida",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yida Wang"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 77,
                                "start": 60
                            }
                        ],
                        "text": "These difficulties also hold for frameworks such as Nimble (Shen et al., 2020), which relies on autotuned implementations of individual kernels."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 25,
                                "start": 8
                            }
                        ],
                        "text": "Nimble (Shen et al., 2020) adapts deep learning compiler technology for better supporting dynamic models."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 79,
                                "start": 62
                            }
                        ],
                        "text": "Past work on machine learning compilers (Roesch et al., 2019; Shen et al., 2020; Yu et al., 2018; Wei et al.) as well as on deep learning (Tai et al., 2015; Shazeer et al., 2017; Elbayad et al., 2019) suggests that supporting efficient execution of various kinds of dynamism in ML models is very\u2026"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 26,
                                "start": 7
                            }
                        ],
                        "text": "Nimble (Shen et al., 2020) revists deep learning compiler technology and adapts it for better supporting dynamic models."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 219305367,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "81981169f8e15166b249b99270d1f7a9e75f9ae4",
            "isKey": true,
            "numCitedBy": 14,
            "numCiting": 68,
            "paperAbstract": {
                "fragments": [],
                "text": "Modern deep neural networks increasingly make use of features such as dynamic control flow, data structures and dynamic tensor shapes. Existing deep learning systems focus on optimizing and executing static neural networks which assume a pre-determined model architecture and input data shapes--assumptions which are violated by dynamic neural networks. Therefore, executing dynamic models with deep learning systems is currently both inflexible and sub-optimal, if not impossible. Optimizing dynamic neural networks is more challenging than static neural networks; optimizations must consider all possible execution paths and tensor shapes. This paper proposes Nimble, a high-performance and flexible system to optimize, compile, and execute dynamic neural networks on multiple platforms. Nimble handles model dynamism by introducing a dynamic type system, a set of dynamism-oriented optimizations, and a light-weight virtual machine runtime. Our evaluation demonstrates that Nimble outperforms state-of-the-art deep learning frameworks and runtime systems for dynamic neural networks by up to 20x on hardware platforms including Intel CPUs, ARM CPUs, and Nvidia GPUs."
            },
            "slug": "Nimble:-Efficiently-Compiling-Dynamic-Neural-for-Shen-Roesch",
            "title": {
                "fragments": [],
                "text": "Nimble: Efficiently Compiling Dynamic Neural Networks for Model Inference"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "Nimble is proposed, a high-performance and flexible system to optimize, compile, and execute dynamic neural networks on multiple platforms that handles model dynamism by introducing a dynamic type system, a set of dynamism-oriented optimizations, and a light-weight virtual machine runtime."
            },
            "venue": {
                "fragments": [],
                "text": "MLSys"
            },
            "year": 2021
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2059083875"
                        ],
                        "name": "Connor Holmes",
                        "slug": "Connor-Holmes",
                        "structuredName": {
                            "firstName": "Connor",
                            "lastName": "Holmes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Connor Holmes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "27998850"
                        ],
                        "name": "Daniel Mawhirter",
                        "slug": "Daniel-Mawhirter",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Mawhirter",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Mawhirter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2145020341"
                        ],
                        "name": "Yuxiong He",
                        "slug": "Yuxiong-He",
                        "structuredName": {
                            "firstName": "Yuxiong",
                            "lastName": "He",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yuxiong He"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145552742"
                        ],
                        "name": "Feng Yan",
                        "slug": "Feng-Yan",
                        "structuredName": {
                            "firstName": "Feng",
                            "lastName": "Yan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Feng Yan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144397979"
                        ],
                        "name": "Bo Wu",
                        "slug": "Bo-Wu",
                        "structuredName": {
                            "firstName": "Bo",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bo Wu"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 218,
                                "start": 199
                            }
                        ],
                        "text": "Model persistence (persisting any model parameters that are reused in every iteration of a recursive or iterative model in fast on-chip memory) is another important optimization (Zhang et al., 2018; Holmes et al., 2019; Diamos et al., 2016)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 56,
                                "start": 35
                            }
                        ],
                        "text": ", 2016), subsequently used in GRNN (Holmes et al., 2019) and adapted for CPUs in DeepCPU (Zhang et al."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 131,
                                "start": 112
                            }
                        ],
                        "text": "In this case, refactoring enables us to reduce the number of global barriers as in the GRNN GRU implementation (Holmes et al., 2019)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 135,
                                "start": 116
                            }
                        ],
                        "text": "The TreeLSTM and TreeGRU models were scheduled similarly to the sequential LSTM and GRU schedules proposed in GRNN (Holmes et al., 2019)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 125,
                                "start": 106
                            }
                        ],
                        "text": "Model persistence was first proposed by Persistent RNNs (Diamos et al., 2016), subsequently used in GRNN (Holmes et al., 2019) and VPPS (Khorasani et al., 2018) and adapted for CPUs in DeepCPU (Zhang et al., 2018)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 240,
                                "start": 178
                            }
                        ],
                        "text": "Model persistence (persisting in fast on-chip memory any model parameters that are reused in every iteration of a recursive or iterative model) is another important optimization (Zhang et al., 2018; Holmes et al., 2019; Diamos et al., 2016)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 134,
                                "start": 113
                            }
                        ],
                        "text": "The TreeLSTM and TreeGRU models were scheduled similar to the sequential LSTM and GRU schedules proposed in GRNN (Holmes et al., 2019)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 131,
                                "start": 110
                            }
                        ],
                        "text": "In this case, refactoring allows us to reduce the number of global barriers as in the GRNN GRU implementation (Holmes et al., 2019)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 85518643,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "c2672933d76061e5a0e4a40f57217b504e4c241d",
            "isKey": true,
            "numCitedBy": 30,
            "numCiting": 40,
            "paperAbstract": {
                "fragments": [],
                "text": "Recurrent neural networks (RNNs) have gained significant attention due to their effectiveness in modeling sequential data, such as text and voice signal. However, due to the complex data dependencies and limited parallelism, current inference libraries for RNNs on GPUs produce either high latency or poor scalability, leading to inefficient resource utilization. Consequently, companies like Microsoft and Facebook use CPUs to serve RNN models. This work demonstrates the root causes of the unsatisfactory performance of existing implementations for RNN inference on GPUs from several aspects, including poor data reuse, low on-chip resource utilization, and high synchronization overhead. We systematically address these issues and develop a GPU-based RNN inference library, called GRNN, that provides low latency, high throughput, and efficient resource utilization. GRNN minimizes global memory accesses and synchronization overhead, as well as balancing on-chip resource usage through novel data reorganization, thread mapping, and performance modeling techniques. Evaluated on extensive benchmarking and real-world applications, we show that GRNN outperforms the state-of-the-art CPU inference library by up to 17.5X and state-of-the-art GPU inference libraries by up to 9X in terms of latency reduction."
            },
            "slug": "GRNN:-Low-Latency-and-Scalable-RNN-Inference-on-Holmes-Mawhirter",
            "title": {
                "fragments": [],
                "text": "GRNN: Low-Latency and Scalable RNN Inference on GPUs"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This work systematically addresses the root causes of the unsatisfactory performance of existing implementations for RNN inference on GPUs from several aspects, including poor data reuse, low on-chip resource utilization, and high synchronization overhead, and develops a GPU-based Rnn inference library, called GRNN, that provides low latency, high throughput, and efficient resource utilization."
            },
            "venue": {
                "fragments": [],
                "text": "EuroSys"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2149970173"
                        ],
                        "name": "Lianmin Zheng",
                        "slug": "Lianmin-Zheng",
                        "structuredName": {
                            "firstName": "Lianmin",
                            "lastName": "Zheng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lianmin Zheng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "51195858"
                        ],
                        "name": "Chengfan Jia",
                        "slug": "Chengfan-Jia",
                        "structuredName": {
                            "firstName": "Chengfan",
                            "lastName": "Jia",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chengfan Jia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2118254471"
                        ],
                        "name": "Minmin Sun",
                        "slug": "Minmin-Sun",
                        "structuredName": {
                            "firstName": "Minmin",
                            "lastName": "Sun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Minmin Sun"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2146045513"
                        ],
                        "name": "Zhao Wu",
                        "slug": "Zhao-Wu",
                        "structuredName": {
                            "firstName": "Zhao",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zhao Wu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "17813719"
                        ],
                        "name": "Cody Hao Yu",
                        "slug": "Cody-Hao-Yu",
                        "structuredName": {
                            "firstName": "Cody",
                            "lastName": "Yu",
                            "middleNames": [
                                "Hao"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Cody Hao Yu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1411406011"
                        ],
                        "name": "Ameer Haj-Ali",
                        "slug": "Ameer-Haj-Ali",
                        "structuredName": {
                            "firstName": "Ameer",
                            "lastName": "Haj-Ali",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ameer Haj-Ali"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Yida Wang",
                        "slug": "Yida-Wang",
                        "structuredName": {
                            "firstName": "Yida",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yida Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2146156715"
                        ],
                        "name": "Jun Yang",
                        "slug": "Jun-Yang",
                        "structuredName": {
                            "firstName": "Jun",
                            "lastName": "Yang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jun Yang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2720913"
                        ],
                        "name": "Danyang Zhuo",
                        "slug": "Danyang-Zhuo",
                        "structuredName": {
                            "firstName": "Danyang",
                            "lastName": "Zhuo",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Danyang Zhuo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145741786"
                        ],
                        "name": "Koushik Sen",
                        "slug": "Koushik-Sen",
                        "structuredName": {
                            "firstName": "Koushik",
                            "lastName": "Sen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Koushik Sen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49988044"
                        ],
                        "name": "Joseph E. Gonzalez",
                        "slug": "Joseph-E.-Gonzalez",
                        "structuredName": {
                            "firstName": "Joseph",
                            "lastName": "Gonzalez",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Joseph E. Gonzalez"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144467753"
                        ],
                        "name": "I. Stoica",
                        "slug": "I.-Stoica",
                        "structuredName": {
                            "firstName": "Ion",
                            "lastName": "Stoica",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "I. Stoica"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 158,
                                "start": 140
                            }
                        ],
                        "text": "It also opens the door to the use of the extensive work on auto-scheduling (Mullapudi et al., 2016; Adams et al., 2019; Chen et al., 2018b; Zheng et al., 2020) for optimizing these models."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 219636278,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6ebbdc79a3553e8ad2996d6d03987bfaeb448e82",
            "isKey": false,
            "numCitedBy": 94,
            "numCiting": 67,
            "paperAbstract": {
                "fragments": [],
                "text": "High-performance tensor programs are crucial to guarantee efficient execution of deep learning models. However, obtaining performant tensor programs for different operators on various hardware platforms is notoriously difficult. Currently, deep learning systems rely on vendor-provided kernel libraries or various search strategies to get performant tensor programs. These approaches either require significant engineering efforts in developing platform-specific optimization code or fall short in finding high-performance programs due to restricted search space and ineffective exploration strategy. \nWe present Ansor, a tensor program generation framework for deep learning applications. Compared with existing search strategies, Ansor explores much more optimization combinations by sampling programs from a hierarchical representation of the search space. Ansor then fine-tunes the sampled programs with evolutionary search and a learned cost model to identify the best programs. Ansor can find high-performance programs that are outside the search space of existing state-of-the-art approaches. Besides, Ansor utilizes a scheduler to simultaneously optimize multiple subgraphs in a set of deep neural networks. Our evaluation shows that Ansor improves the execution performance of deep neural networks on the Intel CPU, ARM CPU, and NVIDIA GPU by up to $3.8\\times$, $2.6\\times$, and $1.7 \\times$, respectively."
            },
            "slug": "Ansor-:-Generating-High-Performance-Tensor-Programs-Zheng-Jia",
            "title": {
                "fragments": [],
                "text": "Ansor : Generating High-Performance Tensor Programs for Deep Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 50,
                "text": "Ansor is presented, a tensor program generation framework for deep learning applications that can find high-performance programs that are outside the search space of existing state-of-the-art approaches."
            },
            "venue": {
                "fragments": [],
                "text": "OSDI"
            },
            "year": 2020
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2054833547"
                        ],
                        "name": "O. Zinenko",
                        "slug": "O.-Zinenko",
                        "structuredName": {
                            "firstName": "Oleksandr",
                            "lastName": "Zinenko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Zinenko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2097631216"
                        ],
                        "name": "Theodoros Theodoridis",
                        "slug": "Theodoros-Theodoridis",
                        "structuredName": {
                            "firstName": "Theodoros",
                            "lastName": "Theodoridis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Theodoros Theodoridis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47316088"
                        ],
                        "name": "Priya Goyal",
                        "slug": "Priya-Goyal",
                        "structuredName": {
                            "firstName": "Priya",
                            "lastName": "Goyal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Priya Goyal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2375710"
                        ],
                        "name": "Zach DeVito",
                        "slug": "Zach-DeVito",
                        "structuredName": {
                            "firstName": "Zach",
                            "lastName": "DeVito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zach DeVito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "16521420"
                        ],
                        "name": "William S. Moses",
                        "slug": "William-S.-Moses",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Moses",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William S. Moses"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 44014988,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cae9d90524cccac5081666985d5d055b71697cee",
            "isKey": false,
            "numCitedBy": 284,
            "numCiting": 102,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning models with convolutional and recurrent networks are now ubiquitous and analyze massive amounts of audio, image, video, text and graph data, with applications in automatic translation, speech-to-text, scene understanding, ranking user preferences, ad placement, etc. Competing frameworks for building these networks such as TensorFlow, Chainer, CNTK, Torch/PyTorch, Caffe1/2, MXNet and Theano, explore different tradeoffs between usability and expressiveness, research or production orientation and supported hardware. They operate on a DAG of computational operators, wrapping high-performance libraries such as CUDNN (for NVIDIA GPUs) or NNPACK (for various CPUs), and automate memory allocation, synchronization, distribution. Custom operators are needed where the computation does not fit existing high-performance library calls, usually at a high engineering cost. This is frequently required when new operators are invented by researchers: such operators suffer a severe performance penalty, which limits the pace of innovation. Furthermore, even if there is an existing runtime call these frameworks can use, it often doesn't offer optimal performance for a user's particular network architecture and dataset, missing optimizations between operators as well as optimizations that can be done knowing the size and shape of data. Our contributions include (1) a language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, (2) a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, also providing optimizations such as operator fusion and specialization for specific sizes, (3) a compilation cache populated by an autotuner. [Abstract cutoff]"
            },
            "slug": "Tensor-Comprehensions:-Framework-Agnostic-Machine-Vasilache-Zinenko",
            "title": {
                "fragments": [],
                "text": "Tensor Comprehensions: Framework-Agnostic High-Performance Machine Learning Abstractions"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "A language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, and a compilation cache populated by an autotuner are contributed."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "67016465"
                        ],
                        "name": "Minjia Zhang",
                        "slug": "Minjia-Zhang",
                        "structuredName": {
                            "firstName": "Minjia",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Minjia Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32817044"
                        ],
                        "name": "Samyam Rajbhandari",
                        "slug": "Samyam-Rajbhandari",
                        "structuredName": {
                            "firstName": "Samyam",
                            "lastName": "Rajbhandari",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Samyam Rajbhandari"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47824833"
                        ],
                        "name": "Wenhan Wang",
                        "slug": "Wenhan-Wang",
                        "structuredName": {
                            "firstName": "Wenhan",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wenhan Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2145020341"
                        ],
                        "name": "Yuxiong He",
                        "slug": "Yuxiong-He",
                        "structuredName": {
                            "firstName": "Yuxiong",
                            "lastName": "He",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yuxiong He"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 51870307,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ede30dce5a98a8a83a93ec3a717382db193a947c",
            "isKey": false,
            "numCitedBy": 71,
            "numCiting": 55,
            "paperAbstract": {
                "fragments": [],
                "text": "Recurrent neural networks (RNNs) are an important class of deep learning (DL) models. Existing DL frameworks have unsatisfying performance for online serving: many RNN models suffer from long serving latency and high cost, preventing their deployment in production. \n \nThis work characterizes RNN performance and identifies low data reuse as a root cause. We develop novel techniques and an efficient search strategy to squeeze more data reuse out of this intrinsically challenging workload. We build DeepCPU, a fast serving library on CPUs, to integrate these optimizations for efficient RNN computation. Our evaluation on various RNN models shows that DeepCPU improves latency and efficiency by an order of magnitude on CPUs compared with existing DL frameworks such as TensorFlow. It also empowers CPUs to beat GPUs on RNN serving. In production services of Microsoft, DeepCPU transforms many models from non-shippable (due to latency SLA violation) to shippable (well-fitting latency requirements) and saves millions of dollars of infrastructure costs."
            },
            "slug": "DeepCPU:-Serving-RNN-based-Deep-Learning-Models-10x-Zhang-Rajbhandari",
            "title": {
                "fragments": [],
                "text": "DeepCPU: Serving RNN-based Deep Learning Models 10x Faster"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This work characterizes RNN performance and identifies low data reuse as a root cause, and develops novel techniques and an efficient search strategy to squeeze more data reuse out of this intrinsically challenging workload."
            },
            "venue": {
                "fragments": [],
                "text": "USENIX Annual Technical Conference"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3376483"
                        ],
                        "name": "Eunji Jeong",
                        "slug": "Eunji-Jeong",
                        "structuredName": {
                            "firstName": "Eunji",
                            "lastName": "Jeong",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eunji Jeong"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2149157331"
                        ],
                        "name": "Sungwoo Cho",
                        "slug": "Sungwoo-Cho",
                        "structuredName": {
                            "firstName": "Sungwoo",
                            "lastName": "Cho",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sungwoo Cho"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40928126"
                        ],
                        "name": "Gyeong-In Yu",
                        "slug": "Gyeong-In-Yu",
                        "structuredName": {
                            "firstName": "Gyeong-In",
                            "lastName": "Yu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gyeong-In Yu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "13705521"
                        ],
                        "name": "Joo Seong Jeong",
                        "slug": "Joo-Seong-Jeong",
                        "structuredName": {
                            "firstName": "Joo",
                            "lastName": "Jeong",
                            "middleNames": [
                                "Seong"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Joo Seong Jeong"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2149548308"
                        ],
                        "name": "Dongjin Shin",
                        "slug": "Dongjin-Shin",
                        "structuredName": {
                            "firstName": "Dongjin",
                            "lastName": "Shin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dongjin Shin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1704157"
                        ],
                        "name": "Byung-Gon Chun",
                        "slug": "Byung-Gon-Chun",
                        "structuredName": {
                            "firstName": "Byung-Gon",
                            "lastName": "Chun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Byung-Gon Chun"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 54446298,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "a996fb4b9f3d4315138f8773b1e995f8386b11eb",
            "isKey": false,
            "numCitedBy": 18,
            "numCiting": 47,
            "paperAbstract": {
                "fragments": [],
                "text": "The rapid evolution of deep neural networks is demanding deep learning (DL) frameworks not only to satisfy the requirement of quickly executing large computations, but also to support straightforward programming models for quickly implementing and experimenting with complex network structures. However, existing frameworks fail to excel in both departments simultaneously, leading to diverged efforts for optimizing performance and improving usability. \nThis paper presents JANUS, a system that combines the advantages from both sides by transparently converting an imperative DL program written in Python, the de-facto scripting language for DL, into an efficiently executable symbolic dataflow graph. JANUS can convert various dynamic features of Python, including dynamic control flow, dynamic types, and impure functions, into elements of a symbolic dataflow graph. Experiments demonstrate that JANUS can achieve fast DL training by exploiting the techniques imposed by symbolic graph-based DL frameworks, while maintaining the simple and flexible programmability of imperative DL frameworks at the same time."
            },
            "slug": "JANUS:-Fast-and-Flexible-Deep-Learning-via-Symbolic-Jeong-Cho",
            "title": {
                "fragments": [],
                "text": "JANUS: Fast and Flexible Deep Learning via Symbolic Graph Execution of Imperative Programs"
            },
            "tldr": {
                "abstractSimilarityScore": 38,
                "text": "JANUS is presented, a system that combines the advantages from both sides by transparently converting an imperative DL program written in Python, the de-facto scripting language for DL, into an efficiently executable symbolic dataflow graph."
            },
            "venue": {
                "fragments": [],
                "text": "NSDI"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2434898"
                        ],
                        "name": "M. Looks",
                        "slug": "M.-Looks",
                        "structuredName": {
                            "firstName": "Moshe",
                            "lastName": "Looks",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Looks"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1881346"
                        ],
                        "name": "Marcello Herreshoff",
                        "slug": "Marcello-Herreshoff",
                        "structuredName": {
                            "firstName": "Marcello",
                            "lastName": "Herreshoff",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Marcello Herreshoff"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32913644"
                        ],
                        "name": "DeLesley S. Hutchins",
                        "slug": "DeLesley-S.-Hutchins",
                        "structuredName": {
                            "firstName": "DeLesley",
                            "lastName": "Hutchins",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "DeLesley S. Hutchins"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2784519"
                        ],
                        "name": "Peter Norvig",
                        "slug": "Peter-Norvig",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Norvig",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Peter Norvig"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 233,
                                "start": 215
                            }
                        ],
                        "text": "C.3 Static optimizations: Dynamic models are generally optimized at runtime by constructing a dataflow graph that unrolls all recursion and makes optimizations such as dynamic batching easier (Neubig et al., 2017a; Looks et al., 2017)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 145,
                                "start": 127
                            }
                        ],
                        "text": "Variants of dynamic batching have been used in frameworks such as DyNet, Cavs, BatchMaker (Gao et al., 2018), TensorFlow Fold (Looks et al., 2017) and Matchbox (Bradbury & Fu, 2018)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 171,
                                "start": 153
                            }
                        ],
                        "text": "\u2026propose the following scheduling primitives to exploit these opportunities:\nDynamic Batching: Dynamic batching (Neubig et al., 2017b; Gao et al., 2018; Looks et al., 2017; Xu et al., 2018) involves batching operators on-the-fly to exploit parallelism in a batch in models with dynamic control flow."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 167,
                                "start": 149
                            }
                        ],
                        "text": "To overcome C.2 and C.3, we employ scheduling primitives to perform optimizations such as specialization and dynamic batching (Neubig et al., 2017b; Looks et al., 2017), along with compile-time optimizations such as computation hoisting."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 5144625,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "08d2bae3ddf44d67b9b192a6ff26e954192e4806",
            "isKey": true,
            "numCitedBy": 107,
            "numCiting": 22,
            "paperAbstract": {
                "fragments": [],
                "text": "Neural networks that compute over graph structures are a natural fit for problems in a variety of domains, including natural language (parse trees) and cheminformatics (molecular graphs). However, since the computation graph has a different shape and size for every input, such networks do not directly support batched training or inference. They are also difficult to implement in popular deep learning libraries, which are based on static data-flow graphs. We introduce a technique called dynamic batching, which not only batches together operations between different input graphs of dissimilar shape, but also between different nodes within a single input graph. The technique allows us to create static graphs, using popular libraries, that emulate dynamic computation graphs of arbitrary shape and size. We further present a high-level library of compositional blocks that simplifies the creation of dynamic graph models. Using the library, we demonstrate concise and batch-wise parallel implementations for a variety of models from the literature."
            },
            "slug": "Deep-Learning-with-Dynamic-Computation-Graphs-Looks-Herreshoff",
            "title": {
                "fragments": [],
                "text": "Deep Learning with Dynamic Computation Graphs"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This work introduces a technique called dynamic batching, which not only batches together operations between different input graphs of dissimilar shape, but also between different nodes within a single input graph."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2040049"
                        ],
                        "name": "G. Diamos",
                        "slug": "G.-Diamos",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Diamos",
                            "middleNames": [
                                "Frederick"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Diamos"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2264597"
                        ],
                        "name": "Shubho Sengupta",
                        "slug": "Shubho-Sengupta",
                        "structuredName": {
                            "firstName": "Shubho",
                            "lastName": "Sengupta",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shubho Sengupta"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2301680"
                        ],
                        "name": "Bryan Catanzaro",
                        "slug": "Bryan-Catanzaro",
                        "structuredName": {
                            "firstName": "Bryan",
                            "lastName": "Catanzaro",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bryan Catanzaro"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35977287"
                        ],
                        "name": "Mike Chrzanowski",
                        "slug": "Mike-Chrzanowski",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Chrzanowski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mike Chrzanowski"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144638694"
                        ],
                        "name": "Adam Coates",
                        "slug": "Adam-Coates",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Coates",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Adam Coates"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152585800"
                        ],
                        "name": "Erich Elsen",
                        "slug": "Erich-Elsen",
                        "structuredName": {
                            "firstName": "Erich",
                            "lastName": "Elsen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Erich Elsen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9695761"
                        ],
                        "name": "Jesse Engel",
                        "slug": "Jesse-Engel",
                        "structuredName": {
                            "firstName": "Jesse",
                            "lastName": "Engel",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jesse Engel"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144479015"
                        ],
                        "name": "Awni Y. Hannun",
                        "slug": "Awni-Y.-Hannun",
                        "structuredName": {
                            "firstName": "Awni",
                            "lastName": "Hannun",
                            "middleNames": [
                                "Y."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Awni Y. Hannun"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145031342"
                        ],
                        "name": "S. Satheesh",
                        "slug": "S.-Satheesh",
                        "structuredName": {
                            "firstName": "Sanjeev",
                            "lastName": "Satheesh",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Satheesh"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 76,
                                "start": 57
                            }
                        ],
                        "text": "Model persistence was first proposed by Persistent RNNs (Diamos et al., 2016), subsequently used in GRNN (Holmes et al., 2019) and VPPS (Khorasani et al., 2018) and adapted for CPUs in DeepCPU (Zhang et al., 2018)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 239,
                                "start": 220
                            }
                        ],
                        "text": "Model persistence (persisting any model parameters that are reused in every iteration of a recursive or iterative model in fast on-chip memory) is another important optimization (Zhang et al., 2018; Holmes et al., 2019; Diamos et al., 2016)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 17818155,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "56172b6fe2613c37d9790bde8ab6ccda14b35678",
            "isKey": false,
            "numCitedBy": 82,
            "numCiting": 53,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper introduces a new technique for mapping Deep Recurrent Neural Networks (RNN) efficiently onto GPUs. We show how it is possible to achieve substantially higher computational throughput at low mini-batch sizes than direct implementations of RNNs based on matrix multiplications. The key to our approach is the use of persistent computational kernels that exploit the GPU's inverted memory hierarchy to reuse network weights over multiple timesteps. Our initial implementation sustains 2.8 TFLOP/s at a mini-batch size of 4 on an NVIDIA TitanX GPU. This provides a 16\u00d7 reduction in activation memory footprint, enables model training with 12\u00d7 more parameters on the same hardware, allows us to strongly scale RNN training to 128 GPUs, and allows us to efficiently explore end-to-end speech recognition models with over 100 layers."
            },
            "slug": "Persistent-RNNs:-Stashing-Recurrent-Weights-On-Chip-Diamos-Sengupta",
            "title": {
                "fragments": [],
                "text": "Persistent RNNs: Stashing Recurrent Weights On-Chip"
            },
            "tldr": {
                "abstractSimilarityScore": 66,
                "text": "This paper introduces a new technique for mapping Deep Recurrent Neural Networks efficiently onto GPUs that uses persistent computational kernels that exploit the GPU's inverted memory hierarchy to reuse network weights over multiple timesteps."
            },
            "venue": {
                "fragments": [],
                "text": "ICML"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "4875117"
                        ],
                        "name": "Jessica Ray",
                        "slug": "Jessica-Ray",
                        "structuredName": {
                            "firstName": "Jessica",
                            "lastName": "Ray",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jessica Ray"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40899986"
                        ],
                        "name": "Malek Ben Romdhane",
                        "slug": "Malek-Ben-Romdhane",
                        "structuredName": {
                            "firstName": "Malek",
                            "lastName": "Romdhane",
                            "middleNames": [
                                "Ben"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Malek Ben Romdhane"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3436746"
                        ],
                        "name": "Emanuele Del Sozzo",
                        "slug": "Emanuele-Del-Sozzo",
                        "structuredName": {
                            "firstName": "Emanuele",
                            "lastName": "Sozzo",
                            "middleNames": [
                                "Del"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Emanuele Del Sozzo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060643"
                        ],
                        "name": "Abdurrahman Akkas",
                        "slug": "Abdurrahman-Akkas",
                        "structuredName": {
                            "firstName": "Abdurrahman",
                            "lastName": "Akkas",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Abdurrahman Akkas"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "11860259"
                        ],
                        "name": "Yunming Zhang",
                        "slug": "Yunming-Zhang",
                        "structuredName": {
                            "firstName": "Yunming",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yunming Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8844033"
                        ],
                        "name": "Patricia Suriana",
                        "slug": "Patricia-Suriana",
                        "structuredName": {
                            "firstName": "Patricia",
                            "lastName": "Suriana",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Patricia Suriana"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145683292"
                        ],
                        "name": "S. Kamil",
                        "slug": "S.-Kamil",
                        "structuredName": {
                            "firstName": "Shoaib",
                            "lastName": "Kamil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Kamil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 123,
                                "start": 102
                            }
                        ],
                        "text": "As part of CORTEX\u2019s design, we extend a tensor compiler (RaganKelley et al., 2013; Chen et al., 2018a; Baghdadi et al., 2019; Kjolstad et al., 2017)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 150,
                                "start": 129
                            }
                        ],
                        "text": "Compilers for Machine Learning: Tensor compilers such as TVM (Chen et al., 2018a), Halide (Ragan-Kelley et al., 2013), Tiramisu (Baghdadi et al., 2019), Tensor Comprehensions (Vasilache et al., 2018) and Taco (Kjolstad et al., 2017) have been well studied."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 56173920,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8c7310477fd027193cd040288f0aa9824c80b91f",
            "isKey": false,
            "numCitedBy": 122,
            "numCiting": 55,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper introduces Tiramisu, a polyhedral framework designed to generate high performance code for multiple platforms including multicores, GPUs, and distributed machines. Tiramisu introduces a scheduling language with novel commands to explicitly manage the complexities that arise when targeting these systems. The framework is designed for the areas of image processing, stencils, linear algebra and deep learning. Tiramisu has two main features: it relies on a flexible representation based on the polyhedral model and it has a rich scheduling language allowing fine-grained control of optimizations. Tiramisu uses a four-level intermediate representation that allows full separation between the algorithms, loop transformations, data layouts, and communication. This separation simplifies targeting multiple hardware architectures with the same algorithm. We evaluate Tiramisu by writing a set of image processing, deep learning, and linear algebra benchmarks and compare them with state-of-the-art compilers and hand-tuned libraries. We show that Tiramisu matches or outperforms existing compilers and libraries on different hardware architectures, including multicore CPUs, GPUs, and distributed machines."
            },
            "slug": "Tiramisu:-A-Polyhedral-Compiler-for-Expressing-Fast-Baghdadi-Ray",
            "title": {
                "fragments": [],
                "text": "Tiramisu: A Polyhedral Compiler for Expressing Fast and Portable Code"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "Tiramisu introduces a scheduling language with novel commands to explicitly manage the complexities that arise when targeting these systems, designed for the areas of image processing, stencils, linear algebra and deep learning."
            },
            "venue": {
                "fragments": [],
                "text": "2019 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1700325"
                        ],
                        "name": "Graham Neubig",
                        "slug": "Graham-Neubig",
                        "structuredName": {
                            "firstName": "Graham",
                            "lastName": "Neubig",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Graham Neubig"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2089067"
                        ],
                        "name": "Yoav Goldberg",
                        "slug": "Yoav-Goldberg",
                        "structuredName": {
                            "firstName": "Yoav",
                            "lastName": "Goldberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yoav Goldberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1745899"
                        ],
                        "name": "Chris Dyer",
                        "slug": "Chris-Dyer",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Dyer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Dyer"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 147,
                                "start": 127
                            }
                        ],
                        "text": "To overcome C.2 and C.3, we employ scheduling primitives to perform optimizations such as specialization and dynamic batching (Neubig et al., 2017b; Looks et al., 2017), along with compile-time optimizations such as computation hoisting."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 213,
                                "start": 193
                            }
                        ],
                        "text": "C.3 Static optimizations: Dynamic models are generally optimized at runtime by constructing a dataflow graph that unrolls all recursion and makes optimizations such as dynamic batching easier (Neubig et al., 2017a; Looks et al., 2017)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 135,
                                "start": 115
                            }
                        ],
                        "text": "We propose the following scheduling primitives to exploit these opportunities:\nDynamic Batching: Dynamic batching (Neubig et al., 2017b; Gao et al., 2018; Looks et al., 2017; Xu et al., 2018) involves batching operators on-the-fly to exploit parallelism in a batch in models with dynamic control\u2026"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 147,
                                "start": 127
                            }
                        ],
                        "text": "We prototype the proposed framework, evaluate it against state-of-the-art recursive deep learning frameworks (Xu et al., 2018; Neubig et al., 2017a; Paszke et al., 2019) and report significant performance gains (up to 14X) on Nvidia GPUs and Intel and ARM CPUs."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 77,
                                "start": 57
                            }
                        ],
                        "text": "Past work on recursive and dynamic models such as DyNet (Neubig et al., 2017a;b), Cavs (Xu et al., 2018) and PyTorch (Paszke et al., 2019) has relied on hardware-specific, highly-optimized vendor libraries such as cuDNN (Chetlur et al., 2014) for Nvidia GPUs and MKL (In-\n1Carnegie Mellon\u2026"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 201,
                                "start": 181
                            }
                        ],
                        "text": "Cavs and DyNet are both open source, state-of-theart frameworks for recursive neural networks, and have been shown to be faster than generic frameworks like PyTorch and TensorFlow (Neubig et al., 2017b; Xu et al., 2018)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 22177804,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "709f0a4229e40339b595072ae9fbd3a1ae1fd93e",
            "isKey": true,
            "numCitedBy": 53,
            "numCiting": 36,
            "paperAbstract": {
                "fragments": [],
                "text": "Dynamic neural network toolkits such as PyTorch, DyNet, and Chainer offer more flexibility for implementing models that cope with data of varying dimensions and structure, relative to toolkits that operate on statically declared computations (e.g., TensorFlow, CNTK, and Theano). However, existing toolkits - both static and dynamic - require that the developer organize the computations into the batches necessary for exploiting high-performance algorithms and hardware. This batching task is generally difficult, but it becomes a major hurdle as architectures become complex. In this paper, we present an algorithm, and its implementation in the DyNet toolkit, for automatically batching operations. Developers simply write minibatch computations as aggregations of single instance computations, and the batching algorithm seamlessly executes them, on the fly, using computationally efficient batched operations. On a variety of tasks, we obtain throughput similar to that obtained with manual batches, as well as comparable speedups over single-instance learning on architectures that are impractical to batch manually."
            },
            "slug": "On-the-fly-Operation-Batching-in-Dynamic-Graphs-Neubig-Goldberg",
            "title": {
                "fragments": [],
                "text": "On-the-fly Operation Batching in Dynamic Computation Graphs"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This paper presents an algorithm, and its implementation in the DyNet toolkit, for automatically batching operations, and obtains throughput similar to that obtained with manual batches, as well as comparable speedups over single-instance learning on architectures that are impractical to batch manually."
            },
            "venue": {
                "fragments": [],
                "text": "NIPS"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2097575656"
                        ],
                        "name": "Pin Gao",
                        "slug": "Pin-Gao",
                        "structuredName": {
                            "firstName": "Pin",
                            "lastName": "Gao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pin Gao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2490788"
                        ],
                        "name": "Lingfan Yu",
                        "slug": "Lingfan-Yu",
                        "structuredName": {
                            "firstName": "Lingfan",
                            "lastName": "Yu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lingfan Yu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2115858706"
                        ],
                        "name": "Yongwei Wu",
                        "slug": "Yongwei-Wu",
                        "structuredName": {
                            "firstName": "Yongwei",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yongwei Wu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46276184"
                        ],
                        "name": "Jinyang Li",
                        "slug": "Jinyang-Li",
                        "structuredName": {
                            "firstName": "Jinyang",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jinyang Li"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 105,
                                "start": 28
                            }
                        ],
                        "text": "Dynamic Batching: Past work (Neubig et al., 2017b; Gao et al., 2018; Looks et al., 2017; Xu et al., 2018) has proposed batching operators on-the-fly in models with dynamic control flow to exploit parallelism in a batch."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 91
                            }
                        ],
                        "text": "Variants of dynamic batching have been used in frameworks such as DyNet, Cavs, BatchMaker (Gao et al., 2018), TensorFlow Fold (Looks et al., 2017) and Matchbox (Bradbury & Fu, 2018)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 153,
                                "start": 137
                            }
                        ],
                        "text": "We propose the following scheduling primitives to exploit these opportunities:\nDynamic Batching: Dynamic batching (Neubig et al., 2017b; Gao et al., 2018; Looks et al., 2017; Xu et al., 2018) involves batching operators on-the-fly to exploit parallelism in a batch in models with dynamic control\u2026"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 121,
                                "start": 103
                            }
                        ],
                        "text": "Variants of dynamic batching have been proposed and used in frameworks such as DyNet, Cavs, BatchMaker (Gao et al., 2018), TensorFlow Fold (Looks et al."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 4430053,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3e386ee9b2c54b2e36151233b87e27e97acc53cd",
            "isKey": true,
            "numCitedBy": 42,
            "numCiting": 41,
            "paperAbstract": {
                "fragments": [],
                "text": "Performing inference on pre-trained neural network models must meet the requirement of low-latency, which is often at odds with achieving high throughput. Existing deep learning systems use batching to improve throughput, which do not perform well when serving Recurrent Neural Networks with dynamic dataflow graphs. We propose the technique of cellular batching, which improves both the latency and throughput of RNN inference. Unlike existing systems that batch a fixed set of dataflow graphs, cellular batching makes batching decisions at the granularity of an RNN \"cell\" (a subgraph with shared weights) and dynamically assembles a batched cell for execution as requests join and leave the system. We implemented our approach in a system called BatchMaker. Experiments show that BatchMaker achieves much lower latency and also higher throughput than existing systems."
            },
            "slug": "Low-latency-RNN-inference-with-cellular-batching-Gao-Yu",
            "title": {
                "fragments": [],
                "text": "Low latency RNN inference with cellular batching"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "The technique of cellular batching is proposed, which improves both the latency and throughput of RNN inference and achieves much lower latency and also higher throughput than existing systems."
            },
            "venue": {
                "fragments": [],
                "text": "EuroSys"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2290932"
                        ],
                        "name": "Fredrik Kjolstad",
                        "slug": "Fredrik-Kjolstad",
                        "structuredName": {
                            "firstName": "Fredrik",
                            "lastName": "Kjolstad",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fredrik Kjolstad"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145683292"
                        ],
                        "name": "S. Kamil",
                        "slug": "S.-Kamil",
                        "structuredName": {
                            "firstName": "Shoaib",
                            "lastName": "Kamil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Kamil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145381703"
                        ],
                        "name": "Stephen Chou",
                        "slug": "Stephen-Chou",
                        "structuredName": {
                            "firstName": "Stephen",
                            "lastName": "Chou",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Stephen Chou"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2636191"
                        ],
                        "name": "D. Lugato",
                        "slug": "D.-Lugato",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Lugato",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Lugato"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 79,
                                "start": 75
                            }
                        ],
                        "text": "There are similarities between sparse tensor computations, as supported in Taco, and the ILIR, which lead to similar implementation techniques."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 40,
                                "start": 17
                            }
                        ],
                        "text": ", 2018) and Taco (Kjolstad et al., 2017) have been well studied."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 146,
                                "start": 125
                            }
                        ],
                        "text": "As part of CORTEX\u2019s design, we extend a tensor compiler (RaganKelley et al., 2013; Chen et al., 2018a; Baghdadi et al., 2019; Kjolstad et al., 2017)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 231,
                                "start": 210
                            }
                        ],
                        "text": "Compilers for Machine Learning: Tensor compilers such as TVM (Chen et al., 2018a), Halide (Ragan-Kelley et al., 2013), Tiramisu (Baghdadi et al., 2019), Tensor Comprehensions (Vasilache et al., 2018) and Taco (Kjolstad et al., 2017) have been well studied."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 118,
                                "start": 114
                            }
                        ],
                        "text": "For example, the idea of dense layouts for intermediate tensors (\u00a75.1) is similar to the concept of workspaces for Taco introduced in (Kjolstad et al., 2019)."
                    },
                    "intents": []
                }
            ],
            "corpusId": 6326740,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "c2e1139691c3a337831e36ee7afeab8817ab5d48",
            "isKey": true,
            "numCitedBy": 201,
            "numCiting": 99,
            "paperAbstract": {
                "fragments": [],
                "text": "Tensor algebra is a powerful tool with applications in machine learning, data analytics, engineering and the physical sciences. Tensors are often sparse and compound operations must frequently be computed in a single kernel for performance and to save memory. Programmers are left to write kernels for every operation of interest, with different mixes of dense and sparse tensors in different formats. The combinations are infinite, which makes it impossible to manually implement and optimize them all. This paper introduces the first compiler technique to automatically generate kernels for any compound tensor algebra operation on dense and sparse tensors. The technique is implemented in a C++ library called taco. Its performance is competitive with best-in-class hand-optimized kernels in popular libraries, while supporting far more tensor operations."
            },
            "slug": "The-tensor-algebra-compiler-Kjolstad-Kamil",
            "title": {
                "fragments": [],
                "text": "The tensor algebra compiler"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "The first compiler technique to automatically generate kernels for any compound tensor algebra operation on dense and sparse tensors is introduced, which is competitive with best-in-class hand-optimized kernels in popular libraries, while supporting far more tensor operations."
            },
            "venue": {
                "fragments": [],
                "text": "Proc. ACM Program. Lang."
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1700325"
                        ],
                        "name": "Graham Neubig",
                        "slug": "Graham-Neubig",
                        "structuredName": {
                            "firstName": "Graham",
                            "lastName": "Neubig",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Graham Neubig"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1745899"
                        ],
                        "name": "Chris Dyer",
                        "slug": "Chris-Dyer",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Dyer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Dyer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2089067"
                        ],
                        "name": "Yoav Goldberg",
                        "slug": "Yoav-Goldberg",
                        "structuredName": {
                            "firstName": "Yoav",
                            "lastName": "Goldberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yoav Goldberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144633696"
                        ],
                        "name": "Austin Matthews",
                        "slug": "Austin-Matthews",
                        "structuredName": {
                            "firstName": "Austin",
                            "lastName": "Matthews",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Austin Matthews"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145585097"
                        ],
                        "name": "Waleed Ammar",
                        "slug": "Waleed-Ammar",
                        "structuredName": {
                            "firstName": "Waleed",
                            "lastName": "Ammar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Waleed Ammar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49513989"
                        ],
                        "name": "Antonios Anastasopoulos",
                        "slug": "Antonios-Anastasopoulos",
                        "structuredName": {
                            "firstName": "Antonios",
                            "lastName": "Anastasopoulos",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Antonios Anastasopoulos"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143668305"
                        ],
                        "name": "Miguel Ballesteros",
                        "slug": "Miguel-Ballesteros",
                        "structuredName": {
                            "firstName": "Miguel",
                            "lastName": "Ballesteros",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Miguel Ballesteros"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145287425"
                        ],
                        "name": "David Chiang",
                        "slug": "David-Chiang",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Chiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David Chiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "7197436"
                        ],
                        "name": "Daniel Clothiaux",
                        "slug": "Daniel-Clothiaux",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Clothiaux",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Clothiaux"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143620680"
                        ],
                        "name": "Trevor Cohn",
                        "slug": "Trevor-Cohn",
                        "structuredName": {
                            "firstName": "Trevor",
                            "lastName": "Cohn",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Trevor Cohn"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800354"
                        ],
                        "name": "Kevin Duh",
                        "slug": "Kevin-Duh",
                        "structuredName": {
                            "firstName": "Kevin",
                            "lastName": "Duh",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kevin Duh"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1779225"
                        ],
                        "name": "Manaal Faruqui",
                        "slug": "Manaal-Faruqui",
                        "structuredName": {
                            "firstName": "Manaal",
                            "lastName": "Faruqui",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Manaal Faruqui"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2056157475"
                        ],
                        "name": "Cynthia Gan",
                        "slug": "Cynthia-Gan",
                        "structuredName": {
                            "firstName": "Cynthia",
                            "lastName": "Gan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Cynthia Gan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2758616"
                        ],
                        "name": "Dan Garrette",
                        "slug": "Dan-Garrette",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Garrette",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dan Garrette"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40608686"
                        ],
                        "name": "Yangfeng Ji",
                        "slug": "Yangfeng-Ji",
                        "structuredName": {
                            "firstName": "Yangfeng",
                            "lastName": "Ji",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yangfeng Ji"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47648549"
                        ],
                        "name": "Lingpeng Kong",
                        "slug": "Lingpeng-Kong",
                        "structuredName": {
                            "firstName": "Lingpeng",
                            "lastName": "Kong",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lingpeng Kong"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3376845"
                        ],
                        "name": "A. Kuncoro",
                        "slug": "A.-Kuncoro",
                        "structuredName": {
                            "firstName": "Adhiguna",
                            "lastName": "Kuncoro",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Kuncoro"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48387892"
                        ],
                        "name": "Manish Kumar",
                        "slug": "Manish-Kumar",
                        "structuredName": {
                            "firstName": "Manish",
                            "lastName": "Kumar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Manish Kumar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8805254"
                        ],
                        "name": "Chaitanya Malaviya",
                        "slug": "Chaitanya-Malaviya",
                        "structuredName": {
                            "firstName": "Chaitanya",
                            "lastName": "Malaviya",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chaitanya Malaviya"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144397625"
                        ],
                        "name": "Paul Michel",
                        "slug": "Paul-Michel",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Michel",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Paul Michel"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143800179"
                        ],
                        "name": "Yusuke Oda",
                        "slug": "Yusuke-Oda",
                        "structuredName": {
                            "firstName": "Yusuke",
                            "lastName": "Oda",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yusuke Oda"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144422314"
                        ],
                        "name": "Matthew Richardson",
                        "slug": "Matthew-Richardson",
                        "structuredName": {
                            "firstName": "Matthew",
                            "lastName": "Richardson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matthew Richardson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Naomi Saphra",
                        "slug": "Naomi-Saphra",
                        "structuredName": {
                            "firstName": "Naomi",
                            "lastName": "Saphra",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Naomi Saphra"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2705113"
                        ],
                        "name": "Swabha Swayamdipta",
                        "slug": "Swabha-Swayamdipta",
                        "structuredName": {
                            "firstName": "Swabha",
                            "lastName": "Swayamdipta",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Swabha Swayamdipta"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38253388"
                        ],
                        "name": "Pengcheng Yin",
                        "slug": "Pengcheng-Yin",
                        "structuredName": {
                            "firstName": "Pengcheng",
                            "lastName": "Yin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pengcheng Yin"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 2170930,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "480d545ac4a4ffff5b1bc291c2de613192e35d91",
            "isKey": false,
            "numCitedBy": 347,
            "numCiting": 72,
            "paperAbstract": {
                "fragments": [],
                "text": "We describe DyNet, a toolkit for implementing neural network models based on dynamic declaration of network structure. In the static declaration strategy that is used in toolkits like Theano, CNTK, and TensorFlow, the user first defines a computation graph (a symbolic representation of the computation), and then examples are fed into an engine that executes this computation and computes its derivatives. In DyNet's dynamic declaration strategy, computation graph construction is mostly transparent, being implicitly constructed by executing procedural code that computes the network outputs, and the user is free to use different network structures for each input. Dynamic declaration thus facilitates the implementation of more complicated network architectures, and DyNet is specifically designed to allow users to implement their models in a way that is idiomatic in their preferred programming language (C++ or Python). One challenge with dynamic declaration is that because the symbolic computation graph is defined anew for every training example, its construction must have low overhead. To achieve this, DyNet has an optimized C++ backend and lightweight graph representation. Experiments show that DyNet's speeds are faster than or comparable with static declaration toolkits, and significantly faster than Chainer, another dynamic declaration toolkit. DyNet is released open-source under the Apache 2.0 license and available at this http URL."
            },
            "slug": "DyNet:-The-Dynamic-Neural-Network-Toolkit-Neubig-Dyer",
            "title": {
                "fragments": [],
                "text": "DyNet: The Dynamic Neural Network Toolkit"
            },
            "tldr": {
                "abstractSimilarityScore": 61,
                "text": "DyNet is a toolkit for implementing neural network models based on dynamic declaration of network structure that has an optimized C++ backend and lightweight graph representation and is designed to allow users to implement their models in a way that is idiomatic in their preferred programming language."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2496412"
                        ],
                        "name": "Connelly Barnes",
                        "slug": "Connelly-Barnes",
                        "structuredName": {
                            "firstName": "Connelly",
                            "lastName": "Barnes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Connelly Barnes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 5885207,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "4d23db55e6671a82c95dacec33b2967a4b8b677d",
            "isKey": false,
            "numCitedBy": 878,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Image processing pipelines combine the challenges of stencil computations and stream programs. They are composed of large graphs of different stencil stages, as well as complex reductions, and stages with global or data-dependent access patterns. Because of their complex structure, the performance difference between a naive implementation of a pipeline and an optimized one is often an order of magnitude. Efficient implementations require optimization of both parallelism and locality, but due to the nature of stencils, there is a fundamental tension between parallelism, locality, and introducing redundant recomputation of shared values. We present a systematic model of the tradeoff space fundamental to stencil pipelines, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule. Combining this compiler with stochastic search over the space of schedules enables terse, composable programs to achieve state-of-the-art performance on a wide range of real image processing pipelines, and across different hardware architectures, including multicores with SIMD, and heterogeneous CPU+GPU execution. From simple Halide programs written in a few hours, we demonstrate performance up to 5x faster than hand-tuned C, intrinsics, and CUDA implementations optimized by experts over weeks or months, for image processing applications beyond the reach of past automatic compilers."
            },
            "slug": "Halide:-a-language-and-compiler-for-optimizing-and-Ragan-Kelley-Barnes",
            "title": {
                "fragments": [],
                "text": "Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A systematic model of the tradeoff space fundamental to stencil pipelines is presented, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule are presented."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "151076950"
                        ],
                        "name": "Karima Ma",
                        "slug": "Karima-Ma",
                        "structuredName": {
                            "firstName": "Karima",
                            "lastName": "Ma",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Karima Ma"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144413718"
                        ],
                        "name": "Luke Anderson",
                        "slug": "Luke-Anderson",
                        "structuredName": {
                            "firstName": "Luke",
                            "lastName": "Anderson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luke Anderson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1775024"
                        ],
                        "name": "Tzu-Mao Li",
                        "slug": "Tzu-Mao-Li",
                        "structuredName": {
                            "firstName": "Tzu-Mao",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tzu-Mao Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3282136"
                        ],
                        "name": "Micha\u00ebl Gharbi",
                        "slug": "Micha\u00ebl-Gharbi",
                        "structuredName": {
                            "firstName": "Micha\u00ebl",
                            "lastName": "Gharbi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Micha\u00ebl Gharbi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32163737"
                        ],
                        "name": "Benoit Steiner",
                        "slug": "Benoit-Steiner",
                        "structuredName": {
                            "firstName": "Benoit",
                            "lastName": "Steiner",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Benoit Steiner"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2111936975"
                        ],
                        "name": "Steven Johnson",
                        "slug": "Steven-Johnson",
                        "structuredName": {
                            "firstName": "Steven",
                            "lastName": "Johnson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Steven Johnson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2789576"
                        ],
                        "name": "Kayvon Fatahalian",
                        "slug": "Kayvon-Fatahalian",
                        "structuredName": {
                            "firstName": "Kayvon",
                            "lastName": "Fatahalian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kayvon Fatahalian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 196834556,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f90a7bc396e205b204d5d6066a10162f84b128f9",
            "isKey": false,
            "numCitedBy": 122,
            "numCiting": 42,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a new algorithm to automatically schedule Halide programs for high-performance image processing and deep learning. We significantly improve upon the performance of previous methods, which considered a limited subset of schedules. We define a parameterization of possible schedules much larger than prior methods and use a variant of beam search to search over it. The search optimizes runtime predicted by a cost model based on a combination of new derived features and machine learning. We train the cost model by generating and featurizing hundreds of thousands of random programs and schedules. We show that this approach operates effectively with or without autotuning. It produces schedules which are on average almost twice as fast as the existing Halide autoscheduler without autotuning, or more than twice as fast with, and is the first automatic scheduling algorithm to significantly outperform human experts on average."
            },
            "slug": "Learning-to-optimize-halide-with-tree-search-and-Adams-Ma",
            "title": {
                "fragments": [],
                "text": "Learning to optimize halide with tree search and random programs"
            },
            "tldr": {
                "abstractSimilarityScore": 60,
                "text": "This work presents a new algorithm to automatically schedule Halide programs for high-performance image processing and deep learning that produces schedules which are on average almost twice as fast as the existing Halide autoscheduler without autotuning, or more than two as fast with, and is the first automatic scheduling algorithm to significantly outperform human experts on average."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Graph."
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1767709"
                        ],
                        "name": "Alexey Radul",
                        "slug": "Alexey-Radul",
                        "structuredName": {
                            "firstName": "Alexey",
                            "lastName": "Radul",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexey Radul"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2071607725"
                        ],
                        "name": "Brian Patton",
                        "slug": "Brian-Patton",
                        "structuredName": {
                            "firstName": "Brian",
                            "lastName": "Patton",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Brian Patton"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1683298"
                        ],
                        "name": "D. Maclaurin",
                        "slug": "D.-Maclaurin",
                        "structuredName": {
                            "firstName": "Dougal",
                            "lastName": "Maclaurin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Maclaurin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "28552618"
                        ],
                        "name": "M. Hoffman",
                        "slug": "M.-Hoffman",
                        "structuredName": {
                            "firstName": "Matthew",
                            "lastName": "Hoffman",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Hoffman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2278009"
                        ],
                        "name": "R. Saurous",
                        "slug": "R.-Saurous",
                        "structuredName": {
                            "firstName": "Rif",
                            "lastName": "Saurous",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Saurous"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 31,
                                "start": 13
                            }
                        ],
                        "text": "Further, in (Radul et al., 2020), the authors develop techniques to efficiently lower recursion into iterative control flow while performing dynamic batching for the XLA toolchain."
                    },
                    "intents": []
                }
            ],
            "corpusId": 204851882,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ac6f7e85e8ac7029085b7646a7fbf75e464b54e5",
            "isKey": false,
            "numCitedBy": 4,
            "numCiting": 20,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a general approach to batching arbitrary computations for accelerators such as GPUs. We show orders-of-magnitude speedups using our method on the No U-Turn Sampler (NUTS), a workhorse algorithm in Bayesian statistics. The central challenge of batching NUTS and other Markov chain Monte Carlo algorithms is data-dependent control flow and recursion. We overcome this by mechanically transforming a single-example implementation into a form that explicitly tracks the current program point for each batch member, and only steps forward those in the same place. We present two different batching algorithms: a simpler, previously published one that inherits recursion from the host Python, and a more complex, novel one that implemenents recursion directly and can batch across it. We implement these batching methods as a general program transformation on Python source. Both the batching system and the NUTS implementation presented here are available as part of the popular TensorFlow Probability software package."
            },
            "slug": "Automatically-Batching-Control-Intensive-Programs-Radul-Patton",
            "title": {
                "fragments": [],
                "text": "Automatically Batching Control-Intensive Programs for Modern Accelerators"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "Two different batching algorithms are presented: a simpler, previously published one that inherits recursion from the host Python, and a more complex, novel one that implemenents recursion directly and can batch across it."
            },
            "venue": {
                "fragments": [],
                "text": "MLSys"
            },
            "year": 2020
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1715454"
                        ],
                        "name": "N. Jouppi",
                        "slug": "N.-Jouppi",
                        "structuredName": {
                            "firstName": "Norman",
                            "lastName": "Jouppi",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Jouppi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39660914"
                        ],
                        "name": "C. Young",
                        "slug": "C.-Young",
                        "structuredName": {
                            "firstName": "Cliff",
                            "lastName": "Young",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Young"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2056800684"
                        ],
                        "name": "Nishant Patil",
                        "slug": "Nishant-Patil",
                        "structuredName": {
                            "firstName": "Nishant",
                            "lastName": "Patil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nishant Patil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2052996328"
                        ],
                        "name": "David A. Patterson",
                        "slug": "David-A.-Patterson",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Patterson",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David A. Patterson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1839673849"
                        ],
                        "name": "Gaurav Agrawal",
                        "slug": "Gaurav-Agrawal",
                        "structuredName": {
                            "firstName": "Gaurav",
                            "lastName": "Agrawal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gaurav Agrawal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39892484"
                        ],
                        "name": "R. Bajwa",
                        "slug": "R.-Bajwa",
                        "structuredName": {
                            "firstName": "Raminder",
                            "lastName": "Bajwa",
                            "middleNames": [
                                "Singh"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Bajwa"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057224801"
                        ],
                        "name": "Sarah Bates",
                        "slug": "Sarah-Bates",
                        "structuredName": {
                            "firstName": "Sarah",
                            "lastName": "Bates",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sarah Bates"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2125285255"
                        ],
                        "name": "Suresh Bhatia",
                        "slug": "Suresh-Bhatia",
                        "structuredName": {
                            "firstName": "Suresh",
                            "lastName": "Bhatia",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Suresh Bhatia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35750774"
                        ],
                        "name": "N. Boden",
                        "slug": "N.-Boden",
                        "structuredName": {
                            "firstName": "Nanette",
                            "lastName": "Boden",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Boden"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1394297183"
                        ],
                        "name": "Al Borchers",
                        "slug": "Al-Borchers",
                        "structuredName": {
                            "firstName": "Al",
                            "lastName": "Borchers",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Al Borchers"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060002570"
                        ],
                        "name": "Rick Boyle",
                        "slug": "Rick-Boyle",
                        "structuredName": {
                            "firstName": "Rick",
                            "lastName": "Boyle",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Rick Boyle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065727960"
                        ],
                        "name": "Pierre-luc Cantin",
                        "slug": "Pierre-luc-Cantin",
                        "structuredName": {
                            "firstName": "Pierre-luc",
                            "lastName": "Cantin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pierre-luc Cantin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1629772869"
                        ],
                        "name": "Clifford Chao",
                        "slug": "Clifford-Chao",
                        "structuredName": {
                            "firstName": "Clifford",
                            "lastName": "Chao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Clifford Chao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2113263549"
                        ],
                        "name": "Chris Clark",
                        "slug": "Chris-Clark",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Clark",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Clark"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213025"
                        ],
                        "name": "Jeremy Coriell",
                        "slug": "Jeremy-Coriell",
                        "structuredName": {
                            "firstName": "Jeremy",
                            "lastName": "Coriell",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jeremy Coriell"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2061461417"
                        ],
                        "name": "Mike Daley",
                        "slug": "Mike-Daley",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Daley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mike Daley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153358157"
                        ],
                        "name": "Matt Dau",
                        "slug": "Matt-Dau",
                        "structuredName": {
                            "firstName": "Matt",
                            "lastName": "Dau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matt Dau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49959210"
                        ],
                        "name": "J. Dean",
                        "slug": "J.-Dean",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Dean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Dean"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1394723585"
                        ],
                        "name": "Ben Gelb",
                        "slug": "Ben-Gelb",
                        "structuredName": {
                            "firstName": "Ben",
                            "lastName": "Gelb",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ben Gelb"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213038"
                        ],
                        "name": "T. Ghaemmaghami",
                        "slug": "T.-Ghaemmaghami",
                        "structuredName": {
                            "firstName": "Tara",
                            "lastName": "Ghaemmaghami",
                            "middleNames": [
                                "Vazir"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Ghaemmaghami"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40301682"
                        ],
                        "name": "R. Gottipati",
                        "slug": "R.-Gottipati",
                        "structuredName": {
                            "firstName": "Rajendra",
                            "lastName": "Gottipati",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Gottipati"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213045"
                        ],
                        "name": "William Gulland",
                        "slug": "William-Gulland",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Gulland",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William Gulland"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2330986"
                        ],
                        "name": "R. Hagmann",
                        "slug": "R.-Hagmann",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Hagmann",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Hagmann"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2148846139"
                        ],
                        "name": "C. R. Ho",
                        "slug": "C.-R.-Ho",
                        "structuredName": {
                            "firstName": "C.",
                            "lastName": "Ho",
                            "middleNames": [
                                "Richard"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. R. Ho"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1629763752"
                        ],
                        "name": "Doug Hogberg",
                        "slug": "Doug-Hogberg",
                        "structuredName": {
                            "firstName": "Doug",
                            "lastName": "Hogberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Doug Hogberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49268145"
                        ],
                        "name": "John Hu",
                        "slug": "John-Hu",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Hu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "John Hu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1701671"
                        ],
                        "name": "R. Hundt",
                        "slug": "R.-Hundt",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Hundt",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Hundt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38786988"
                        ],
                        "name": "D. Hurt",
                        "slug": "D.-Hurt",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Hurt",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Hurt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46920727"
                        ],
                        "name": "Julian Ibarz",
                        "slug": "Julian-Ibarz",
                        "structuredName": {
                            "firstName": "Julian",
                            "lastName": "Ibarz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Julian Ibarz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "10433955"
                        ],
                        "name": "A. Jaffey",
                        "slug": "A.-Jaffey",
                        "structuredName": {
                            "firstName": "Aaron",
                            "lastName": "Jaffey",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Jaffey"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064306865"
                        ],
                        "name": "Alek Jaworski",
                        "slug": "Alek-Jaworski",
                        "structuredName": {
                            "firstName": "Alek",
                            "lastName": "Jaworski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alek Jaworski"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064354536"
                        ],
                        "name": "Alexander Kaplan",
                        "slug": "Alexander-Kaplan",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Kaplan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander Kaplan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398212995"
                        ],
                        "name": "Harshit Khaitan",
                        "slug": "Harshit-Khaitan",
                        "structuredName": {
                            "firstName": "Harshit",
                            "lastName": "Khaitan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Harshit Khaitan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35002044"
                        ],
                        "name": "Daniel Killebrew",
                        "slug": "Daniel-Killebrew",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Killebrew",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Killebrew"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1406011741"
                        ],
                        "name": "A. Koch",
                        "slug": "A.-Koch",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Koch",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Koch"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2116960562"
                        ],
                        "name": "Naveen Kumar",
                        "slug": "Naveen-Kumar",
                        "structuredName": {
                            "firstName": "Naveen",
                            "lastName": "Kumar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Naveen Kumar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40476752"
                        ],
                        "name": "Steve Lacy",
                        "slug": "Steve-Lacy",
                        "structuredName": {
                            "firstName": "Steve",
                            "lastName": "Lacy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Steve Lacy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2926266"
                        ],
                        "name": "J. Laudon",
                        "slug": "J.-Laudon",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Laudon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Laudon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057766961"
                        ],
                        "name": "James Law",
                        "slug": "James-Law",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Law",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James Law"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1397916881"
                        ],
                        "name": "Diemthu Le",
                        "slug": "Diemthu-Le",
                        "structuredName": {
                            "firstName": "Diemthu",
                            "lastName": "Le",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Diemthu Le"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3362246"
                        ],
                        "name": "Chris Leary",
                        "slug": "Chris-Leary",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Leary",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Leary"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2144265117"
                        ],
                        "name": "Zhuyuan Liu",
                        "slug": "Zhuyuan-Liu",
                        "structuredName": {
                            "firstName": "Zhuyuan",
                            "lastName": "Liu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zhuyuan Liu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49432518"
                        ],
                        "name": "Kyle A. Lucke",
                        "slug": "Kyle-A.-Lucke",
                        "structuredName": {
                            "firstName": "Kyle",
                            "lastName": "Lucke",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kyle A. Lucke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1397991868"
                        ],
                        "name": "Alan Lundin",
                        "slug": "Alan-Lundin",
                        "structuredName": {
                            "firstName": "Alan",
                            "lastName": "Lundin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alan Lundin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213046"
                        ],
                        "name": "G. MacKean",
                        "slug": "G.-MacKean",
                        "structuredName": {
                            "firstName": "Gordon",
                            "lastName": "MacKean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. MacKean"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1973715"
                        ],
                        "name": "A. Maggiore",
                        "slug": "A.-Maggiore",
                        "structuredName": {
                            "firstName": "Adriana",
                            "lastName": "Maggiore",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Maggiore"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2105943261"
                        ],
                        "name": "Maire Mahony",
                        "slug": "Maire-Mahony",
                        "structuredName": {
                            "firstName": "Maire",
                            "lastName": "Mahony",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Maire Mahony"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50092571"
                        ],
                        "name": "K. Miller",
                        "slug": "K.-Miller",
                        "structuredName": {
                            "firstName": "Kieran",
                            "lastName": "Miller",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Miller"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1395811464"
                        ],
                        "name": "R. Nagarajan",
                        "slug": "R.-Nagarajan",
                        "structuredName": {
                            "firstName": "Rahul",
                            "lastName": "Nagarajan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Nagarajan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213032"
                        ],
                        "name": "Ravi Narayanaswami",
                        "slug": "Ravi-Narayanaswami",
                        "structuredName": {
                            "firstName": "Ravi",
                            "lastName": "Narayanaswami",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ravi Narayanaswami"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1393195759"
                        ],
                        "name": "Ray Ni",
                        "slug": "Ray-Ni",
                        "structuredName": {
                            "firstName": "Ray",
                            "lastName": "Ni",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ray Ni"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213062"
                        ],
                        "name": "K. Nix",
                        "slug": "K.-Nix",
                        "structuredName": {
                            "firstName": "Kathy",
                            "lastName": "Nix",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Nix"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3222376"
                        ],
                        "name": "Thomas Norrie",
                        "slug": "Thomas-Norrie",
                        "structuredName": {
                            "firstName": "Thomas",
                            "lastName": "Norrie",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Thomas Norrie"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3175815"
                        ],
                        "name": "Mark Omernick",
                        "slug": "Mark-Omernick",
                        "structuredName": {
                            "firstName": "Mark",
                            "lastName": "Omernick",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mark Omernick"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398212990"
                        ],
                        "name": "Narayana Penukonda",
                        "slug": "Narayana-Penukonda",
                        "structuredName": {
                            "firstName": "Narayana",
                            "lastName": "Penukonda",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Narayana Penukonda"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064991162"
                        ],
                        "name": "Andy Phelps",
                        "slug": "Andy-Phelps",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Phelps",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Phelps"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2116470453"
                        ],
                        "name": "Jonathan Ross",
                        "slug": "Jonathan-Ross",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ross",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ross"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2068076326"
                        ],
                        "name": "Matt Ross",
                        "slug": "Matt-Ross",
                        "structuredName": {
                            "firstName": "Matt",
                            "lastName": "Ross",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matt Ross"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144717532"
                        ],
                        "name": "Amir Salek",
                        "slug": "Amir-Salek",
                        "structuredName": {
                            "firstName": "Amir",
                            "lastName": "Salek",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Amir Salek"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9364218"
                        ],
                        "name": "E. Samadiani",
                        "slug": "E.-Samadiani",
                        "structuredName": {
                            "firstName": "Emad",
                            "lastName": "Samadiani",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Samadiani"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1395804389"
                        ],
                        "name": "C. Severn",
                        "slug": "C.-Severn",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Severn",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Severn"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2473816"
                        ],
                        "name": "G. Sizikov",
                        "slug": "G.-Sizikov",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Sizikov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Sizikov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398212969"
                        ],
                        "name": "Matthew Snelham",
                        "slug": "Matthew-Snelham",
                        "structuredName": {
                            "firstName": "Matthew",
                            "lastName": "Snelham",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matthew Snelham"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2144885096"
                        ],
                        "name": "Jed Souter",
                        "slug": "Jed-Souter",
                        "structuredName": {
                            "firstName": "Jed",
                            "lastName": "Souter",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jed Souter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39566019"
                        ],
                        "name": "D. Steinberg",
                        "slug": "D.-Steinberg",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Steinberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Steinberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1394189636"
                        ],
                        "name": "Andy Swing",
                        "slug": "Andy-Swing",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Swing",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Swing"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1393173244"
                        ],
                        "name": "Mercedes Tan",
                        "slug": "Mercedes-Tan",
                        "structuredName": {
                            "firstName": "Mercedes",
                            "lastName": "Tan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mercedes Tan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48930610"
                        ],
                        "name": "G. Thorson",
                        "slug": "G.-Thorson",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Thorson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Thorson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064522407"
                        ],
                        "name": "Bo Tian",
                        "slug": "Bo-Tian",
                        "structuredName": {
                            "firstName": "Bo",
                            "lastName": "Tian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bo Tian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50042144"
                        ],
                        "name": "H. Toma",
                        "slug": "H.-Toma",
                        "structuredName": {
                            "firstName": "Horia",
                            "lastName": "Toma",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Toma"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1397585416"
                        ],
                        "name": "Erick Tuttle",
                        "slug": "Erick-Tuttle",
                        "structuredName": {
                            "firstName": "Erick",
                            "lastName": "Tuttle",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Erick Tuttle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2053781980"
                        ],
                        "name": "Vijay Vasudevan",
                        "slug": "Vijay-Vasudevan",
                        "structuredName": {
                            "firstName": "Vijay",
                            "lastName": "Vasudevan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vijay Vasudevan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060269562"
                        ],
                        "name": "Richard Walter",
                        "slug": "Richard-Walter",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Walter",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Richard Walter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2108459300"
                        ],
                        "name": "Walter Wang",
                        "slug": "Walter-Wang",
                        "structuredName": {
                            "firstName": "Walter",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Walter Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064779797"
                        ],
                        "name": "Eric Wilcox",
                        "slug": "Eric-Wilcox",
                        "structuredName": {
                            "firstName": "Eric",
                            "lastName": "Wilcox",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eric Wilcox"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1712426"
                        ],
                        "name": "D. Yoon",
                        "slug": "D.-Yoon",
                        "structuredName": {
                            "firstName": "Doe",
                            "lastName": "Yoon",
                            "middleNames": [
                                "Hyun"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Yoon"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 4202768,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "2dfeb5a90abc49ab2a80a492a01a4e2c8e92ec22",
            "isKey": false,
            "numCitedBy": 2954,
            "numCiting": 119,
            "paperAbstract": {
                "fragments": [],
                "text": "Many architects believe that major improvements in cost-energy-performance must now come from domain-specific hardware. This paper evaluates a custom ASIC-called a Tensor Processing Unit (TPU)-deployed in datacenters since 2015 that accelerates the inference phase of neural networks (NN). The heart of the TPU is a 65,536 8-bit MAC matrix multiply unit that offers a peak throughput of 92 TeraOps/second (TOPS) and a large (28 MiB) software-managed on-chip memory. The TPU's deterministic execution model is a better match to the 99th-percentile response-time requirement of our NN applications than are the time-varying optimizations of CPUs and GPUs that help average throughput more than guaranteed latency. The lack of such features helps explain why, despite having myriad MACs and a big memory, the TPU is relatively small and low power. We compare the TPU to a server-class Intel Haswell CPU and an Nvidia K80 GPU, which are contemporaries deployed in the same datacenters. Our workload, written in the high-level TensorFlow framework, uses production NN applications (MLPs, CNNs, and LSTMs) that represent 95% of our datacenters' NN inference demand. Despite low utilization for some applications, the TPU is on average about 15X\u201330X faster than its contemporary GPU or CPU, with TOPS/Watt about 30X\u201380X higher. Moreover, using the GPU's GDDR5 memory in the TPU would triple achieved TOPS and raise TOPS/Watt to nearly 70X the GPU and 200X the CPU."
            },
            "slug": "In-datacenter-performance-analysis-of-a-tensor-unit-Jouppi-Young",
            "title": {
                "fragments": [],
                "text": "In-datacenter performance analysis of a tensor processing unit"
            },
            "tldr": {
                "abstractSimilarityScore": 59,
                "text": "This paper evaluates a custom ASIC-called a Tensor Processing Unit (TPU)-deployed in datacenters since 2015 that accelerates the inference phase of neural networks (NN) and compares it to a server-class Intel Haswell CPU and an Nvidia K80 GPU, which are contemporaries deployed in the samedatacenters."
            },
            "venue": {
                "fragments": [],
                "text": "2017 ACM/IEEE 44th Annual International Symposium on Computer Architecture (ISCA)"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47368718"
                        ],
                        "name": "Ravi Teja Mullapudi",
                        "slug": "Ravi-Teja-Mullapudi",
                        "structuredName": {
                            "firstName": "Ravi",
                            "lastName": "Mullapudi",
                            "middleNames": [
                                "Teja"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ravi Teja Mullapudi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2665634"
                        ],
                        "name": "Dillon Sharlet",
                        "slug": "Dillon-Sharlet",
                        "structuredName": {
                            "firstName": "Dillon",
                            "lastName": "Sharlet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dillon Sharlet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2789576"
                        ],
                        "name": "Kayvon Fatahalian",
                        "slug": "Kayvon-Fatahalian",
                        "structuredName": {
                            "firstName": "Kayvon",
                            "lastName": "Fatahalian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kayvon Fatahalian"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 98,
                                "start": 76
                            }
                        ],
                        "text": "It also opens the door to the use of the extensive work on auto-scheduling (Mullapudi et al., 2016; Adams et al., 2019; Chen et al., 2018b; Zheng et al., 2020) for optimizing these models."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 14400771,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9b240a87b11d085641d6640f73cc3cc2d678e305",
            "isKey": false,
            "numCitedBy": 129,
            "numCiting": 17,
            "paperAbstract": {
                "fragments": [],
                "text": "The Halide image processing language has proven to be an effective system for authoring high-performance image processing code. Halide programmers need only provide a high-level strategy for mapping an image processing pipeline to a parallel machine (a schedule), and the Halide compiler carries out the mechanical task of generating platform-specific code that implements the schedule. Unfortunately, designing high-performance schedules for complex image processing pipelines requires substantial knowledge of modern hardware architecture and code-optimization techniques. In this paper we provide an algorithm for automatically generating high-performance schedules for Halide programs. Our solution extends the function bounds analysis already present in the Halide compiler to automatically perform locality and parallelism-enhancing global program transformations typical of those employed by expert Halide developers. The algorithm does not require costly (and often impractical) auto-tuning, and, in seconds, generates schedules for a broad set of image processing benchmarks that are performance-competitive with, and often better than, schedules manually authored by expert Halide developers on server and mobile CPUs, as well as GPUs."
            },
            "slug": "Automatically-scheduling-halide-image-processing-Mullapudi-Adams",
            "title": {
                "fragments": [],
                "text": "Automatically scheduling halide image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "An algorithm for automatically generating high-performance schedules for Halide programs that does not require costly (and often impractical) auto-tuning, and generates schedules for a broad set of image processing benchmarks that are performance-competitive with, and often better than, schedules manually authored by expert Halide developers on server and mobile CPUs, as well as GPUs."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Graph."
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2054980435"
                        ],
                        "name": "P. Rawat",
                        "slug": "P.-Rawat",
                        "structuredName": {
                            "firstName": "Prashant",
                            "lastName": "Rawat",
                            "middleNames": [
                                "Singh"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Rawat"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1769780"
                        ],
                        "name": "F. Rastello",
                        "slug": "F.-Rastello",
                        "structuredName": {
                            "firstName": "Fabrice",
                            "lastName": "Rastello",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Rastello"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1403811034"
                        ],
                        "name": "Aravind Sukumaran-Rajam",
                        "slug": "Aravind-Sukumaran-Rajam",
                        "structuredName": {
                            "firstName": "Aravind",
                            "lastName": "Sukumaran-Rajam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Aravind Sukumaran-Rajam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793611"
                        ],
                        "name": "L. Pouchet",
                        "slug": "L.-Pouchet",
                        "structuredName": {
                            "firstName": "Louis-No\u00ebl",
                            "lastName": "Pouchet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Pouchet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793925"
                        ],
                        "name": "A. Rountev",
                        "slug": "A.-Rountev",
                        "structuredName": {
                            "firstName": "Atanas",
                            "lastName": "Rountev",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Rountev"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 3387007,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9dbadf753b96f45424e6541755d1d5aeea83827e",
            "isKey": false,
            "numCitedBy": 35,
            "numCiting": 61,
            "paperAbstract": {
                "fragments": [],
                "text": "The recent advent of compute-intensive GPU architecture has allowed application developers to explore high-order 3D stencils for better computational accuracy. A common optimization strategy for such stencils is to expose sufficient data reuse by means such as loop unrolling, with the expectation of register-level reuse. However, the resulting code is often highly constrained by register pressure. While current state-of-the-art register allocators are satisfactory for most applications, they are unable to effectively manage register pressure for such complex high-order stencils, resulting in sub-optimal code with a large number of register spills. In this paper, we develop a statement reordering framework that models stencil computations as a DAG of trees with shared leaves, and adapts an optimal scheduling algorithm for minimizing register usage for expression trees. The effectiveness of the approach is demonstrated through experimental results on a range of stencils extracted from application codes."
            },
            "slug": "Register-optimizations-for-stencils-on-GPUs-Rawat-Rastello",
            "title": {
                "fragments": [],
                "text": "Register optimizations for stencils on GPUs"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "A statement reordering framework is developed that models stencil computations as a DAG of trees with shared leaves, and adapts an optimal scheduling algorithm for minimizing register usage for expression trees."
            },
            "venue": {
                "fragments": [],
                "text": "PPoPP"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2010759"
                        ],
                        "name": "H. V. D. Spek",
                        "slug": "H.-V.-D.-Spek",
                        "structuredName": {
                            "firstName": "Harmen",
                            "lastName": "Spek",
                            "middleNames": [
                                "L.",
                                "A.",
                                "van",
                                "der"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. V. D. Spek"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144980107"
                        ],
                        "name": "C. Holm",
                        "slug": "C.-Holm",
                        "structuredName": {
                            "firstName": "C.",
                            "lastName": "Holm",
                            "middleNames": [
                                "W.",
                                "Mattias"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Holm"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1706624"
                        ],
                        "name": "H. Wijshoff",
                        "slug": "H.-Wijshoff",
                        "structuredName": {
                            "firstName": "Harry",
                            "lastName": "Wijshoff",
                            "middleNames": [
                                "A.",
                                "G."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Wijshoff"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 17127660,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "58b98d9e33b3f5cdac9f2cbae5ab5da8d3698b96",
            "isKey": false,
            "numCitedBy": 7,
            "numCiting": 15,
            "paperAbstract": {
                "fragments": [],
                "text": "Loop optimization and parallelization have been most successful on code using arrays exclusively. Preferably, such code does not contain indirect access and has only simple, counted loops. The use of recursive data structures makes matters even worse, and optimization of such code has been less successful. Traversal of such data structures is often done using loops with data-dependent loop conditions. In this paper, we present a compiler transformation chain that transforms pointer traversal loops into counted loops operating on arrays that are indirectly accessed. We also show that this indirect access can in some cases be eliminated if the traversed data structure is reordered in memory. This results in a representation on which many existing techniques can be applied. Our system requires monitoring of actual arguments and heap data on which loop conditions depend so that preconditions for the optimized functions can be checked. Our experiments show that this overhead is small, considering the optimization opportunities the representation of the transformed code provides, and well worth the price."
            },
            "slug": "How-to-unleash-array-optimizations-on-code-using-Spek-Holm",
            "title": {
                "fragments": [],
                "text": "How to unleash array optimizations on code using recursive data structures"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "This paper presents a compiler transformation chain that transforms pointer traversal loops into counted loops operating on arrays that are indirectly accessed, and shows that this indirect access can be eliminated if the traversed data structure is reordered in memory."
            },
            "venue": {
                "fragments": [],
                "text": "ICS '10"
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2166511"
                        ],
                        "name": "R. Socher",
                        "slug": "R.-Socher",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Socher",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Socher"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "24590005"
                        ],
                        "name": "Alex Perelygin",
                        "slug": "Alex-Perelygin",
                        "structuredName": {
                            "firstName": "Alex",
                            "lastName": "Perelygin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alex Perelygin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2110402830"
                        ],
                        "name": "Jean Wu",
                        "slug": "Jean-Wu",
                        "structuredName": {
                            "firstName": "Jean",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jean Wu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1964541"
                        ],
                        "name": "Jason Chuang",
                        "slug": "Jason-Chuang",
                        "structuredName": {
                            "firstName": "Jason",
                            "lastName": "Chuang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jason Chuang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144783904"
                        ],
                        "name": "Christopher D. Manning",
                        "slug": "Christopher-D.-Manning",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Manning",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christopher D. Manning"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34699434"
                        ],
                        "name": "A. Ng",
                        "slug": "A.-Ng",
                        "structuredName": {
                            "firstName": "A.",
                            "lastName": "Ng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Ng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144922861"
                        ],
                        "name": "Christopher Potts",
                        "slug": "Christopher-Potts",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Potts",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christopher Potts"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 75,
                                "start": 54
                            }
                        ],
                        "text": "Child-sum TreeGRU TreeGRU Stanford sentiment treebank (Socher et al., 2013) Child-sum TreeLSTM (Tai et al."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 990233,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "687bac2d3320083eb4530bf18bb8f8f721477600",
            "isKey": false,
            "numCitedBy": 5431,
            "numCiting": 55,
            "paperAbstract": {
                "fragments": [],
                "text": "Semantic word spaces have been very useful but cannot express the meaning of longer phrases in a principled way. Further progress towards understanding compositionality in tasks such as sentiment detection requires richer supervised training and evaluation resources and more powerful models of composition. To remedy this, we introduce a Sentiment Treebank. It includes fine grained sentiment labels for 215,154 phrases in the parse trees of 11,855 sentences and presents new challenges for sentiment compositionality. To address them, we introduce the Recursive Neural Tensor Network. When trained on the new treebank, this model outperforms all previous methods on several metrics. It pushes the state of the art in single sentence positive/negative classification from 80% up to 85.4%. The accuracy of predicting fine-grained sentiment labels for all phrases reaches 80.7%, an improvement of 9.7% over bag of features baselines. Lastly, it is the only model that can accurately capture the effects of negation and its scope at various tree levels for both positive and negative phrases."
            },
            "slug": "Recursive-Deep-Models-for-Semantic-Compositionality-Socher-Perelygin",
            "title": {
                "fragments": [],
                "text": "Recursive Deep Models for Semantic Compositionality Over a Sentiment Treebank"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "A Sentiment Treebank that includes fine grained sentiment labels for 215,154 phrases in the parse trees of 11,855 sentences and presents new challenges for sentiment compositionality, and introduces the Recursive Neural Tensor Network."
            },
            "venue": {
                "fragments": [],
                "text": "EMNLP"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1693799"
                        ],
                        "name": "Putt Sakdhnagool",
                        "slug": "Putt-Sakdhnagool",
                        "structuredName": {
                            "firstName": "Putt",
                            "lastName": "Sakdhnagool",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Putt Sakdhnagool"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1736081"
                        ],
                        "name": "Amit Sabne",
                        "slug": "Amit-Sabne",
                        "structuredName": {
                            "firstName": "Amit",
                            "lastName": "Sabne",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Amit Sabne"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1727592"
                        ],
                        "name": "R. Eigenmann",
                        "slug": "R.-Eigenmann",
                        "structuredName": {
                            "firstName": "Rudolf",
                            "lastName": "Eigenmann",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Eigenmann"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 105,
                                "start": 81
                            }
                        ],
                        "text": "We note that techniques developed in past work such as (Rawat et al., 2018) and (Sakdhnagool et al., 2019) can potentially be applied in our context to alleviate this issue."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 195820626,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "44a7d769e34ebdd42ae12699cc6c9c11d8bf3b64",
            "isKey": false,
            "numCitedBy": 4,
            "numCiting": 35,
            "paperAbstract": {
                "fragments": [],
                "text": "GPU utilization, measured as occupancy, is limited by the parallel threads' combined usage of on-chip resources, such as registers and the programmer-managed shared memory. Higher resource demand means lower effective parallel thread count, and therefore lower program performance. Our investigation found that registers are often the occupancy limiters. \nThe de-facto nvcc compiler-based approach spills excessive registers to the off-chip memory, ignoring the shared memory and leaving the on-chip resources underutilized. To mitigate the register demand, this paper presents a binary translation technique, called RegDem, that spills excessive registers to the underutilized shared memory by transforming the GPU assembly code (SASS). Most GPU programs do not fully use shared memory, thus allowing RegDem to use it for register spilling. The higher occupancy achieved by RegDem outweighs the slightly higher cost of accessing shared memory instead of placing data in registers. The paper also presents a compile-time performance predictor that models instructions stalls to choose the best version from a set of program variants. Cumulatively, these techniques outperform the nvcc compiler with a 9% geometric mean, the highest observed being 18%."
            },
            "slug": "RegDem:-Increasing-GPU-Performance-via-Shared-Sakdhnagool-Sabne",
            "title": {
                "fragments": [],
                "text": "RegDem: Increasing GPU Performance via Shared Memory Register Spilling"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A binary translation technique that spills excessive registers to the underutilized shared memory by transforming the GPU assembly code (SASS) and a compile-time performance predictor that models instructions stalls to choose the best version from a set of program variants are presented."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2521776"
                        ],
                        "name": "Bing Shuai",
                        "slug": "Bing-Shuai",
                        "structuredName": {
                            "firstName": "Bing",
                            "lastName": "Shuai",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bing Shuai"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145084658"
                        ],
                        "name": "Zhen Zuo",
                        "slug": "Zhen-Zuo",
                        "structuredName": {
                            "firstName": "Zhen",
                            "lastName": "Zuo",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zhen Zuo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9071523"
                        ],
                        "name": "B. Wang",
                        "slug": "B.-Wang",
                        "structuredName": {
                            "firstName": "Bing",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "B. Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2096527"
                        ],
                        "name": "G. Wang",
                        "slug": "G.-Wang",
                        "structuredName": {
                            "firstName": "G.",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Wang"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 124,
                                "start": 117
                            }
                        ],
                        "text": "For each model, we perform measurements for two batch sizes (1 and 10) and two hidden sizes (256 and 512 for TreeFC, DAG-RNN, TreeGRU and TreeLSTM and 64 and 128 for MV-RNN)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 138,
                                "start": 120
                            }
                        ],
                        "text": "Hierarchical and spatial relations in images can be learned by modeling them as trees (Socher et al., 2012a) or graphs (Shuai et al., 2015)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 384,
                                "start": 377
                            }
                        ],
                        "text": "The table below lists linearization times (in\n4Instead of h = z \u2217 ht\u22121 + (1\u2212 z) \u2217 h\u2032, where h\u2032 is the result of a linear transform, the h-gate in SimpleTreeGRU is computed as h = (1\u2212 z) \u2217 h\u2032.\n\u00b5s) for different models.5 We find that on the GPU backend for batch size 10 and hidden size hs, linearization overheads, as a percentage of total runtime, range from 1.2% (for MVRNN) to 24.4% (for DAG-RNN)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 49,
                                "start": 29
                            }
                        ],
                        "text": "Recursive portion of DAG-RNN (Shuai et al., 2015) DAG-RNN Synthetic DAGs (size 10x10)"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 11,
                                "start": 4
                            }
                        ],
                        "text": "For DAG-RNN, which performs computations on DAGs, specialization does not lead to any speedup as expected."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 75,
                                "start": 68
                            }
                        ],
                        "text": "In the CORTEX and PyTorch implementations for TreeLSTM, TreeGRU and\nDAG-RNN, the matrix-vector multiplications involving the inputs were performed at the beginning of the execution by a call to a matrix multiplication kernel as in GRNN. DyNet\u2019s dynamic batching algorithm generally performs this optimization automatically and we found that doing so manually resulted in higher inference latencies, so we report the automatic numbers."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 42,
                                "start": 35
                            }
                        ],
                        "text": "Batch Size TreeLSTM/TreeGRU/MV-RNN DAG-RNN TreeFC 1 1.31 8.2 3.04\n10 9.64 95.14 30.36"
                    },
                    "intents": []
                }
            ],
            "corpusId": 12308254,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "7ff93e69010392c338d9f2fac81cb1ac11a27d07",
            "isKey": true,
            "numCitedBy": 131,
            "numCiting": 57,
            "paperAbstract": {
                "fragments": [],
                "text": "In image labeling, local representations for image units are usually generated from their surrounding image patches, thus long-range contextual information is not effectively encoded. In this paper, we introduce recurrent neural networks (RNNs) to address this issue. Specifically, directed acyclic graph RNNs (DAG-RNNs) are proposed to process DAG-structured images, which enables the network to model long-range semantic dependencies among image units. Our DAG-RNNs are capable of tremendously enhancing the discriminative power of local representations, which significantly benefits the local classification. Meanwhile, we propose a novel class weighting function that attends to rare classes, which phenomenally boosts the recognition accuracy for non-frequent classes. Integrating with convolution and deconvolution layers, our DAG-RNNs achieve new state-of-the-art results on the challenging SiftFlow, CamVid and Barcelona benchmarks."
            },
            "slug": "DAG-Recurrent-Neural-Networks-for-Scene-Labeling-Shuai-Zuo",
            "title": {
                "fragments": [],
                "text": "DAG-Recurrent Neural Networks for Scene Labeling"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "Direct acyclic graph RNNs are proposed to process DAG-structured images, which enables the network to model long-range semantic dependencies among image units and proposes a novel class weighting function that attends to rare classes, which phenomenally boosts the recognition accuracy for non-frequent classes."
            },
            "venue": {
                "fragments": [],
                "text": "2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1979489"
                        ],
                        "name": "Kyunghyun Cho",
                        "slug": "Kyunghyun-Cho",
                        "structuredName": {
                            "firstName": "Kyunghyun",
                            "lastName": "Cho",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kyunghyun Cho"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3158246"
                        ],
                        "name": "Bart van Merrienboer",
                        "slug": "Bart-van-Merrienboer",
                        "structuredName": {
                            "firstName": "Bart",
                            "lastName": "Merrienboer",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bart van Merrienboer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1854385"
                        ],
                        "name": "\u00c7aglar G\u00fcl\u00e7ehre",
                        "slug": "\u00c7aglar-G\u00fcl\u00e7ehre",
                        "structuredName": {
                            "firstName": "\u00c7aglar",
                            "lastName": "G\u00fcl\u00e7ehre",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "\u00c7aglar G\u00fcl\u00e7ehre"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3335364"
                        ],
                        "name": "Dzmitry Bahdanau",
                        "slug": "Dzmitry-Bahdanau",
                        "structuredName": {
                            "firstName": "Dzmitry",
                            "lastName": "Bahdanau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dzmitry Bahdanau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2076086"
                        ],
                        "name": "Fethi Bougares",
                        "slug": "Fethi-Bougares",
                        "structuredName": {
                            "firstName": "Fethi",
                            "lastName": "Bougares",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fethi Bougares"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144518416"
                        ],
                        "name": "Holger Schwenk",
                        "slug": "Holger-Schwenk",
                        "structuredName": {
                            "firstName": "Holger",
                            "lastName": "Schwenk",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Holger Schwenk"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751762"
                        ],
                        "name": "Yoshua Bengio",
                        "slug": "Yoshua-Bengio",
                        "structuredName": {
                            "firstName": "Yoshua",
                            "lastName": "Bengio",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yoshua Bengio"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 154,
                                "start": 138
                            }
                        ],
                        "text": "These recursive models are often extensions of models designed for sequential data such as LSTM (Hochreiter & Schmidhuber, 1997) and GRU (Cho et al., 2014)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 5590763,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0b544dfe355a5070b60986319a3f51fb45d1348e",
            "isKey": false,
            "numCitedBy": 15253,
            "numCiting": 39,
            "paperAbstract": {
                "fragments": [],
                "text": "In this paper, we propose a novel neural network model called RNN Encoder\u2010 Decoder that consists of two recurrent neural networks (RNN). One RNN encodes a sequence of symbols into a fixedlength vector representation, and the other decodes the representation into another sequence of symbols. The encoder and decoder of the proposed model are jointly trained to maximize the conditional probability of a target sequence given a source sequence. The performance of a statistical machine translation system is empirically found to improve by using the conditional probabilities of phrase pairs computed by the RNN Encoder\u2010Decoder as an additional feature in the existing log-linear model. Qualitatively, we show that the proposed model learns a semantically and syntactically meaningful representation of linguistic phrases."
            },
            "slug": "Learning-Phrase-Representations-using-RNN-for-Cho-Merrienboer",
            "title": {
                "fragments": [],
                "text": "Learning Phrase Representations using RNN Encoder\u2013Decoder for Statistical Machine Translation"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "Qualitatively, the proposed RNN Encoder\u2010Decoder model learns a semantically and syntactically meaningful representation of linguistic phrases."
            },
            "venue": {
                "fragments": [],
                "text": "EMNLP"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143943323"
                        ],
                        "name": "M. Mohammadi",
                        "slug": "M.-Mohammadi",
                        "structuredName": {
                            "firstName": "Mahdi",
                            "lastName": "Mohammadi",
                            "middleNames": [
                                "Soltan"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Mohammadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2797215"
                        ],
                        "name": "Kazem Cheshmi",
                        "slug": "Kazem-Cheshmi",
                        "structuredName": {
                            "firstName": "Kazem",
                            "lastName": "Cheshmi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kazem Cheshmi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2917750"
                        ],
                        "name": "M. Dehnavi",
                        "slug": "M.-Dehnavi",
                        "structuredName": {
                            "firstName": "Maryam",
                            "lastName": "Dehnavi",
                            "middleNames": [
                                "Mehri"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Dehnavi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2781614"
                        ],
                        "name": "Anand Venkat",
                        "slug": "Anand-Venkat",
                        "structuredName": {
                            "firstName": "Anand",
                            "lastName": "Venkat",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anand Venkat"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143673589"
                        ],
                        "name": "Tomofumi Yuki",
                        "slug": "Tomofumi-Yuki",
                        "structuredName": {
                            "firstName": "Tomofumi",
                            "lastName": "Yuki",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tomofumi Yuki"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709408"
                        ],
                        "name": "M. Strout",
                        "slug": "M.-Strout",
                        "structuredName": {
                            "firstName": "Michelle",
                            "lastName": "Strout",
                            "middleNames": [
                                "Mills"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Strout"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 111,
                                "start": 89
                            }
                        ],
                        "text": "Sparse Polyhedral Framework: The Sparse Polyhedral Framework (SPF) (Strout et al., 2018; Mohammadi et al., 2019; Nandy et al., 2018) extends the polyhedral model for the case of sparse tensor computations."
                    },
                    "intents": []
                }
            ],
            "corpusId": 197630286,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9698b8b7e7315643d5c554c3191107689b2d18e6",
            "isKey": false,
            "numCitedBy": 7,
            "numCiting": 23,
            "paperAbstract": {
                "fragments": [],
                "text": "Automatic parallelization is an approach where a compiler analyzes serial code and identifies computations that can be rewritten to leverage parallelism. Many data dependence analysis techniques have been developed to determine which loops in a code can be parallelized. With code that includes indirect array accesses through what are commonly called index arrays, such data dependence analysis is restricted in the conclusions that can be drawn at compile time. Various approaches that use index array properties such as monotonicity have been shown to more effectively find parallel loops. In this paper, we extend the kinds of properties about index arrays that can be expressed, show how to convert loop-carried data dependence relations and relevant index-array properties to constraints that can be provided to the Z3 SMT solver, and evaluate the impact of using such index-array properties on identifying parallel loops in a set of numerical benchmarks."
            },
            "slug": "Extending-Index-Array-Properties-for-Data-Analysis-Mohammadi-Cheshmi",
            "title": {
                "fragments": [],
                "text": "Extending Index-Array Properties for Data Dependence Analysis"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "This paper shows how to convert loop-carried data dependence relations and relevant index-array properties to constraints that can be provided to the Z3 SMT solver, and evaluates the impact of using such index- array properties on identifying parallel loops in a set of numerical benchmarks."
            },
            "venue": {
                "fragments": [],
                "text": "LCPC"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8421815"
                        ],
                        "name": "Kai Sheng Tai",
                        "slug": "Kai-Sheng-Tai",
                        "structuredName": {
                            "firstName": "Kai",
                            "lastName": "Tai",
                            "middleNames": [
                                "Sheng"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kai Sheng Tai"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2166511"
                        ],
                        "name": "R. Socher",
                        "slug": "R.-Socher",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Socher",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Socher"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144783904"
                        ],
                        "name": "Christopher D. Manning",
                        "slug": "Christopher-D.-Manning",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Manning",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christopher D. Manning"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 45,
                                "start": 27
                            }
                        ],
                        "text": ", 2013) Child-sum TreeLSTM (Tai et al., 2015) TreeLSTM Stanford sentiment treebank"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 12,
                                "start": 4
                            }
                        ],
                        "text": "The TreeLSTM and TreeGRU models were scheduled similarly to the sequential LSTM and GRU schedules proposed in GRNN (Holmes et al., 2019)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 146,
                                "start": 138
                            }
                        ],
                        "text": "For each model, we perform measurements for two batch sizes (1 and 10) and two hidden sizes (256 and 512 for TreeFC, DAG-RNN, TreeGRU and TreeLSTM and 64 and 128 for MV-RNN)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 112
                            }
                        ],
                        "text": "Similarly, we note that we cannot apply the loop peeling and model persistence optimizations in the case of the TreeLSTM model at the same time."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 44,
                                "start": 36
                            }
                        ],
                        "text": "The TreeGRU model is similar to the TreeLSTM model, except that it uses the GRU RNN cell."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 48,
                                "start": 40
                            }
                        ],
                        "text": "Unrolling: We evaluate unrolling on the TreeLSTM model on the GPU backend and a hidden size of 256."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 31,
                                "start": 23
                            }
                        ],
                        "text": "Complex models such as TreeLSTM that provide more fusion opportunities benefit more."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 98,
                                "start": 90
                            }
                        ],
                        "text": "In order to present a fair comparison with Cavs, we therefore use the TreeFC, TreeGRU and TreeLSTM models on the GPU backend, with specialization disabled in CORTEX and do not include the input matrix-vector multiplications in both Cavs and CORTEX."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 85,
                                "start": 77
                            }
                        ],
                        "text": "We find that recursive unrolling precludes us from using persistence for the TreeLSTM and TreeRNN models discussed in \u00a77.4."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 54,
                                "start": 46
                            }
                        ],
                        "text": "In the CORTEX and PyTorch implementations for TreeLSTM, TreeGRU and\nDAG-RNN, the matrix-vector multiplications involving the inputs were performed at the beginning of the execution by a call to a matrix multiplication kernel as in GRNN. DyNet\u2019s dynamic batching algorithm generally performs this optimization automatically and we found that doing so manually resulted in higher inference latencies, so we report the automatic numbers."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 50,
                                "start": 42
                            }
                        ],
                        "text": "As\n3We use only the recursive part of the TreeLSTM model, without the input matrix-vector multiplications.\ncompared to Cavs and CORTEX, which deal with graphs corresponding to the input data structures, DyNet therefore must handle a much larger graph."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 116,
                                "start": 108
                            }
                        ],
                        "text": "For example, cuDNN contains implementations for the LSTM and GRU models, but not for the less commonly used TreeLSTM and MV-RNN models."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 19,
                                "start": 11
                            }
                        ],
                        "text": "Batch Size TreeLSTM/TreeGRU/MV-RNN DAG-RNN TreeFC 1 1.31 8.2 3.04\n10 9.64 95.14 30.36"
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 78,
                                "start": 70
                            }
                        ],
                        "text": "7, which plots inference latency as a function of hidden size for the TreeLSTM model3 for batch size 10 for Cavs and DyNet on the GPU and Intel backends."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 79,
                                "start": 71
                            }
                        ],
                        "text": "Textual data, represented as parse trees, can be fed to models such as TreeLSTM (Tai et al., 2015) and MV-RNN (Socher et al., 2012b)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 98,
                                "start": 80
                            }
                        ],
                        "text": "Textual data, represented as parse trees, can be fed to models such as TreeLSTM (Tai et al., 2015) and MV-RNN (Socher et al."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 3033526,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "32de44f01a96d4473d21099d15e25bc2b9f08e2f",
            "isKey": true,
            "numCitedBy": 2533,
            "numCiting": 43,
            "paperAbstract": {
                "fragments": [],
                "text": "Because of their superior ability to preserve sequence information over time, Long Short-Term Memory (LSTM) networks, a type of recurrent neural network with a more complex computational unit, have obtained strong results on a variety of sequence modeling tasks. The only underlying LSTM structure that has been explored so far is a linear chain. However, natural language exhibits syntactic properties that would naturally combine words to phrases. We introduce the Tree-LSTM, a generalization of LSTMs to tree-structured network topologies. Tree-LSTMs outperform all existing systems and strong LSTM baselines on two tasks: predicting the semantic relatedness of two sentences (SemEval 2014, Task 1) and sentiment classification (Stanford Sentiment Treebank)."
            },
            "slug": "Improved-Semantic-Representations-From-Long-Memory-Tai-Socher",
            "title": {
                "fragments": [],
                "text": "Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "The Tree-LSTM is introduced, a generalization of LSTMs to tree-structured network topologies that outperform all existing systems and strong LSTM baselines on two tasks: predicting the semantic relatedness of two sentences and sentiment classification."
            },
            "venue": {
                "fragments": [],
                "text": "ACL"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "6466048"
                        ],
                        "name": "Endong Wang",
                        "slug": "Endong-Wang",
                        "structuredName": {
                            "firstName": "Endong",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Endong Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143904664"
                        ],
                        "name": "Qing Zhang",
                        "slug": "Qing-Zhang",
                        "structuredName": {
                            "firstName": "Qing",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qing Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057609515"
                        ],
                        "name": "Shen Bo",
                        "slug": "Shen-Bo",
                        "structuredName": {
                            "firstName": "Shen",
                            "lastName": "Bo",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shen Bo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46266136"
                        ],
                        "name": "Guangyong Zhang",
                        "slug": "Guangyong-Zhang",
                        "structuredName": {
                            "firstName": "Guangyong",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Guangyong Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47062728"
                        ],
                        "name": "X. Lu",
                        "slug": "X.-Lu",
                        "structuredName": {
                            "firstName": "Xiaowei",
                            "lastName": "Lu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "X. Lu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50528396"
                        ],
                        "name": "Qing Wu",
                        "slug": "Qing-Wu",
                        "structuredName": {
                            "firstName": "Qing",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qing Wu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50852421"
                        ],
                        "name": "Yajuan Wang",
                        "slug": "Yajuan-Wang",
                        "structuredName": {
                            "firstName": "Yajuan",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yajuan Wang"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 118195276,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "83cee2606be3ceda59ef28fe1a9f179cd4e1144d",
            "isKey": false,
            "numCitedBy": 414,
            "numCiting": 37,
            "paperAbstract": {
                "fragments": [],
                "text": "In order to achieve optimal performance on multi-core and multi-processor systems, we need to fully use the features of parallelism and manage the memory hierarchical characters efficiently. The performance of sequential codes relies on the instruction-level and register-level SIMD parallelism, and also on high-speed cache-blocking functions. Threading applications need advanced planning to achieve satisfactory load balancing."
            },
            "slug": "Intel-Math-Kernel-Library-Wang-Zhang",
            "title": {
                "fragments": [],
                "text": "Intel Math Kernel Library"
            },
            "tldr": {
                "abstractSimilarityScore": 90,
                "text": "In order to achieve optimal performance on multi-core and multi-processor systems, the features of parallelism and manage the memory hierarchical characters efficiently need to be used."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2290932"
                        ],
                        "name": "Fredrik Kjolstad",
                        "slug": "Fredrik-Kjolstad",
                        "structuredName": {
                            "firstName": "Fredrik",
                            "lastName": "Kjolstad",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fredrik Kjolstad"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39703968"
                        ],
                        "name": "Peter Ahrens",
                        "slug": "Peter-Ahrens",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Ahrens",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Peter Ahrens"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145683292"
                        ],
                        "name": "S. Kamil",
                        "slug": "S.-Kamil",
                        "structuredName": {
                            "firstName": "Shoaib",
                            "lastName": "Kamil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Kamil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 89,
                                "start": 66
                            }
                        ],
                        "text": "1) is similar to the concept of workspaces for Taco introduced in (Kjolstad et al., 2019)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 155,
                                "start": 134
                            }
                        ],
                        "text": "For example, the idea of dense layouts for intermediate tensors (\u00a75.1) is similar to the concept of workspaces for Taco introduced in (Kjolstad et al., 2019)."
                    },
                    "intents": [
                        {
                            "id": "result"
                        }
                    ]
                }
            ],
            "corpusId": 71149591,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "7a74ebbd92dd982fa231d127230783482436b672",
            "isKey": true,
            "numCitedBy": 27,
            "numCiting": 44,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper shows how to extend sparse tensor algebra compilers to introduce temporary tensors called workspaces to avoid inefficient sparse data structures accesses. We develop an intermediate representation (IR) for tensor operations called concrete index notation that specifies when sub-computations occur and where they are stored. We then describe the workspace transformation in this IR, how to programmatically invoke it, and how the IR is compiled to sparse code. Finally, we show how the transformation can be used to optimize sparse tensor kernels, including sparse matrix multiplication, sparse tensor addition, and the matricized tensor times Khatri-Rao product (MTTKRP). Our results show that the workspace transformation brings the performance of these kernels on par with hand-optimized implementations. For example, we improve the performance of MTTKRP with dense output by up to 35%, and enable generating sparse matrix multiplication and MTTKRP with sparse output, neither of which were supported by prior tensor algebra compilers."
            },
            "slug": "Tensor-Algebra-Compilation-with-Workspaces-Kjolstad-Ahrens",
            "title": {
                "fragments": [],
                "text": "Tensor Algebra Compilation with Workspaces"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "The results show that the workspace transformation brings the performance of these kernels on par with hand-optimized implementations, and enables generating sparse matrix multiplication and MTTKRP with sparse output, neither of which were supported by prior tensor algebra compilers."
            },
            "venue": {
                "fragments": [],
                "text": "2019 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1765246"
                        ],
                        "name": "Chris Lattner",
                        "slug": "Chris-Lattner",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Lattner",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Lattner"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47305537"
                        ],
                        "name": "J. Pienaar",
                        "slug": "J.-Pienaar",
                        "structuredName": {
                            "firstName": "Jacques",
                            "lastName": "Pienaar",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Pienaar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9426225"
                        ],
                        "name": "M. Amini",
                        "slug": "M.-Amini",
                        "structuredName": {
                            "firstName": "Mehdi",
                            "lastName": "Amini",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Amini"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1505470866"
                        ],
                        "name": "River Riddle",
                        "slug": "River-Riddle",
                        "structuredName": {
                            "firstName": "River",
                            "lastName": "Riddle",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "River Riddle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1774432"
                        ],
                        "name": "T. Shpeisman",
                        "slug": "T.-Shpeisman",
                        "structuredName": {
                            "firstName": "Tatiana",
                            "lastName": "Shpeisman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Shpeisman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "36347083"
                        ],
                        "name": "Andy Davis",
                        "slug": "Andy-Davis",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Davis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Davis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2054833547"
                        ],
                        "name": "O. Zinenko",
                        "slug": "O.-Zinenko",
                        "structuredName": {
                            "firstName": "Oleksandr",
                            "lastName": "Zinenko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Zinenko"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 4,
                                "start": 0
                            }
                        ],
                        "text": "MLIR (Lattner et al., 2020) provides infrastructure to build deep learning compilers, and CORTEX could potentially be built using MLIR."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 27,
                                "start": 5
                            }
                        ],
                        "text": "MLIR (Lattner et al., 2020) provides infrastructure to build deep learning compilers and CORTEX could potentially be built using MLIR."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 211296505,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "a38e4c9772172beb56c184a9b5c8fbb77cf18457",
            "isKey": false,
            "numCitedBy": 110,
            "numCiting": 59,
            "paperAbstract": {
                "fragments": [],
                "text": "This work presents MLIR, a novel approach to building reusable and extensible compiler infrastructure. MLIR aims to address software fragmentation, improve compilation for heterogeneous hardware, significantly reduce the cost of building domain specific compilers, and aid in connecting existing compilers together. MLIR facilitates the design and implementation of code generators, translators and optimizers at different levels of abstraction and also across application domains, hardware targets and execution environments. The contribution of this work includes (1) discussion of MLIR as a research artifact, built for extension and evolution, and identifying the challenges and opportunities posed by this novel design point in design, semantics, optimization specification, system, and engineering. (2) evaluation of MLIR as a generalized infrastructure that reduces the cost of building compilers-describing diverse use-cases to show research and educational opportunities for future programming languages, compilers, execution environments, and computer architecture. The paper also presents the rationale for MLIR, its original design principles, structures and semantics."
            },
            "slug": "MLIR:-A-Compiler-Infrastructure-for-the-End-of-Law-Lattner-Pienaar",
            "title": {
                "fragments": [],
                "text": "MLIR: A Compiler Infrastructure for the End of Moore's Law"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "Evaluation of MLIR as a generalized infrastructure that reduces the cost of building compilers-describing diverse use-cases to show research and educational opportunities for future programming languages, compilers, execution environments, and computer architecture."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2020
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3308557"
                        ],
                        "name": "S. Hochreiter",
                        "slug": "S.-Hochreiter",
                        "structuredName": {
                            "firstName": "Sepp",
                            "lastName": "Hochreiter",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Hochreiter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145341374"
                        ],
                        "name": "J. Schmidhuber",
                        "slug": "J.-Schmidhuber",
                        "structuredName": {
                            "firstName": "J\u00fcrgen",
                            "lastName": "Schmidhuber",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Schmidhuber"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 1915014,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "44d2abe2175df8153f465f6c39b68b76a0d40ab9",
            "isKey": false,
            "numCitedBy": 52391,
            "numCiting": 68,
            "paperAbstract": {
                "fragments": [],
                "text": "Learning to store information over extended time intervals by recurrent backpropagation takes a very long time, mostly because of insufficient, decaying error backflow. We briefly review Hochreiter's (1991) analysis of this problem, then address it by introducing a novel, efficient, gradient based method called long short-term memory (LSTM). Truncating the gradient where this does not do harm, LSTM can learn to bridge minimal time lags in excess of 1000 discrete-time steps by enforcing constant error flow through constant error carousels within special units. Multiplicative gate units learn to open and close access to the constant error flow. LSTM is local in space and time; its computational complexity per time step and weight is O. 1. Our experiments with artificial data involve local, distributed, real-valued, and noisy pattern representations. In comparisons with real-time recurrent learning, back propagation through time, recurrent cascade correlation, Elman nets, and neural sequence chunking, LSTM leads to many more successful runs, and learns much faster. LSTM also solves complex, artificial long-time-lag tasks that have never been solved by previous recurrent network algorithms."
            },
            "slug": "Long-Short-Term-Memory-Hochreiter-Schmidhuber",
            "title": {
                "fragments": [],
                "text": "Long Short-Term Memory"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "A novel, efficient, gradient based method called long short-term memory (LSTM) is introduced, which can learn to bridge minimal time lags in excess of 1000 discrete-time steps by enforcing constant error flow through constant error carousels within special units."
            },
            "venue": {
                "fragments": [],
                "text": "Neural Computation"
            },
            "year": 1997
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709408"
                        ],
                        "name": "M. Strout",
                        "slug": "M.-Strout",
                        "structuredName": {
                            "firstName": "Michelle",
                            "lastName": "Strout",
                            "middleNames": [
                                "Mills"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Strout"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143896454"
                        ],
                        "name": "Mary W. Hall",
                        "slug": "Mary-W.-Hall",
                        "structuredName": {
                            "firstName": "Mary",
                            "lastName": "Hall",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mary W. Hall"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1684313"
                        ],
                        "name": "C. Olschanowsky",
                        "slug": "C.-Olschanowsky",
                        "structuredName": {
                            "firstName": "Catherine",
                            "lastName": "Olschanowsky",
                            "middleNames": [
                                "Mills"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Olschanowsky"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 53095619,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cbd459f2ec4ed600f313bfbc289ee6c1bf502bf7",
            "isKey": false,
            "numCitedBy": 37,
            "numCiting": 78,
            "paperAbstract": {
                "fragments": [],
                "text": "Irregular applications such as big graph analysis, material simulations, molecular dynamics simulations, and finite element analysis have performance problems due to their use of sparse data structures. Inspector\u2013executor strategies improve sparse computation performance through parallelization and data locality optimizations. An inspector reschedules and reorders data at runtime, and an executor is a transformed version of the original computation that uses the newly reorganized schedules and data structures. Inspector\u2013executor transformations are commonly written in a domain-specific or even application-specific fashion. Significant progress has been made in incorporating such inspector\u2013executor transformations into existing compiler transformation frameworks, thus enabling their use with compile-time transformations. However, composing inspector\u2013executor transformations in a general way has only been done in the context of the Sparse Polyhedral Framework (SPF). Though SPF enables the general composition of such transformations, the resulting inspector and executor performance suffers due to missed specialization opportunities. This paper reviews the history and current state of the art for inspector\u2013executor strategies and reviews how the SPF enables the composition of inspector\u2013executor transformations. Further, it describes a research vision to combine this generality in SPF with specialization to achieve composable and high performance inspectors and executors, producing a powerful compiler framework for sparse matrix computations."
            },
            "slug": "The-Sparse-Polyhedral-Framework:-Composing-Code-Strout-Hall",
            "title": {
                "fragments": [],
                "text": "The Sparse Polyhedral Framework: Composing Compiler-Generated Inspector-Executor Code"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A research vision is described to combine this generality in SPF with specialization to achieve composable and high performance inspectors and executors, producing a powerful compiler framework for sparse matrix computations."
            },
            "venue": {
                "fragments": [],
                "text": "Proceedings of the IEEE"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2160320"
                        ],
                        "name": "S. Xiao",
                        "slug": "S.-Xiao",
                        "structuredName": {
                            "firstName": "Shucai",
                            "lastName": "Xiao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Xiao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145476815"
                        ],
                        "name": "Wu-chun Feng",
                        "slug": "Wu-chun-Feng",
                        "structuredName": {
                            "firstName": "Wu-chun",
                            "lastName": "Feng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wu-chun Feng"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 1494587,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "aab81ae281ad8c9e22611a63bf8fb215e9c265c6",
            "isKey": false,
            "numCitedBy": 285,
            "numCiting": 35,
            "paperAbstract": {
                "fragments": [],
                "text": "While GPGPU stands for general-purpose computation on graphics processing units, the lack of explicit support for inter-block communication on the GPU arguably hampers its broader adoption as a general-purpose computing device. Interblock communication on the GPU occurs via global memory and then requires barrier synchronization across the blocks, i.e., inter-block GPU communication via barrier synchronization. Currently, such synchronization is only available via the CPU, which in turn, can incur significant overhead. We propose two approaches for inter-block GPU communication via barrier synchronization: GPU lock-based synchronization and GPU lock-free synchronization. We then evaluate the efficacy of each approach via a micro-benchmark as well as three well-known algorithms \u2014 Fast Fourier Transform (FFT), dynamic programming, and bitonic sort. For the microbenchmark, the experimental results show that our GPU lock-free synchronization performs 8.4 times faster than CPU explicit synchronization and 4.0 times faster than CPU implicit synchronization. When integrated with the FFT, dynamic programming, and bitonic sort algorithms, our GPU lock-free synchronization further improves performance by 10%, 26%, and 40%, respectively, and ultimately delivers an overall speed-up of 70x, 13x, and 24x, respectively."
            },
            "slug": "Inter-block-GPU-communication-via-fast-barrier-Xiao-Feng",
            "title": {
                "fragments": [],
                "text": "Inter-block GPU communication via fast barrier synchronization"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "This work proposes two approaches for inter-block GPU communication via barrier synchronization: GPU lock-based synchronization andGPU lock-free synchronization and evaluates the efficacy of each approach via a micro-benchmark as well as three well-known algorithms \u2014 Fast Fourier Transform, dynamic programming, and bitonic sort."
            },
            "venue": {
                "fragments": [],
                "text": "2010 IEEE International Symposium on Parallel & Distributed Processing (IPDPS)"
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9415240"
                        ],
                        "name": "Payal Nandy",
                        "slug": "Payal-Nandy",
                        "structuredName": {
                            "firstName": "Payal",
                            "lastName": "Nandy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Payal Nandy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143896454"
                        ],
                        "name": "Mary W. Hall",
                        "slug": "Mary-W.-Hall",
                        "structuredName": {
                            "firstName": "Mary",
                            "lastName": "Hall",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mary W. Hall"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40629467"
                        ],
                        "name": "Eddie C. Davis",
                        "slug": "Eddie-C.-Davis",
                        "structuredName": {
                            "firstName": "Eddie",
                            "lastName": "Davis",
                            "middleNames": [
                                "C."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eddie C. Davis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1684313"
                        ],
                        "name": "C. Olschanowsky",
                        "slug": "C.-Olschanowsky",
                        "structuredName": {
                            "firstName": "Catherine",
                            "lastName": "Olschanowsky",
                            "middleNames": [
                                "Mills"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Olschanowsky"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143943323"
                        ],
                        "name": "M. Mohammadi",
                        "slug": "M.-Mohammadi",
                        "structuredName": {
                            "firstName": "Mahdi",
                            "lastName": "Mohammadi",
                            "middleNames": [
                                "Soltan"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Mohammadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2153476417"
                        ],
                        "name": "Wei He",
                        "slug": "Wei-He",
                        "structuredName": {
                            "firstName": "Wei",
                            "lastName": "He",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wei He"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709408"
                        ],
                        "name": "M. Strout",
                        "slug": "M.-Strout",
                        "structuredName": {
                            "firstName": "Michelle",
                            "lastName": "Strout",
                            "middleNames": [
                                "Mills"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Strout"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 131,
                                "start": 113
                            }
                        ],
                        "text": "Sparse Polyhedral Framework: The Sparse Polyhedral Framework (SPF) (Strout et al., 2018; Mohammadi et al., 2019; Nandy et al., 2018) extends the polyhedral model for the case of sparse tensor computations."
                    },
                    "intents": []
                }
            ],
            "corpusId": 111380400,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "df0627ec0fe134762c898a162fc34ca1607f536e",
            "isKey": false,
            "numCitedBy": 7,
            "numCiting": 22,
            "paperAbstract": {
                "fragments": [],
                "text": "ions for Specifying Sparse Matrix Data Transformations 1 Payal Nandy Mary Hall Eddie C. Davis Catherine Olschanowsky Mahdi S Mohammadi, Wei He Michelle Strout University of Utah Boise State University University of Arizona Motivation \u2022 The polyhedral model is suitable for affine \u2013 loop bounds, array access expressions and transformations \u2022 Polyhedral model unsuitable for sparse matrix & unstructured mesh computations (non-affine) \u2013 Array accesses of the form A[B[i]] \u2013 Loop bounds of the form index[i] \u2264 j < index[i+1] \u2022 Key Observation \u2013 Compiler generated code for run time inspector & executor \u2013 Run time inspection \u2022 can reveal mapping of iterations to array indices \u2022 Potentially change iteration or data space"
            },
            "slug": "Abstractions-for-Specifying-Sparse-Matrix-Data-Nandy-Hall",
            "title": {
                "fragments": [],
                "text": "Abstractions for Specifying Sparse Matrix Data Transformations"
            },
            "tldr": {
                "abstractSimilarityScore": 37,
                "text": "The polyhedral model is suitable for affine \u2013 loop bounds, array access expressions and transformations but unsuitable for sparse matrix & unstructured mesh computations (non-affine)."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3583740"
                        ],
                        "name": "Daniel Lustig",
                        "slug": "Daniel-Lustig",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Lustig",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Lustig"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1708269"
                        ],
                        "name": "M. Martonosi",
                        "slug": "M.-Martonosi",
                        "structuredName": {
                            "firstName": "Margaret",
                            "lastName": "Martonosi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Martonosi"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 174,
                                "start": 150
                            }
                        ],
                        "text": "As seen in Table 6, both DyNet and Cavs execute a high number of kernel calls, which cause non-trivial overheads as CUDA kernels calls are expensive (Lustig & Martonosi, 2013; Nvidia, 2021)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 8880699,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "223bf645130e17079b9f4a3fdba1878117f32a0c",
            "isKey": false,
            "numCitedBy": 101,
            "numCiting": 45,
            "paperAbstract": {
                "fragments": [],
                "text": "GPUs are seeing increasingly widespread use for general purpose computation due to their excellent performance for highly-parallel, throughput-oriented applications. For many workloads, however, the performance benefits of offloading are hindered by the large and unpredictable overheads of launching GPU kernels and of transferring data between CPU and GPU."
            },
            "slug": "Reducing-GPU-offload-latency-via-fine-grained-Lustig-Martonosi",
            "title": {
                "fragments": [],
                "text": "Reducing GPU offload latency via fine-grained CPU-GPU synchronization"
            },
            "tldr": {
                "abstractSimilarityScore": 98,
                "text": "GPUs are seeing increasingly widespread use for general purpose computation due to their excellent performance for highly-parallel, throughput-oriented applications, but for many workloads the performance benefits of offloading are hindered by the large and unpredictable overheads of launching GPU kernels and of transferring data between CPU and GPU."
            },
            "venue": {
                "fragments": [],
                "text": "2013 IEEE 19th International Symposium on High Performance Computer Architecture (HPCA)"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2166511"
                        ],
                        "name": "R. Socher",
                        "slug": "R.-Socher",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Socher",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Socher"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2570381"
                        ],
                        "name": "Brody Huval",
                        "slug": "Brody-Huval",
                        "structuredName": {
                            "firstName": "Brody",
                            "lastName": "Huval",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Brody Huval"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144783904"
                        ],
                        "name": "Christopher D. Manning",
                        "slug": "Christopher-D.-Manning",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Manning",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christopher D. Manning"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34699434"
                        ],
                        "name": "A. Ng",
                        "slug": "A.-Ng",
                        "structuredName": {
                            "firstName": "A.",
                            "lastName": "Ng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Ng"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 806709,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "27e38351e48fe4b7da2775bf94341738bc4da07e",
            "isKey": false,
            "numCitedBy": 1268,
            "numCiting": 45,
            "paperAbstract": {
                "fragments": [],
                "text": "Single-word vector space models have been very successful at learning lexical information. However, they cannot capture the compositional meaning of longer phrases, preventing them from a deeper understanding of language. We introduce a recursive neural network (RNN) model that learns compositional vector representations for phrases and sentences of arbitrary syntactic type and length. Our model assigns a vector and a matrix to every node in a parse tree: the vector captures the inherent meaning of the constituent, while the matrix captures how it changes the meaning of neighboring words or phrases. This matrix-vector RNN can learn the meaning of operators in propositional logic and natural language. The model obtains state of the art performance on three different experiments: predicting fine-grained sentiment distributions of adverb-adjective pairs; classifying sentiment labels of movie reviews and classifying semantic relationships such as cause-effect or topic-message between nouns using the syntactic path between them."
            },
            "slug": "Semantic-Compositionality-through-Recursive-Spaces-Socher-Huval",
            "title": {
                "fragments": [],
                "text": "Semantic Compositionality through Recursive Matrix-Vector Spaces"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "A recursive neural network model that learns compositional vector representations for phrases and sentences of arbitrary syntactic type and length and can learn the meaning of operators in propositional logic and natural language is introduced."
            },
            "venue": {
                "fragments": [],
                "text": "EMNLP"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2055863231"
                        ],
                        "name": "Rui Yan",
                        "slug": "Rui-Yan",
                        "structuredName": {
                            "firstName": "Rui",
                            "lastName": "Yan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Rui Yan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8281265"
                        ],
                        "name": "Yiping Song",
                        "slug": "Yiping-Song",
                        "structuredName": {
                            "firstName": "Yiping",
                            "lastName": "Song",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yiping Song"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40354707"
                        ],
                        "name": "Hua Wu",
                        "slug": "Hua-Wu",
                        "structuredName": {
                            "firstName": "Hua",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hua Wu"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 207237683,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "7477d88b225909ef645941a0142eed75dc3b2e56",
            "isKey": false,
            "numCitedBy": 294,
            "numCiting": 49,
            "paperAbstract": {
                "fragments": [],
                "text": "To establish an automatic conversation system between humans and computers is regarded as one of the most hardcore problems in computer science, which involves interdisciplinary techniques in information retrieval, natural language processing, artificial intelligence, etc. The challenges lie in how to respond so as to maintain a relevant and continuous conversation with humans. Along with the prosperity of Web 2.0, we are now able to collect extremely massive conversational data, which are publicly available. It casts a great opportunity to launch automatic conversation systems. Owing to the diversity of Web resources, a retrieval-based conversation system will be able to find at least some responses from the massive repository for any user inputs. Given a human issued message, i.e., query, our system would provide a reply after adequate training and learning of how to respond. In this paper, we propose a retrieval-based conversation system with the deep learning-to-respond schema through a deep neural network framework driven by web data. The proposed model is general and unified for different conversation scenarios in open domain. We incorporate the impact of multiple data inputs, and formulate various features and factors with optimization into the deep learning framework. In the experiments, we investigate the effectiveness of the proposed deep neural network structures with better combinations of all different evidence. We demonstrate significant performance improvement against a series of standard and state-of-art baselines in terms of p@1, MAP, nDCG, and MRR for conversational purposes."
            },
            "slug": "Learning-to-Respond-with-Deep-Neural-Networks-for-Yan-Song",
            "title": {
                "fragments": [],
                "text": "Learning to Respond with Deep Neural Networks for Retrieval-Based Human-Computer Conversation System"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "This paper proposes a retrieval-based conversation system with the deep learning-to-respond schema through a deep neural network framework driven by web data and demonstrates significant performance improvement against a series of standard and state-of-art baselines for conversational purposes."
            },
            "venue": {
                "fragments": [],
                "text": "SIGIR"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2978472"
                        ],
                        "name": "Ana I. Maqueda",
                        "slug": "Ana-I.-Maqueda",
                        "structuredName": {
                            "firstName": "Ana",
                            "lastName": "Maqueda",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ana I. Maqueda"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "20580939"
                        ],
                        "name": "Antonio Loquercio",
                        "slug": "Antonio-Loquercio",
                        "structuredName": {
                            "firstName": "Antonio",
                            "lastName": "Loquercio",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Antonio Loquercio"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144036711"
                        ],
                        "name": "Guillermo Gallego",
                        "slug": "Guillermo-Gallego",
                        "structuredName": {
                            "firstName": "Guillermo",
                            "lastName": "Gallego",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Guillermo Gallego"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145728918"
                        ],
                        "name": "N. Garc\u00eda",
                        "slug": "N.-Garc\u00eda",
                        "structuredName": {
                            "firstName": "Narciso",
                            "lastName": "Garc\u00eda",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Garc\u00eda"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2075371"
                        ],
                        "name": "D. Scaramuzza",
                        "slug": "D.-Scaramuzza",
                        "structuredName": {
                            "firstName": "Davide",
                            "lastName": "Scaramuzza",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Scaramuzza"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 178,
                                "start": 133
                            }
                        ],
                        "text": "Deep learning models are increasingly being used in production as part of applications such as personal assistants, selfdriving cars (Maqueda et al., 2018; Bojarski et al., 2016) and chatbots (Yan et al."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 154,
                                "start": 134
                            }
                        ],
                        "text": "Deep learning models are increasingly being used in production as part of applications such as personal assistants, selfdriving cars (Maqueda et al., 2018; Bojarski et al., 2016) and chatbots (Yan et al., 2016; Li et al., 2016)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 4610262,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "332ed1143ec551827f188c951f49f5b1823381fc",
            "isKey": false,
            "numCitedBy": 241,
            "numCiting": 33,
            "paperAbstract": {
                "fragments": [],
                "text": "Event cameras are bio-inspired vision sensors that naturally capture the dynamics of a scene, filtering out redundant information. This paper presents a deep neural network approach that unlocks the potential of event cameras on a challenging motion-estimation task: prediction of a vehicle's steering angle. To make the best out of this sensor-algorithm combination, we adapt state-of-the-art convolutional architectures to the output of event sensors and extensively evaluate the performance of our approach on a publicly available large scale event-camera dataset (~1000 km). We present qualitative and quantitative explanations of why event cameras allow robust steering prediction even in cases where traditional cameras fail, e.g. challenging illumination conditions and fast motion. Finally, we demonstrate the advantages of leveraging transfer learning from traditional to event-based vision, and show that our approach outperforms state-of-the-art algorithms based on standard cameras."
            },
            "slug": "Event-Based-Vision-Meets-Deep-Learning-on-Steering-Maqueda-Loquercio",
            "title": {
                "fragments": [],
                "text": "Event-Based Vision Meets Deep Learning on Steering Prediction for Self-Driving Cars"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "A deep neural network approach is presented that unlocks the potential of event cameras on a challenging motion-estimation task: prediction of a vehicle's steering angle, and outperforms state-of-the-art algorithms based on standard cameras."
            },
            "venue": {
                "fragments": [],
                "text": "2018 IEEE/CVF Conference on Computer Vision and Pattern Recognition"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065365958"
                        ],
                        "name": "Mariusz Bojarski",
                        "slug": "Mariusz-Bojarski",
                        "structuredName": {
                            "firstName": "Mariusz",
                            "lastName": "Bojarski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mariusz Bojarski"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47091489"
                        ],
                        "name": "D. Testa",
                        "slug": "D.-Testa",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Testa",
                            "middleNames": [
                                "W.",
                                "del"
                            ],
                            "suffix": "4th"
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Testa"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3393305"
                        ],
                        "name": "Daniel Dworakowski",
                        "slug": "Daniel-Dworakowski",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Dworakowski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Dworakowski"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2372758"
                        ],
                        "name": "Bernhard Firner",
                        "slug": "Bernhard-Firner",
                        "structuredName": {
                            "firstName": "Bernhard",
                            "lastName": "Firner",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bernhard Firner"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2286388"
                        ],
                        "name": "B. Flepp",
                        "slug": "B.-Flepp",
                        "structuredName": {
                            "firstName": "Beat",
                            "lastName": "Flepp",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "B. Flepp"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38774604"
                        ],
                        "name": "Prasoon Goyal",
                        "slug": "Prasoon-Goyal",
                        "structuredName": {
                            "firstName": "Prasoon",
                            "lastName": "Goyal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Prasoon Goyal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065130000"
                        ],
                        "name": "L. Jackel",
                        "slug": "L.-Jackel",
                        "structuredName": {
                            "firstName": "Lawrence",
                            "lastName": "Jackel",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Jackel"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "95743023"
                        ],
                        "name": "Mathew Monfort",
                        "slug": "Mathew-Monfort",
                        "structuredName": {
                            "firstName": "Mathew",
                            "lastName": "Monfort",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mathew Monfort"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145636949"
                        ],
                        "name": "Urs Muller",
                        "slug": "Urs-Muller",
                        "structuredName": {
                            "firstName": "Urs",
                            "lastName": "Muller",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Urs Muller"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3393542"
                        ],
                        "name": "Jiakai Zhang",
                        "slug": "Jiakai-Zhang",
                        "structuredName": {
                            "firstName": "Jiakai",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jiakai Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Xin Zhang",
                        "slug": "Xin-Zhang",
                        "structuredName": {
                            "firstName": "Xin",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xin Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2109914894"
                        ],
                        "name": "Jake Zhao",
                        "slug": "Jake-Zhao",
                        "structuredName": {
                            "firstName": "Jake",
                            "lastName": "Zhao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jake Zhao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3262926"
                        ],
                        "name": "Karol Zieba",
                        "slug": "Karol-Zieba",
                        "structuredName": {
                            "firstName": "Karol",
                            "lastName": "Zieba",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Karol Zieba"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 177,
                                "start": 156
                            }
                        ],
                        "text": "Deep learning models are increasingly being used in production as part of applications such as personal assistants, selfdriving cars (Maqueda et al., 2018; Bojarski et al., 2016) and chatbots (Yan et al., 2016; Li et al., 2016)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 15780954,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0e3cc46583217ec81e87045a4f9ae3478a008227",
            "isKey": false,
            "numCitedBy": 2761,
            "numCiting": 14,
            "paperAbstract": {
                "fragments": [],
                "text": "We trained a convolutional neural network (CNN) to map raw pixels from a single front-facing camera directly to steering commands. This end-to-end approach proved surprisingly powerful. With minimum training data from humans the system learns to drive in traffic on local roads with or without lane markings and on highways. It also operates in areas with unclear visual guidance such as in parking lots and on unpaved roads. \nThe system automatically learns internal representations of the necessary processing steps such as detecting useful road features with only the human steering angle as the training signal. We never explicitly trained it to detect, for example, the outline of roads. \nCompared to explicit decomposition of the problem, such as lane marking detection, path planning, and control, our end-to-end system optimizes all processing steps simultaneously. We argue that this will eventually lead to better performance and smaller systems. Better performance will result because the internal components self-optimize to maximize overall system performance, instead of optimizing human-selected intermediate criteria, e.g., lane detection. Such criteria understandably are selected for ease of human interpretation which doesn't automatically guarantee maximum system performance. Smaller networks are possible because the system learns to solve the problem with the minimal number of processing steps. \nWe used an NVIDIA DevBox and Torch 7 for training and an NVIDIA DRIVE(TM) PX self-driving car computer also running Torch 7 for determining where to drive. The system operates at 30 frames per second (FPS)."
            },
            "slug": "End-to-End-Learning-for-Self-Driving-Cars-Bojarski-Testa",
            "title": {
                "fragments": [],
                "text": "End to End Learning for Self-Driving Cars"
            },
            "tldr": {
                "abstractSimilarityScore": 68,
                "text": "A convolutional neural network is trained to map raw pixels from a single front-facing camera directly to steering commands and it is argued that this will eventually lead to better performance and smaller systems."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2166511"
                        ],
                        "name": "R. Socher",
                        "slug": "R.-Socher",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Socher",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Socher"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2570381"
                        ],
                        "name": "Brody Huval",
                        "slug": "Brody-Huval",
                        "structuredName": {
                            "firstName": "Brody",
                            "lastName": "Huval",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Brody Huval"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3100049"
                        ],
                        "name": "Bharath Putta Bath",
                        "slug": "Bharath-Putta-Bath",
                        "structuredName": {
                            "firstName": "Bharath",
                            "lastName": "Bath",
                            "middleNames": [
                                "Putta"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bharath Putta Bath"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144783904"
                        ],
                        "name": "Christopher D. Manning",
                        "slug": "Christopher-D.-Manning",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Manning",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christopher D. Manning"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34699434"
                        ],
                        "name": "A. Ng",
                        "slug": "A.-Ng",
                        "structuredName": {
                            "firstName": "A.",
                            "lastName": "Ng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Ng"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 16900529,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cc75c81148245198d4c6d4c8fcbbae487215903b",
            "isKey": false,
            "numCitedBy": 594,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Recent advances in 3D sensing technologies make it possible to easily record color and depth images which together can improve object recognition. Most current methods rely on very well-designed features for this new 3D modality. We introduce a model based on a combination of convolutional and recursive neural networks (CNN and RNN) for learning features and classifying RGB-D images. The CNN layer learns low-level translationally invariant features which are then given as inputs to multiple, fixed-tree RNNs in order to compose higher order features. RNNs can be seen as combining convolution and pooling into one efficient, hierarchical operation. Our main result is that even RNNs with random weights compose powerful features. Our model obtains state of the art performance on a standard RGB-D object dataset while being more accurate and faster during training and testing than comparable architectures such as two-layer CNNs."
            },
            "slug": "Convolutional-Recursive-Deep-Learning-for-3D-Object-Socher-Huval",
            "title": {
                "fragments": [],
                "text": "Convolutional-Recursive Deep Learning for 3D Object Classification"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "This work introduces a model based on a combination of convolutional and recursive neural networks (CNN and RNN) for learning features and classifying RGB-D images, which obtains state of the art performance on a standardRGB-D object dataset while being more accurate and faster during training and testing than comparable architectures such as two-layer CNNs."
            },
            "venue": {
                "fragments": [],
                "text": "NIPS"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49298465"
                        ],
                        "name": "Jiwei Li",
                        "slug": "Jiwei-Li",
                        "structuredName": {
                            "firstName": "Jiwei",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jiwei Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145768639"
                        ],
                        "name": "Will Monroe",
                        "slug": "Will-Monroe",
                        "structuredName": {
                            "firstName": "Will",
                            "lastName": "Monroe",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Will Monroe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1863425"
                        ],
                        "name": "Alan Ritter",
                        "slug": "Alan-Ritter",
                        "structuredName": {
                            "firstName": "Alan",
                            "lastName": "Ritter",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alan Ritter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1746807"
                        ],
                        "name": "Dan Jurafsky",
                        "slug": "Dan-Jurafsky",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Jurafsky",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dan Jurafsky"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1947267"
                        ],
                        "name": "Michel Galley",
                        "slug": "Michel-Galley",
                        "structuredName": {
                            "firstName": "Michel",
                            "lastName": "Galley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michel Galley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800422"
                        ],
                        "name": "Jianfeng Gao",
                        "slug": "Jianfeng-Gao",
                        "structuredName": {
                            "firstName": "Jianfeng",
                            "lastName": "Gao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jianfeng Gao"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 226,
                                "start": 211
                            }
                        ],
                        "text": "Deep learning models are increasingly being used in production as part of applications such as personal assistants, selfdriving cars (Maqueda et al., 2018; Bojarski et al., 2016) and chatbots (Yan et al., 2016; Li et al., 2016)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 3147007,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "1298dae5751fb06184f6b067d1503bde8037bdb7",
            "isKey": false,
            "numCitedBy": 1031,
            "numCiting": 65,
            "paperAbstract": {
                "fragments": [],
                "text": "Recent neural models of dialogue generation offer great promise for generating responses for conversational agents, but tend to be shortsighted, predicting utterances one at a time while ignoring their influence on future outcomes. Modeling the future direction of a dialogue is crucial to generating coherent, interesting dialogues, a need which led traditional NLP models of dialogue to draw on reinforcement learning. In this paper, we show how to integrate these goals, applying deep reinforcement learning to model future reward in chatbot dialogue. The model simulates dialogues between two virtual agents, using policy gradient methods to reward sequences that display three useful conversational properties: informativity (non-repetitive turns), coherence, and ease of answering (related to forward-looking function). We evaluate our model on diversity, length as well as with human judges, showing that the proposed algorithm generates more interactive responses and manages to foster a more sustained conversation in dialogue simulation. This work marks a first step towards learning a neural conversational model based on the long-term success of dialogues."
            },
            "slug": "Deep-Reinforcement-Learning-for-Dialogue-Generation-Li-Monroe",
            "title": {
                "fragments": [],
                "text": "Deep Reinforcement Learning for Dialogue Generation"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This work simulates dialogues between two virtual agents, using policy gradient methods to reward sequences that display three useful conversational properties: informativity, non-repetitive turns, coherence, and ease of answering."
            },
            "venue": {
                "fragments": [],
                "text": "EMNLP"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144996001"
                        ],
                        "name": "L. D. Moura",
                        "slug": "L.-D.-Moura",
                        "structuredName": {
                            "firstName": "Leonardo",
                            "lastName": "Moura",
                            "middleNames": [
                                "Mendon\u00e7a",
                                "de"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. D. Moura"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3714351"
                        ],
                        "name": "N. Bj\u00f8rner",
                        "slug": "N.-Bj\u00f8rner",
                        "structuredName": {
                            "firstName": "Nikolaj",
                            "lastName": "Bj\u00f8rner",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Bj\u00f8rner"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 15912959,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3960dda299e0f8615a7db675b8e6905b375ecf8a",
            "isKey": false,
            "numCitedBy": 6280,
            "numCiting": 16,
            "paperAbstract": {
                "fragments": [],
                "text": "Satisfiability Modulo Theories (SMT) problem is a decision problem for logical first order formulas with respect to combinations of background theories such as: arithmetic, bit-vectors, arrays, and uninterpreted functions. Z3 is a new and efficient SMT Solver freely available from Microsoft Research. It is used in various software verification and analysis applications."
            },
            "slug": "Z3:-An-Efficient-SMT-Solver-Moura-Bj\u00f8rner",
            "title": {
                "fragments": [],
                "text": "Z3: An Efficient SMT Solver"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "Z3 is a new and efficient SMT Solver freely available from Microsoft Research that is used in various software verification and analysis applications."
            },
            "venue": {
                "fragments": [],
                "text": "TACAS"
            },
            "year": 2008
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2885603"
                        ],
                        "name": "E. Nemeth",
                        "slug": "E.-Nemeth",
                        "structuredName": {
                            "firstName": "Evi",
                            "lastName": "Nemeth",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Nemeth"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2109622054"
                        ],
                        "name": "S. K. Das",
                        "slug": "S.-K.-Das",
                        "structuredName": {
                            "firstName": "Sunil",
                            "lastName": "Das",
                            "middleNames": [
                                "Kumar"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. K. Das"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2061335079"
                        ],
                        "name": "Daniel Klein",
                        "slug": "Daniel-Klein",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Klein",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Klein"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143733462"
                        ],
                        "name": "M. McKusick",
                        "slug": "M.-McKusick",
                        "structuredName": {
                            "firstName": "Marshall",
                            "lastName": "McKusick",
                            "middleNames": [
                                "K."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. McKusick"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "15333247"
                        ],
                        "name": "M. Pucci",
                        "slug": "M.-Pucci",
                        "structuredName": {
                            "firstName": "Marc",
                            "lastName": "Pucci",
                            "middleNames": [
                                "F."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Pucci"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49904351"
                        ],
                        "name": "D. Ritchie",
                        "slug": "D.-Ritchie",
                        "structuredName": {
                            "firstName": "Dennis",
                            "lastName": "Ritchie",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Ritchie"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "121942490"
                        ],
                        "name": "Jonathan M. Smith",
                        "slug": "Jonathan-M.-Smith",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Smith",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan M. Smith"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 2939867,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3da678cf38575a81e0634d564919da3865b12fc6",
            "isKey": false,
            "numCitedBy": 117,
            "numCiting": 37,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper describes the logging done by the Journaled File System (JFS). By logging, JFS can restore the file system to a consistent state in a matter of seconds, versus minutes or hours with non-journaled file systems. This white paper gives an overview of the changes to metadata structures that JFS logs."
            },
            "slug": "USENIX-Association-Nemeth-Das",
            "title": {
                "fragments": [],
                "text": "USENIX Association"
            },
            "tldr": {
                "abstractSimilarityScore": 76,
                "text": "This white paper gives an overview of the changes to metadata structures that JFS logs, and how JFS can restore the file system to a consistent state in a matter of seconds, versus minutes or hours with non-journaled file systems."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2000
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 147,
                                "start": 127
                            }
                        ],
                        "text": "To overcome C.2 and C.3, we employ scheduling primitives to perform optimizations such as specialization and dynamic batching (Neubig et al., 2017b; Looks et al., 2017), along with compile-time optimizations such as computation hoisting."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 213,
                                "start": 193
                            }
                        ],
                        "text": "C.3 Static optimizations: Dynamic models are generally optimized at runtime by constructing a dataflow graph that unrolls all recursion and makes optimizations such as dynamic batching easier (Neubig et al., 2017a; Looks et al., 2017)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 135,
                                "start": 115
                            }
                        ],
                        "text": "We propose the following scheduling primitives to exploit these opportunities:\nDynamic Batching: Dynamic batching (Neubig et al., 2017b; Gao et al., 2018; Looks et al., 2017; Xu et al., 2018) involves batching operators on-the-fly to exploit parallelism in a batch in models with dynamic control\u2026"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 147,
                                "start": 127
                            }
                        ],
                        "text": "We prototype the proposed framework, evaluate it against state-of-the-art recursive deep learning frameworks (Xu et al., 2018; Neubig et al., 2017a; Paszke et al., 2019) and report significant performance gains (up to 14X) on Nvidia GPUs and Intel and ARM CPUs."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 77,
                                "start": 57
                            }
                        ],
                        "text": "Past work on recursive and dynamic models such as DyNet (Neubig et al., 2017a;b), Cavs (Xu et al., 2018) and PyTorch (Paszke et al., 2019) has relied on hardware-specific, highly-optimized vendor libraries such as cuDNN (Chetlur et al., 2014) for Nvidia GPUs and MKL (In-\n1Carnegie Mellon\u2026"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 201,
                                "start": 181
                            }
                        ],
                        "text": "Cavs and DyNet are both open source, state-of-theart frameworks for recursive neural networks, and have been shown to be faster than generic frameworks like PyTorch and TensorFlow (Neubig et al., 2017b; Xu et al., 2018)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "CORTEX: A Compiler for Recursive Deep Learning Models Clothiaux"
            },
            "venue": {
                "fragments": [],
                "text": "The dynamic neural network toolkit"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1508337194"
                        ],
                        "name": "Minjie Wang",
                        "slug": "Minjie-Wang",
                        "structuredName": {
                            "firstName": "Minjie",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Minjie Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2490788"
                        ],
                        "name": "Lingfan Yu",
                        "slug": "Lingfan-Yu",
                        "structuredName": {
                            "firstName": "Lingfan",
                            "lastName": "Yu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lingfan Yu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "122579067"
                        ],
                        "name": "Da Zheng",
                        "slug": "Da-Zheng",
                        "structuredName": {
                            "firstName": "Da",
                            "lastName": "Zheng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Da Zheng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47594426"
                        ],
                        "name": "Quan Gan",
                        "slug": "Quan-Gan",
                        "structuredName": {
                            "firstName": "Quan",
                            "lastName": "Gan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Quan Gan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2851123"
                        ],
                        "name": "Yujie Gai",
                        "slug": "Yujie-Gai",
                        "structuredName": {
                            "firstName": "Yujie",
                            "lastName": "Gai",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yujie Gai"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3060913"
                        ],
                        "name": "Zihao Ye",
                        "slug": "Zihao-Ye",
                        "structuredName": {
                            "firstName": "Zihao",
                            "lastName": "Ye",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zihao Ye"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2112144150"
                        ],
                        "name": "Mufei Li",
                        "slug": "Mufei-Li",
                        "structuredName": {
                            "firstName": "Mufei",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mufei Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9695889"
                        ],
                        "name": "Jinjing Zhou",
                        "slug": "Jinjing-Zhou",
                        "structuredName": {
                            "firstName": "Jinjing",
                            "lastName": "Zhou",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jinjing Zhou"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2111041646"
                        ],
                        "name": "Qi Huang",
                        "slug": "Qi-Huang",
                        "structuredName": {
                            "firstName": "Qi",
                            "lastName": "Huang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qi Huang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2112662910"
                        ],
                        "name": "Chao Ma",
                        "slug": "Chao-Ma",
                        "structuredName": {
                            "firstName": "Chao",
                            "lastName": "Ma",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chao Ma"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2116357414"
                        ],
                        "name": "Ziyue Huang",
                        "slug": "Ziyue-Huang",
                        "structuredName": {
                            "firstName": "Ziyue",
                            "lastName": "Huang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ziyue Huang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3187768"
                        ],
                        "name": "Qipeng Guo",
                        "slug": "Qipeng-Guo",
                        "structuredName": {
                            "firstName": "Qipeng",
                            "lastName": "Guo",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qipeng Guo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145140331"
                        ],
                        "name": "Hao Zhang",
                        "slug": "Hao-Zhang",
                        "structuredName": {
                            "firstName": "Hao",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hao Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49955730"
                        ],
                        "name": "Haibin Lin",
                        "slug": "Haibin-Lin",
                        "structuredName": {
                            "firstName": "Haibin",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Haibin Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "7818229"
                        ],
                        "name": "J. Zhao",
                        "slug": "J.-Zhao",
                        "structuredName": {
                            "firstName": "Junbo",
                            "lastName": "Zhao",
                            "middleNames": [
                                "Jake"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Zhao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46276184"
                        ],
                        "name": "Jinyang Li",
                        "slug": "Jinyang-Li",
                        "structuredName": {
                            "firstName": "Jinyang",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jinyang Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46234526"
                        ],
                        "name": "Alex Smola",
                        "slug": "Alex-Smola",
                        "structuredName": {
                            "firstName": "Alex",
                            "lastName": "Smola",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alex Smola"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38448016"
                        ],
                        "name": "Zheng Zhang",
                        "slug": "Zheng-Zhang",
                        "structuredName": {
                            "firstName": "Zheng",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zheng Zhang"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 202539732,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "fd075bcdf2d7e13d23f7c249a8eded343d5bbe3b",
            "isKey": false,
            "numCitedBy": 343,
            "numCiting": 36,
            "paperAbstract": {
                "fragments": [],
                "text": "Accelerating research in the emerging field of deep graph learning requires new tools. Such systems should support graph as the core abstraction and take care to maintain both forward (i.e. supporting new research ideas) and backward (i.e. integration with existing components) compatibility. In this paper, we present Deep Graph Library (DGL). DGL enables arbitrary message handling and mutation operators, flexible propagation rules, and is framework agnostic so as to leverage high-performance tensor, autograd operations, and other feature extraction modules already available in existing frameworks. DGL carefully handles the sparse and irregular graph structure, deals with graphs big and small which may change dynamically, fuses operations, and performs auto-batching, all to take advantages of modern hardware. DGL has been tested on a variety of models, including but not limited to the popular Graph Neural Networks (GNN) and its variants, with promising speed, memory footprint and scalability."
            },
            "slug": "Deep-Graph-Library:-Towards-Efficient-and-Scalable-Wang-Yu",
            "title": {
                "fragments": [],
                "text": "Deep Graph Library: Towards Efficient and Scalable Deep Learning on Graphs"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "Deep Graph Library (DGL) enables arbitrary message handling and mutation operators, flexible propagation rules, and is framework agnostic so as to leverage high-performance tensor, autograd operations, and other feature extraction modules already available in existing frameworks."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "24961975"
                        ],
                        "name": "Jared Roesch",
                        "slug": "Jared-Roesch",
                        "structuredName": {
                            "firstName": "Jared",
                            "lastName": "Roesch",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jared Roesch"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "24650215"
                        ],
                        "name": "Steven Lyubomirsky",
                        "slug": "Steven-Lyubomirsky",
                        "structuredName": {
                            "firstName": "Steven",
                            "lastName": "Lyubomirsky",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Steven Lyubomirsky"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46233632"
                        ],
                        "name": "Marisa Kirisame",
                        "slug": "Marisa-Kirisame",
                        "structuredName": {
                            "firstName": "Marisa",
                            "lastName": "Kirisame",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Marisa Kirisame"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46225191"
                        ],
                        "name": "Josh Pollock",
                        "slug": "Josh-Pollock",
                        "structuredName": {
                            "firstName": "Josh",
                            "lastName": "Pollock",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Josh Pollock"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50765620"
                        ],
                        "name": "Logan Weber",
                        "slug": "Logan-Weber",
                        "structuredName": {
                            "firstName": "Logan",
                            "lastName": "Weber",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Logan Weber"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1732910"
                        ],
                        "name": "Ziheng Jiang",
                        "slug": "Ziheng-Jiang",
                        "structuredName": {
                            "firstName": "Ziheng",
                            "lastName": "Jiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ziheng Jiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1913774"
                        ],
                        "name": "Tianqi Chen",
                        "slug": "Tianqi-Chen",
                        "structuredName": {
                            "firstName": "Tianqi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianqi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47108160"
                        ],
                        "name": "T. Moreau",
                        "slug": "T.-Moreau",
                        "structuredName": {
                            "firstName": "Thierry",
                            "lastName": "Moreau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Moreau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2272813"
                        ],
                        "name": "Zachary Tatlock",
                        "slug": "Zachary-Tatlock",
                        "structuredName": {
                            "firstName": "Zachary",
                            "lastName": "Tatlock",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zachary Tatlock"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 60,
                                "start": 41
                            }
                        ],
                        "text": "Past work on machine learning compilers (Roesch et al., 2019; Shen et al., 2020; Yu et al., 2018; Wei et al.) as well as on deep learning (Tai et al., 2015; Shazeer et al., 2017; Elbayad et al., 2019) suggests that supporting efficient execution of various kinds of dynamism in ML models is very\u2026"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 119120115,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "98d8a3053b6cc536c87e4745cbe683ae4ff861a9",
            "isKey": false,
            "numCitedBy": 10,
            "numCiting": 39,
            "paperAbstract": {
                "fragments": [],
                "text": "Frameworks for writing, compiling, and optimizing deep learning (DL) models have recently enabled progress in areas like computer vision and natural language processing. Extending these frameworks to accommodate the rapidly diversifying landscape of DL models and hardware platforms presents challenging tradeoffs between expressiveness, composability, and portability. We present Relay, a new intermediate representation (IR) and compiler framework for DL models. The functional, statically-typed Relay IR unifies and generalizes existing DL IRs and can express state-of-the-art models. Relay's expressive IR required careful design of the type system, automatic differentiation, and optimizations. Relay's extensible compiler can eliminate abstraction overhead and target new hardware platforms. The design insights from Relay can be applied to existing frameworks to develop IRs that support extension without compromising on expressivity, composibility, and portability. Our evaluation demonstrates that the Relay prototype can already provide competitive performance for a broad class of models running on CPUs, GPUs, and FPGAs."
            },
            "slug": "Relay:-A-High-Level-IR-for-Deep-Learning-Roesch-Lyubomirsky",
            "title": {
                "fragments": [],
                "text": "Relay: A High-Level IR for Deep Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "The functional, statically-typed Relay IR unifies and generalizes existing DL IRs and can express state-of-the-art models and can eliminate abstraction overhead and target new hardware platforms."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1766143"
                        ],
                        "name": "Jinliang Wei",
                        "slug": "Jinliang-Wei",
                        "structuredName": {
                            "firstName": "Jinliang",
                            "lastName": "Wei",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jinliang Wei"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40568480"
                        ],
                        "name": "Garth A. Gibson",
                        "slug": "Garth-A.-Gibson",
                        "structuredName": {
                            "firstName": "Garth",
                            "lastName": "Gibson",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Garth A. Gibson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2053781980"
                        ],
                        "name": "Vijay Vasudevan",
                        "slug": "Vijay-Vasudevan",
                        "structuredName": {
                            "firstName": "Vijay",
                            "lastName": "Vasudevan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vijay Vasudevan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143977260"
                        ],
                        "name": "E. Xing",
                        "slug": "E.-Xing",
                        "structuredName": {
                            "firstName": "Eric",
                            "lastName": "Xing",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Xing"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 53315428,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "dd1c0be8396b61e869e4248bd062bf9d1a0717ce",
            "isKey": false,
            "numCitedBy": 1,
            "numCiting": 16,
            "paperAbstract": {
                "fragments": [],
                "text": "Today\u2019s deep learning systems are dominated by a dataflow execution model. Given a static dataflow graph and the shape of the input (e.g., mini-batch sizes and image dimensions), the system can fully determine its computation before execution. When the same static graph applies to every data sample, the system may search for an optimal computation schedule offline by trying out many schedules on a sample input, knowing the input values won\u2019t affect computation throughput. However, for many neural networks, data samples have variable shapes and the computation graph topology depends on input or parameter values. In this case, a static graph fails to fully describe the computation and a better schedule needs to be dynamically derived to take runtime information into account. Thus we argue for the importance of dynamic scheduling, especially regarding distributed device placement. 1 Dynamic Computation in Neural Networks In a dataflow system, application programs first construct a dataflow graph that describes the computation, and then request the system to execute a subgraph or the whole graph. Although for many neural networks (e.g., AlexNet [7], Inception-v3 [13], and ResNet [3]), the computation can be described by a static acyclic directed graph (DAG) that applies to all data samples, there are many cases where the graph topology varies based on input or parameter values. Recurrent Neural Networks [2] model sequences of data (e.g., sentences). A recurrent neural network (RNN) repeatedly applies a cell function, such as long-short-term-memory (LSTM) [4], to each element of the sequence. Since sequences may have variable length, the cell function is executed for different number of times for different sequences. A typical approach for expressing RNNs as a static DAG is to statically unroll the sequence for a finite number of steps, padding shorter sequences with empty values and likely chopping longer ones. An alternative approach is to construct a distinct graph for each input sequence, paying the graph construction overhead for each data sample. Recursive Neural Networks [12] generalize recurrent neural network to model arbitrary topologies. For example, Tree-LSTM [14] models the syntactic tree of a sentence. Since the topology differs from sentence to sentence, Tree-LSTM constructs a distinct static DAG for each sentence. As shown by Xu et al. [16], per-sample graph construction constitutes a significant overhead (over 60% of runtime in some cases). Xu et al. [16] propose to resolve the graph construction overhead by reusing the graph structure that already exists in the dataset instead of programmatic construction, restricting its applicability. Mixture of Experts (MoE) [11] is an example of conditional computation in neural networks. A MoE layer consists of a gating network and a large number (up to hundreds of thousands) of expert networks. Each data sample sparsely activates a small number of experts as determined by the gating Preprint. Work in progress. network based on runtime values. Therefore, for an input mini-batch, the input size of each expert is unknown until the gating network has been executed on the mini-batch. Expressing dynamic computation via dynamic control flow. Yu et al. [17] present two dynamic control flow operations cond and while_loop in TensorFlow that represents conditional and iterateive computation respectively. Recursive (including recurrent) neural networks can be expressed as a while loop iterating over the nodes in a topologically sorted order. As the loop body is represented as a subgraph in a static DAG, all dynamic instances of the loop body (i.e., iterations) share the same dependency pattern. Therefore, for recursive neural networks, each iteration is conservatively specified to depend on its previous iteration to ensure correct ordering, resulting in a sequential execution, even though some iterations can potentially be executed in parallel. Jeong et al. [5] take advantage of the additional parallelism by introducing a recursion operation into TensorFlow. With recursion, a node recursively invokes the computation function on other nodes and waits until the recursive calls return to continue its execution. This allows a caller to dynamically specify its distinct dependency on the callees, permitting parallel execution of the functions on independent nodes. 2 The Need for Dynamic Scheduling of Dynamic Control Flow Despite the programming support for expressing dynamic computation, existing dataflow-based deep learning systems employ a static computation schedule derived prior to graph execution. A computation schedule determines how operations are placed on (possibly distributed) computing devices and compiles each device\u2019s graph partition to an executable program. Here we focus on distributed device placement. When the same static computation graph applies to all data samples, it is possible to find an efficient computation schedule prior to execution. TensorFlow [1] relies on application programmers to manually place operations on devices; Mirhoseini et al. [10, 9] learn the device placement from repeated trial executions of various schedules. Jia et al. [6] simulates schedule execution to reduce the planning cost down to sub-seconds to tens of minutes depending on the scale (4 to 64 GPUs) and complexity of the network. Moreover, Jia et al. [6] exploit additional dimensions of parallelization, such as intra-operation parallelism. Nevertheless, existing approaches fail to consider that the computation may change based on input or parameter values. We discuss the inefficiency due to overlooking runtime information to motivate dynamic scheduling. Conditional Computation. TensorFlow\u2019s cond is implemented using Switch which forwards an input tensor to one of two subgraphs. MoE generalizes Switch in two ways: (1) the forwarding decision is made separately for each row in the input tensor and (2) each row is forwarded to K out of N subgraphs. Due to MoE\u2019s large size (up to \u223c131 billion parameters), existing implementations (e.g., Tensor2Tensor [15] and Shazeer et al. [11]) statically partition the expert networks to different GPUs. Such static placement faces two problems: (1) the memory for a subgraph (e.g., variables) is statically allocated regardless of whether a subgraph is actually executed; (2) the input sizes among different experts can be highly skewed. These issues lead to heavy over-provisioning of GPU memory while wasting GPUs\u2019 precious computing cycles. As reported by Shazeer et al. [11], a MoE layer consisting of 131072 experts requires 128 Tesla K40 GPUs to fit while achieving a computation throughput of 0.3TFLOPS per GPU (Nvidia\u2019s claimed peak throughput is 4.29TFLOPS/GPU). With dynamic scheduling, the system allocates memory for only subgraphs that are executed and may partition an overwhelmingly large input to an expert along with replicating the expert to multiple GPUs to balance load among GPUs. Iterative and Recursive Computation. TensorFlow creates a frame for each dynamic instance of the while_loop loop body. Operations of different frames may run in parallel as long as their dependencies are satisfied. However, since each operation is statically placed onto one device, all frames of this operation is bound to this device. This can lead to saturating the computing power of a single device, thus missing the additional parallelism, such as observed by Jeong et al. [5]. Previous work on static device placement observes throughput improvement when placing different iterations of a statically unrolled RNN to different devices [10, 9, 6]. While static scheduling would be prohibitively expensive when different data samples require different graph topology, dynamic scheduling may dynamically schedule different frames to different devices to take advantage of the additional parallelism. Moreover, as recursion is restricted to trees, deep learning systems need a more general approach for precisely capturing the dependency among loop iterations in order to explore parallelism in arbitrary dependency topologies, such as Graph-LSTM [8]."
            },
            "slug": "Dynamic-Scheduling-For-Dynamic-Control-Flow-in-Deep-Wei-Gibson",
            "title": {
                "fragments": [],
                "text": "Dynamic Scheduling For Dynamic Control Flow in Deep Learning Systems"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This work argues for the importance of dynamic scheduling, especially regarding distributed device placement, in deep learning systems, and presents two dynamic control flow operations cond and while_loop in TensorFlow that represents conditional and iterateive computation respectively."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2214386"
                        ],
                        "name": "Farzad Khorasani",
                        "slug": "Farzad-Khorasani",
                        "structuredName": {
                            "firstName": "Farzad",
                            "lastName": "Khorasani",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Farzad Khorasani"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "20799354"
                        ],
                        "name": "Hodjat Asghari Esfeden",
                        "slug": "Hodjat-Asghari-Esfeden",
                        "structuredName": {
                            "firstName": "Hodjat",
                            "lastName": "Esfeden",
                            "middleNames": [
                                "Asghari"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hodjat Asghari Esfeden"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1387958482"
                        ],
                        "name": "N. Abu-Ghazaleh",
                        "slug": "N.-Abu-Ghazaleh",
                        "structuredName": {
                            "firstName": "Nael",
                            "lastName": "Abu-Ghazaleh",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Abu-Ghazaleh"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1728219"
                        ],
                        "name": "Vivek Sarkar",
                        "slug": "Vivek-Sarkar",
                        "structuredName": {
                            "firstName": "Vivek",
                            "lastName": "Sarkar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vivek Sarkar"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 159,
                                "start": 137
                            }
                        ],
                        "text": "Model persistence was first proposed by Persistent RNNs (Diamos et al., 2016), subsequently used in GRNN (Holmes et al., 2019) and VPPS (Khorasani et al., 2018) and adapted for CPUs in DeepCPU (Zhang et al., 2018)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 52204033,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "c3d9f1eae4b982572cdc47ea85ae73393265c19f",
            "isKey": false,
            "numCitedBy": 23,
            "numCiting": 72,
            "paperAbstract": {
                "fragments": [],
                "text": "Dynamic neural networks enable higher representation flexibility compared to networks with a fixed architecture and are extensively deployed in problems dealing with varying input-induced network structure, such as those in Natural Language Processing. One of the standard optimizations used in static net training is persistency of recurrent weights on the chip. In dynamic nets, possibly-inhomogeneous computation graph for every input prevents caching recurrent weights in GPU registers. Therefore, existing solutions suffer from excessive recurring off-chip memory loads as well as compounded kernel launch overheads leading to underutilization of GPU SMs. In this paper, we present a software system that enables persistency of weight matrices during the training of dynamic neural networks on the GPU. Before the training begins, our approach named Virtual Persistent Processor Specialization (VPPS) specializes a forward-backward propagation kernel that contains in-register caching and operation routines. VPPS virtualizes persistent kernel CTAs as CISC-like vector processors that can be guided to execute supplied instructions. VPPS greatly reduces the overall amount of off-chip loads by caching weight matrices on the chip, while simultaneously, provides maximum portability as it does not make any assumptions about the shape of the given computation graphs hence fulfilling dynamic net requirements. We implemented our solution on DyNet and abstracted away its design complexities by providing simple function calls to the user. Our experiments on a Volta micro-architecture shows that, unlike the most competitive solutions, VPPS shows excellent performance even in small batch sizes and delivers up to 6x speedup on training dynamic nets."
            },
            "slug": "In-Register-Parameter-Caching-for-Dynamic-Neural-Khorasani-Esfeden",
            "title": {
                "fragments": [],
                "text": "In-Register Parameter Caching for Dynamic Neural Nets with Virtual Persistent Processor Specialization"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This paper presents a software system that enables persistency of weight matrices during the training of dynamic neural networks on the GPU called Virtual Persistent Processor Specialization (VPPS), which virtualizes persistent kernel CTAs as CISC-like vector processors that can be guided to execute supplied instructions."
            },
            "venue": {
                "fragments": [],
                "text": "2018 51st Annual IEEE/ACM International Symposium on Microarchitecture (MICRO)"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47112093"
                        ],
                        "name": "Yuan Yu",
                        "slug": "Yuan-Yu",
                        "structuredName": {
                            "firstName": "Yuan",
                            "lastName": "Yu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yuan Yu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057642721"
                        ],
                        "name": "Mart\u00edn Abadi",
                        "slug": "Mart\u00edn-Abadi",
                        "structuredName": {
                            "firstName": "Mart\u00edn",
                            "lastName": "Abadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mart\u00edn Abadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144758007"
                        ],
                        "name": "P. Barham",
                        "slug": "P.-Barham",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Barham",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Barham"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2445241"
                        ],
                        "name": "E. Brevdo",
                        "slug": "E.-Brevdo",
                        "structuredName": {
                            "firstName": "Eugene",
                            "lastName": "Brevdo",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Brevdo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32623151"
                        ],
                        "name": "M. Burrows",
                        "slug": "M.-Burrows",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Burrows",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Burrows"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "36347083"
                        ],
                        "name": "Andy Davis",
                        "slug": "Andy-Davis",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Davis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Davis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48448318"
                        ],
                        "name": "J. Dean",
                        "slug": "J.-Dean",
                        "structuredName": {
                            "firstName": "Jeff",
                            "lastName": "Dean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Dean"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1780892"
                        ],
                        "name": "S. Ghemawat",
                        "slug": "S.-Ghemawat",
                        "structuredName": {
                            "firstName": "Sanjay",
                            "lastName": "Ghemawat",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Ghemawat"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3367786"
                        ],
                        "name": "Tim Harley",
                        "slug": "Tim-Harley",
                        "structuredName": {
                            "firstName": "Tim",
                            "lastName": "Harley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tim Harley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2052793706"
                        ],
                        "name": "Peter Hawkins",
                        "slug": "Peter-Hawkins",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Hawkins",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Peter Hawkins"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2090818"
                        ],
                        "name": "M. Isard",
                        "slug": "M.-Isard",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Isard",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Isard"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1942300"
                        ],
                        "name": "M. Kudlur",
                        "slug": "M.-Kudlur",
                        "structuredName": {
                            "firstName": "Manjunath",
                            "lastName": "Kudlur",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Kudlur"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3089272"
                        ],
                        "name": "R. Monga",
                        "slug": "R.-Monga",
                        "structuredName": {
                            "firstName": "Rajat",
                            "lastName": "Monga",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Monga"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "20154699"
                        ],
                        "name": "D. Murray",
                        "slug": "D.-Murray",
                        "structuredName": {
                            "firstName": "Derek",
                            "lastName": "Murray",
                            "middleNames": [
                                "Gordon"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Murray"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2152198093"
                        ],
                        "name": "Xiaoqiang Zheng",
                        "slug": "Xiaoqiang-Zheng",
                        "structuredName": {
                            "firstName": "Xiaoqiang",
                            "lastName": "Zheng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xiaoqiang Zheng"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 4944066,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9ed53d949959165188ab2e5fd76f686d692d43ea",
            "isKey": false,
            "numCitedBy": 81,
            "numCiting": 50,
            "paperAbstract": {
                "fragments": [],
                "text": "Many recent machine learning models rely on fine-grained dynamic control flow for training and inference. In particular, models based on recurrent neural networks and on reinforcement learning depend on recurrence relations, data-dependent conditional execution, and other features that call for dynamic control flow. These applications benefit from the ability to make rapid control-flow decisions across a set of computing devices in a distributed system. For performance, scalability, and expressiveness, a machine learning system must support dynamic control flow in distributed and heterogeneous environments. This paper presents a programming model for distributed machine learning that supports dynamic control flow. We describe the design of the programming model, and its implementation in TensorFlow, a distributed machine learning system. Our approach extends the use of dataflow graphs to represent machine learning models, offering several distinctive features. First, the branches of conditionals and bodies of loops can be partitioned across many machines to run on a set of heterogeneous devices, including CPUs, GPUs, and custom ASICs. Second, programs written in our model support automatic differentiation and distributed gradient computations, which are necessary for training machine learning models that use control flow. Third, our choice of non-strict semantics enables multiple loop iterations to execute in parallel across machines, and to overlap compute and I/O operations. We have done our work in the context of TensorFlow, and it has been used extensively in research and production. We evaluate it using several real-world applications, and demonstrate its performance and scalability."
            },
            "slug": "Dynamic-control-flow-in-large-scale-machine-Yu-Abadi",
            "title": {
                "fragments": [],
                "text": "Dynamic control flow in large-scale machine learning"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "This paper describes the design of the programming model, and its implementation in TensorFlow, a distributed machine learning system, and describes the use of dataflow graphs to represent machine learning models, offering several distinctive features."
            },
            "venue": {
                "fragments": [],
                "text": "EuroSys"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1846258"
                        ],
                        "name": "Noam M. Shazeer",
                        "slug": "Noam-M.-Shazeer",
                        "structuredName": {
                            "firstName": "Noam",
                            "lastName": "Shazeer",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Noam M. Shazeer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1861312"
                        ],
                        "name": "Azalia Mirhoseini",
                        "slug": "Azalia-Mirhoseini",
                        "structuredName": {
                            "firstName": "Azalia",
                            "lastName": "Mirhoseini",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Azalia Mirhoseini"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50351613"
                        ],
                        "name": "Krzysztof Maziarz",
                        "slug": "Krzysztof-Maziarz",
                        "structuredName": {
                            "firstName": "Krzysztof",
                            "lastName": "Maziarz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Krzysztof Maziarz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "36347083"
                        ],
                        "name": "Andy Davis",
                        "slug": "Andy-Davis",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Davis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Davis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2827616"
                        ],
                        "name": "Quoc V. Le",
                        "slug": "Quoc-V.-Le",
                        "structuredName": {
                            "firstName": "Quoc",
                            "lastName": "Le",
                            "middleNames": [
                                "V."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Quoc V. Le"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1695689"
                        ],
                        "name": "Geoffrey E. Hinton",
                        "slug": "Geoffrey-E.-Hinton",
                        "structuredName": {
                            "firstName": "Geoffrey",
                            "lastName": "Hinton",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Geoffrey E. Hinton"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48448318"
                        ],
                        "name": "J. Dean",
                        "slug": "J.-Dean",
                        "structuredName": {
                            "firstName": "Jeff",
                            "lastName": "Dean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Dean"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 12462234,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "510e26733aaff585d65701b9f1be7ca9d5afc586",
            "isKey": false,
            "numCitedBy": 878,
            "numCiting": 45,
            "paperAbstract": {
                "fragments": [],
                "text": "The capacity of a neural network to absorb information is limited by its number of parameters. Conditional computation, where parts of the network are active on a per-example basis, has been proposed in theory as a way of dramatically increasing model capacity without a proportional increase in computation. In practice, however, there are significant algorithmic and performance challenges. In this work, we address these challenges and finally realize the promise of conditional computation, achieving greater than 1000x improvements in model capacity with only minor losses in computational efficiency on modern GPU clusters. We introduce a Sparsely-Gated Mixture-of-Experts layer (MoE), consisting of up to thousands of feed-forward sub-networks. A trainable gating network determines a sparse combination of these experts to use for each example. We apply the MoE to the tasks of language modeling and machine translation, where model capacity is critical for absorbing the vast quantities of knowledge available in the training corpora. We present model architectures in which a MoE with up to 137 billion parameters is applied convolutionally between stacked LSTM layers. On large language modeling and machine translation benchmarks, these models achieve significantly better results than state-of-the-art at lower computational cost."
            },
            "slug": "Outrageously-Large-Neural-Networks:-The-Layer-Shazeer-Mirhoseini",
            "title": {
                "fragments": [],
                "text": "Outrageously Large Neural Networks: The Sparsely-Gated Mixture-of-Experts Layer"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "This work introduces a Sparsely-Gated Mixture-of-Experts layer (MoE), consisting of up to thousands of feed-forward sub-networks, and applies the MoE to the tasks of language modeling and machine translation, where model capacity is critical for absorbing the vast quantities of knowledge available in the training corpora."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2111143430"
                        ],
                        "name": "Samuel Williams",
                        "slug": "Samuel-Williams",
                        "structuredName": {
                            "firstName": "Samuel",
                            "lastName": "Williams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Samuel Williams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145492285"
                        ],
                        "name": "Andrew Waterman",
                        "slug": "Andrew-Waterman",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Waterman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Waterman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2052996765"
                        ],
                        "name": "David A. Patterson",
                        "slug": "David-A.-Patterson",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Patterson",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David A. Patterson"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 88,
                                "start": 67
                            }
                        ],
                        "text": "8 and explored more in \u00a7C of the appendix using the roofline model (Williams et al., 2009)), which has the dual effect of generating faster GPU code (seen in the \u2018GPU computation time\u2019 column in Table 6) as well as lowering CUDA kernel call overheads."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 41,
                                "start": 20
                            }
                        ],
                        "text": "The roofline model (Williams et al., 2009) is a simple analytical performance model that can be used to quantify the amount of reuse exploited by a given computation kernel."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 5703612,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "092217c2267f6e0673590aa151d811e579ff7760",
            "isKey": false,
            "numCitedBy": 1897,
            "numCiting": 58,
            "paperAbstract": {
                "fragments": [],
                "text": "The Roofline model offers insight on how to improve the performance of software and hardware."
            },
            "slug": "Roofline:-an-insightful-visual-performance-model-Williams-Waterman",
            "title": {
                "fragments": [],
                "text": "Roofline: an insightful visual performance model for multicore architectures"
            },
            "tldr": {
                "abstractSimilarityScore": 78,
                "text": "The Roofline model offers insight on how to improve the performance of software and hardware in the rapidly changing world of connected devices."
            },
            "venue": {
                "fragments": [],
                "text": "CACM"
            },
            "year": 2009
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 180,
                                "start": 161
                            }
                        ],
                        "text": "Variants of dynamic batching have been used in frameworks such as DyNet, Cavs, BatchMaker (Gao et al., 2018), TensorFlow Fold (Looks et al., 2017) and Matchbox (Bradbury & Fu, 2018)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Automatic batching as a compiler pass in PyTorch"
            },
            "venue": {
                "fragments": [],
                "text": "Workshop on Systems for ML"
            },
            "year": 2018
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Automatic batching as a compiler"
            },
            "venue": {
                "fragments": [],
                "text": "cars. arXiv preprint arXiv:1604.07316,"
            },
            "year": 2016
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "GPU inference on the rise"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "TensorRT programmable inference accelerator"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 215,
                                "start": 195
                            }
                        ],
                        "text": "\u2026dynamic models such as DyNet (Neubig et al., 2017a;b), Cavs (Xu et al., 2018) and PyTorch (Paszke et al., 2019) has relied on hardware-specific, highly-optimized vendor libraries such as cuDNN (Chetlur et al., 2014) for Nvidia GPUs and MKL (In-\n1Carnegie Mellon University, Pittsburgh, USA 2OctoML."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Efficient primitives for deep learning"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2014
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Cuda c++ programming guide"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "OpenVINO toolkit"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 160,
                                "start": 145
                            }
                        ],
                        "text": "This often precludes optimizations such as kernel fusion (combining multiple kernel calls into a single call) that have proven quite beneficial (Microsoft, 2020)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Microsoft deepspeed achieves the fastest bert training time"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2020
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Inter-block gpu communication"
            },
            "venue": {
                "fragments": [],
                "text": "deep learning on graphs,"
            },
            "year": 2019
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "GPU inference on the rise , 2019"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 190,
                                "start": 170
                            }
                        ],
                        "text": "\u2026on machine learning compilers (Roesch et al., 2019; Shen et al., 2020; Yu et al., 2018; Wei et al.) as well as on deep learning (Tai et al., 2015; Shazeer et al., 2017; Elbayad et al., 2019) suggests that supporting efficient execution of various kinds of dynamism in ML models is very desirable."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Depth-adaptive transformer. CoRR, abs/1910.10073"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2019
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 47,
                                "start": 37
                            }
                        ],
                        "text": "Deep learning compilers such as XLA (Team, 2017) and Glow (Rotem et al., 2018) optimize static feed forward models and can perform partial kernel fusion and code generation."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 169,
                                "start": 166
                            }
                        ],
                        "text": "Further, in (Radul et al., 2020), the authors develop techniques to efficiently lower recursion into iterative control flow while performing dynamic batching for the XLA toolchain."
                    },
                    "intents": []
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "XLA - tensorflow, compiled, 2017"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2017
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Integrated runtime and compile-time approach for parallelizing structured and block structured applications. Parallel and Distributed Systems"
            },
            "venue": {
                "fragments": [],
                "text": "IEEE Transactions on"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Understanding the overheads of launching cuda kernels"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Deep - CPU : Serving RNN - based deep learning models 10 x faster"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "CORTEX: A Compiler for Recursive Deep Learning"
            },
            "venue": {
                "fragments": [],
                "text": "arXiv preprint arXiv:1701.03980,"
            },
            "year": 2017
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "An efficient smt solver"
            },
            "venue": {
                "fragments": [],
                "text": "In International conference on Tools and Algorithms for the Construction and Analysis of Systems,"
            },
            "year": 2008
        }
    ],
    "meta_info": {
        "citationIntent": "all",
        "citationIntentCount": {
            "background": 24,
            "methodology": 19,
            "result": 1
        },
        "citationType": "citedPapers",
        "pageNumber": 1,
        "requestedPageSize": 10,
        "sort": "relevance",
        "totalCitations": 75,
        "totalPages": 8
    },
    "page_url": "https://www.semanticscholar.org/paper/Cortex:-A-Compiler-for-Recursive-Deep-Learning-Fegade-Chen/acf31788fa545f5f0467289b16188f2c6cfa8c44?sort=total-citations"
}