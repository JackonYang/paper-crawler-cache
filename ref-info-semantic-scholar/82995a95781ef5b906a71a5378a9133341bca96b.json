{
    "links": [
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1913774"
                        ],
                        "name": "Tianqi Chen",
                        "slug": "Tianqi-Chen",
                        "structuredName": {
                            "firstName": "Tianqi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianqi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47108160"
                        ],
                        "name": "T. Moreau",
                        "slug": "T.-Moreau",
                        "structuredName": {
                            "firstName": "Thierry",
                            "lastName": "Moreau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Moreau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1732910"
                        ],
                        "name": "Ziheng Jiang",
                        "slug": "Ziheng-Jiang",
                        "structuredName": {
                            "firstName": "Ziheng",
                            "lastName": "Jiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ziheng Jiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2149970173"
                        ],
                        "name": "Lianmin Zheng",
                        "slug": "Lianmin-Zheng",
                        "structuredName": {
                            "firstName": "Lianmin",
                            "lastName": "Zheng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lianmin Zheng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2621619"
                        ],
                        "name": "Eddie Q. Yan",
                        "slug": "Eddie-Q.-Yan",
                        "structuredName": {
                            "firstName": "Eddie",
                            "lastName": "Yan",
                            "middleNames": [
                                "Q."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eddie Q. Yan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3050154"
                        ],
                        "name": "Haichen Shen",
                        "slug": "Haichen-Shen",
                        "structuredName": {
                            "firstName": "Haichen",
                            "lastName": "Shen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Haichen Shen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "37270394"
                        ],
                        "name": "M. Cowan",
                        "slug": "M.-Cowan",
                        "structuredName": {
                            "firstName": "Meghan",
                            "lastName": "Cowan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Cowan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2185540"
                        ],
                        "name": "Leyuan Wang",
                        "slug": "Leyuan-Wang",
                        "structuredName": {
                            "firstName": "Leyuan",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Leyuan Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49994783"
                        ],
                        "name": "Yuwei Hu",
                        "slug": "Yuwei-Hu",
                        "structuredName": {
                            "firstName": "Yuwei",
                            "lastName": "Hu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yuwei Hu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1717411"
                        ],
                        "name": "L. Ceze",
                        "slug": "L.-Ceze",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Ceze",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Ceze"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1730156"
                        ],
                        "name": "Carlos Guestrin",
                        "slug": "Carlos-Guestrin",
                        "structuredName": {
                            "firstName": "Carlos",
                            "lastName": "Guestrin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Carlos Guestrin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144695691"
                        ],
                        "name": "A. Krishnamurthy",
                        "slug": "A.-Krishnamurthy",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Krishnamurthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Krishnamurthy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 265,
                                "start": 262
                            }
                        ],
                        "text": "Large technology companies, such as Google, Facebook, and Amazon, drive the development of frameworks, and consequently, each company has its own stack consisting of the core framework (TensorFlow [1], PyTorch [8], MxNet [6]), compilers(XLA [55], Glow [38], TVM [7]), and hardware accelerators (TPU [20], GraphCore, Inferentia [2])."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 103,
                                "start": 92
                            }
                        ],
                        "text": "Relay translates all operators into TVM expressions to produce dense linear algebra kernels [7, 53, 35]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 103,
                                "start": 100
                            }
                        ],
                        "text": "There are a number of competing approaches, both from academic and commercial entities, such as TVM [7], Halide [35], Tensor Comprehensions(TC) [53], and Diesel [11]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 52939079,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "df013a17ab84d5403361da4538a04d574f58be83",
            "isKey": false,
            "numCitedBy": 713,
            "numCiting": 51,
            "paperAbstract": {
                "fragments": [],
                "text": "There is an increasing need to bring machine learning to a wide diversity of hardware devices. Current frameworks rely on vendor-specific operator libraries and optimize for a narrow range of server-class GPUs. Deploying workloads to new platforms -- such as mobile phones, embedded devices, and accelerators (e.g., FPGAs, ASICs) -- requires significant manual effort. We propose TVM, a compiler that exposes graph-level and operator-level optimizations to provide performance portability to deep learning workloads across diverse hardware back-ends. TVM solves optimization challenges specific to deep learning, such as high-level operator fusion, mapping to arbitrary hardware primitives, and memory latency hiding. It also automates optimization of low-level programs to hardware characteristics by employing a novel, learning-based cost modeling method for rapid exploration of code optimizations. Experimental results show that TVM delivers performance across hardware back-ends that are competitive with state-of-the-art, hand-tuned libraries for low-power CPU, mobile GPU, and server-class GPUs. We also demonstrate TVM's ability to target new accelerator back-ends, such as the FPGA-based generic deep learning accelerator. The system is open sourced and in production use inside several major companies."
            },
            "slug": "TVM:-An-Automated-End-to-End-Optimizing-Compiler-Chen-Moreau",
            "title": {
                "fragments": [],
                "text": "TVM: An Automated End-to-End Optimizing Compiler for Deep Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "TVM is a compiler that exposes graph-level and operator-level optimizations to provide performance portability to deep learning workloads across diverse hardware back-ends and automates optimization of low-level programs to hardware characteristics by employing a novel, learning-based cost modeling method for rapid exploration of code optimizations."
            },
            "venue": {
                "fragments": [],
                "text": "OSDI"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144169965"
                        ],
                        "name": "Wei-Fen Lin",
                        "slug": "Wei-Fen-Lin",
                        "structuredName": {
                            "firstName": "Wei-Fen",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wei-Fen Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153937154"
                        ],
                        "name": "Der-Yu Tsai",
                        "slug": "Der-Yu-Tsai",
                        "structuredName": {
                            "firstName": "Der-Yu",
                            "lastName": "Tsai",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Der-Yu Tsai"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152554627"
                        ],
                        "name": "Luba Tang",
                        "slug": "Luba-Tang",
                        "structuredName": {
                            "firstName": "Luba",
                            "lastName": "Tang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luba Tang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3141137"
                        ],
                        "name": "C. Hsieh",
                        "slug": "C.-Hsieh",
                        "structuredName": {
                            "firstName": "Cheng-Tao",
                            "lastName": "Hsieh",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Hsieh"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48316770"
                        ],
                        "name": "Cheng-Yi Chou",
                        "slug": "Cheng-Yi-Chou",
                        "structuredName": {
                            "firstName": "Cheng-Yi",
                            "lastName": "Chou",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Cheng-Yi Chou"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152472739"
                        ],
                        "name": "P. Chang",
                        "slug": "P.-Chang",
                        "structuredName": {
                            "firstName": "Ping-Hao",
                            "lastName": "Chang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Chang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152570607"
                        ],
                        "name": "Luis Hsu",
                        "slug": "Luis-Hsu",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Hsu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luis Hsu"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 163,
                                "start": 159
                            }
                        ],
                        "text": "DL frameworks have adopted compilers to tackle both performance and portability for existing applications, most notably XLA [55], Glow [38], nGraph [10], ONNC [24], PlaidML [9], and ModelCompiler."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 198929303,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8fdff204a42ddf0d3e0e33adf3f061a02b7824a0",
            "isKey": false,
            "numCitedBy": 20,
            "numCiting": 6,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents ONNC (Open Neural Network Compiler), a retargetable compilation framework designed to connect ONNX (Open Neural Network Exchange) models to proprietary deep learning accelerators (DLAs). The intermediate representations (IRs) of ONNC have one-to-one mapping to ONNX IRs, thus making porting ONNC to proprietary DLAs much simpler than other compilation frameworks such as TVM and Glow especially for hardware with coarse-grained operators that are not part of the generic IRs in the LLVM backend. ONNC also has a flexible pass manager designed to support compiler optimizations at all levels. A docker image of ONNC bundled with a Vanilla backend is released with this paper to enable fast porting to new hardware targets. To illustrate how an ONNC-based toolkit guides our research and development in DLA design, we present a case study on compiler optimizations for activation memory consumption. The study shows that the Best-Fit algorithm with a proposed heuristic and a reordering scheme may act as a near-optimal strategy, getting the memory consumption close to the ideal lower bound in 11 of 12 models from the ONNX model zoo. To our best knowledge, ONNC is the first open source compilation framework that is specially designed to support the ONNX-based models for both commercial and research projects for deep learning applications."
            },
            "slug": "ONNC:-A-Compilation-Framework-Connecting-ONNX-to-Lin-Tsai",
            "title": {
                "fragments": [],
                "text": "ONNC: A Compilation Framework Connecting ONNX to Proprietary Deep Learning Accelerators"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "The study shows that the Best-Fit algorithm with a proposed heuristic and a reordering scheme may act as a near-optimal strategy, getting the memory consumption close to the ideal lower bound in 11 of 12 models from the ONNX model zoo."
            },
            "venue": {
                "fragments": [],
                "text": "2019 IEEE International Conference on Artificial Intelligence Circuits and Systems (AICAS)"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3121592"
                        ],
                        "name": "Nadav Rotem",
                        "slug": "Nadav-Rotem",
                        "structuredName": {
                            "firstName": "Nadav",
                            "lastName": "Rotem",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nadav Rotem"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8855702"
                        ],
                        "name": "Jordan Fix",
                        "slug": "Jordan-Fix",
                        "structuredName": {
                            "firstName": "Jordan",
                            "lastName": "Fix",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jordan Fix"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46247320"
                        ],
                        "name": "Saleem Abdulrasool",
                        "slug": "Saleem-Abdulrasool",
                        "structuredName": {
                            "firstName": "Saleem",
                            "lastName": "Abdulrasool",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saleem Abdulrasool"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46193056"
                        ],
                        "name": "Summer Deng",
                        "slug": "Summer-Deng",
                        "structuredName": {
                            "firstName": "Summer",
                            "lastName": "Deng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Summer Deng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46257780"
                        ],
                        "name": "Roman Dzhabarov",
                        "slug": "Roman-Dzhabarov",
                        "structuredName": {
                            "firstName": "Roman",
                            "lastName": "Dzhabarov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Roman Dzhabarov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153509089"
                        ],
                        "name": "James Hegeman",
                        "slug": "James-Hegeman",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Hegeman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James Hegeman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46211183"
                        ],
                        "name": "Roman Levenstein",
                        "slug": "Roman-Levenstein",
                        "structuredName": {
                            "firstName": "Roman",
                            "lastName": "Levenstein",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Roman Levenstein"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2130533"
                        ],
                        "name": "Bertrand A. Maher",
                        "slug": "Bertrand-A.-Maher",
                        "structuredName": {
                            "firstName": "Bertrand",
                            "lastName": "Maher",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bertrand A. Maher"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143758120"
                        ],
                        "name": "N. Satish",
                        "slug": "N.-Satish",
                        "structuredName": {
                            "firstName": "Nadathur",
                            "lastName": "Satish",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Satish"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2925676"
                        ],
                        "name": "Jakob R. Olesen",
                        "slug": "Jakob-R.-Olesen",
                        "structuredName": {
                            "firstName": "Jakob",
                            "lastName": "Olesen",
                            "middleNames": [
                                "R."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jakob R. Olesen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1686843"
                        ],
                        "name": "Jongsoo Park",
                        "slug": "Jongsoo-Park",
                        "structuredName": {
                            "firstName": "Jongsoo",
                            "lastName": "Park",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jongsoo Park"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46250117"
                        ],
                        "name": "Artem Rakhov",
                        "slug": "Artem-Rakhov",
                        "structuredName": {
                            "firstName": "Artem",
                            "lastName": "Rakhov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Artem Rakhov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1711231"
                        ],
                        "name": "M. Smelyanskiy",
                        "slug": "M.-Smelyanskiy",
                        "structuredName": {
                            "firstName": "Mikhail",
                            "lastName": "Smelyanskiy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Smelyanskiy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 79
                            }
                        ],
                        "text": "As a result, nontrivial extensions require patching or even forking frameworks [27, 47, 52, 41, 55, 38, 51]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 139,
                                "start": 135
                            }
                        ],
                        "text": "DL frameworks have adopted compilers to tackle both performance and portability for existing applications, most notably XLA [55], Glow [38], nGraph [10], ONNC [24], PlaidML [9], and ModelCompiler."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 86,
                                "start": 82
                            }
                        ],
                        "text": "These stable static traces can then be optimized by lower-level compilers such as Glow or Relay to perform the last level of code generation."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 256,
                                "start": 252
                            }
                        ],
                        "text": "Large technology companies, such as Google, Facebook, and Amazon, drive the development of frameworks, and consequently, each company has its own stack consisting of the core framework (TensorFlow [1], PyTorch [8], MxNet [6]), compilers(XLA [55], Glow [38], TVM [7]), and hardware accelerators (TPU [20], GraphCore, Inferentia [2])."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 156,
                                "start": 134
                            }
                        ],
                        "text": "Popular DL compiler intermediate representations (IRs) offer different tradeoffs between expressivity, composability, and portability [1, 33, 50, 52, 5, 38]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 23823854,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0261195ae7e1545caefb0ea7afb92bd66bfbb790",
            "isKey": true,
            "numCitedBy": 164,
            "numCiting": 19,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents the design of Glow, a machine learning compiler for heterogeneous hardware. It is a pragmatic approach to compilation that enables the generation of highly optimized code for multiple targets. Glow lowers the traditional neural network dataflow graph into a two-phase strongly-typed intermediate representation. The high-level intermediate representation allows the optimizer to perform domain-specific optimizations. The lower-level instruction-based address-only intermediate representation allows the compiler to perform memory-related optimizations, such as instruction scheduling, static memory allocation and copy elimination. At the lowest level, the optimizer performs machine-specific code generation to take advantage of specialized hardware features. Glow features a lowering phase which enables the compiler to support a high number of input operators as well as a large number of hardware targets by eliminating the need to implement all operators on all targets. The lowering phase is designed to reduce the input space and allow new hardware backends to focus on a small number of linear algebra primitives."
            },
            "slug": "Glow:-Graph-Lowering-Compiler-Techniques-for-Neural-Rotem-Fix",
            "title": {
                "fragments": [],
                "text": "Glow: Graph Lowering Compiler Techniques for Neural Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "Glow features a lowering phase which enables the compiler to support a high number of input operators as well as a large number of hardware targets by eliminating the need to implement all operators on all targets."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1795890"
                        ],
                        "name": "Michel Steuwer",
                        "slug": "Michel-Steuwer",
                        "structuredName": {
                            "firstName": "Michel",
                            "lastName": "Steuwer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michel Steuwer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2539451"
                        ],
                        "name": "Toomas Remmelg",
                        "slug": "Toomas-Remmelg",
                        "structuredName": {
                            "firstName": "Toomas",
                            "lastName": "Remmelg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Toomas Remmelg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3224333"
                        ],
                        "name": "Christophe Dubach",
                        "slug": "Christophe-Dubach",
                        "structuredName": {
                            "firstName": "Christophe",
                            "lastName": "Dubach",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christophe Dubach"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 93,
                                "start": 89
                            }
                        ],
                        "text": "New languages designed for machine learning and related tasks include Lantern [54], Lift [43], Flux."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 88,
                                "start": 84
                            }
                        ],
                        "text": "New languages designed for machine learning and related tasks include Lantern [54], Lift [43], Flux.jl [18] AutoGraph [30], Swift for TensorFlow [48], and JAX [25]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 7490888,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "aa3553beb4bfa0793a4bed05704e35412342800e",
            "isKey": false,
            "numCitedBy": 132,
            "numCiting": 21,
            "paperAbstract": {
                "fragments": [],
                "text": "Parallel patterns (e.g., map, reduce) have gained traction as an abstraction for targeting parallel accelerators and are a promising answer to the performance portability problem. However, compiling high-level programs into efficient low-level parallel code is challenging. Current approaches start from a high-level parallel IR and proceed to emit GPU code directly in one big step. Fixed strategies are used to optimize and map parallelism exploiting properties of a particular GPU generation leading to performance portability issues. We introduce the LIFT IR, a new data-parallel IR which encodes OpenCL-specific constructs as functional patterns. Our prior work has shown that this functional nature simplifies the exploration of optimizations and mapping of parallelism from portable high-level programs using rewrite-rules. This paper describes how LIFT IR programs are compiled into efficient OpenCL code. This is non-trivial as many performance sensitive details such as memory allocation, array accesses or synchronization are not explicitly represented in the LIFT IR. We present techniques which overcome this challenge by exploiting the pattern's high-level semantics. Our evaluation shows that the LIFT IR is flexible enough to express GPU programs with complex optimizations achieving performance on par with manually optimized code."
            },
            "slug": "LIFT:-A-functional-data-parallel-IR-for-GPU-code-Steuwer-Remmelg",
            "title": {
                "fragments": [],
                "text": "LIFT: A functional data-parallel IR for high-performance GPU code generation"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This paper describes how LIFT IR programs are compiled into efficient OpenCL code, a new data-parallel IR which encodes OpenCL-specific constructs as functional patterns which is flexible enough to express GPU programs with complex optimizations achieving performance on par with manually optimized code."
            },
            "venue": {
                "fragments": [],
                "text": "2017 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2054833547"
                        ],
                        "name": "O. Zinenko",
                        "slug": "O.-Zinenko",
                        "structuredName": {
                            "firstName": "Oleksandr",
                            "lastName": "Zinenko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Zinenko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2097631216"
                        ],
                        "name": "Theodoros Theodoridis",
                        "slug": "Theodoros-Theodoridis",
                        "structuredName": {
                            "firstName": "Theodoros",
                            "lastName": "Theodoridis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Theodoros Theodoridis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47316088"
                        ],
                        "name": "Priya Goyal",
                        "slug": "Priya-Goyal",
                        "structuredName": {
                            "firstName": "Priya",
                            "lastName": "Goyal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Priya Goyal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2375710"
                        ],
                        "name": "Zach DeVito",
                        "slug": "Zach-DeVito",
                        "structuredName": {
                            "firstName": "Zach",
                            "lastName": "DeVito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zach DeVito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "16521420"
                        ],
                        "name": "William S. Moses",
                        "slug": "William-S.-Moses",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Moses",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William S. Moses"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 103,
                                "start": 92
                            }
                        ],
                        "text": "Relay translates all operators into TVM expressions to produce dense linear algebra kernels [7, 53, 35]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 148,
                                "start": 144
                            }
                        ],
                        "text": "There are a number of competing approaches, both from academic and commercial entities, such as TVM [7], Halide [35], Tensor Comprehensions(TC) [53], and Diesel [11]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 44014988,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cae9d90524cccac5081666985d5d055b71697cee",
            "isKey": false,
            "numCitedBy": 284,
            "numCiting": 102,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning models with convolutional and recurrent networks are now ubiquitous and analyze massive amounts of audio, image, video, text and graph data, with applications in automatic translation, speech-to-text, scene understanding, ranking user preferences, ad placement, etc. Competing frameworks for building these networks such as TensorFlow, Chainer, CNTK, Torch/PyTorch, Caffe1/2, MXNet and Theano, explore different tradeoffs between usability and expressiveness, research or production orientation and supported hardware. They operate on a DAG of computational operators, wrapping high-performance libraries such as CUDNN (for NVIDIA GPUs) or NNPACK (for various CPUs), and automate memory allocation, synchronization, distribution. Custom operators are needed where the computation does not fit existing high-performance library calls, usually at a high engineering cost. This is frequently required when new operators are invented by researchers: such operators suffer a severe performance penalty, which limits the pace of innovation. Furthermore, even if there is an existing runtime call these frameworks can use, it often doesn't offer optimal performance for a user's particular network architecture and dataset, missing optimizations between operators as well as optimizations that can be done knowing the size and shape of data. Our contributions include (1) a language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, (2) a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, also providing optimizations such as operator fusion and specialization for specific sizes, (3) a compilation cache populated by an autotuner. [Abstract cutoff]"
            },
            "slug": "Tensor-Comprehensions:-Framework-Agnostic-Machine-Vasilache-Zinenko",
            "title": {
                "fragments": [],
                "text": "Tensor Comprehensions: Framework-Agnostic High-Performance Machine Learning Abstractions"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "A language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, and a compilation cache populated by an autotuner are contributed."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35097712"
                        ],
                        "name": "V. Elango",
                        "slug": "V.-Elango",
                        "structuredName": {
                            "firstName": "Venmugil",
                            "lastName": "Elango",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "V. Elango"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145288598"
                        ],
                        "name": "Norman Rubin",
                        "slug": "Norman-Rubin",
                        "structuredName": {
                            "firstName": "Norman",
                            "lastName": "Rubin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Norman Rubin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49165315"
                        ],
                        "name": "Mahesh Ravishankar",
                        "slug": "Mahesh-Ravishankar",
                        "structuredName": {
                            "firstName": "Mahesh",
                            "lastName": "Ravishankar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mahesh Ravishankar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1984329"
                        ],
                        "name": "Hariharan Sandanagobalane",
                        "slug": "Hariharan-Sandanagobalane",
                        "structuredName": {
                            "firstName": "Hariharan",
                            "lastName": "Sandanagobalane",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hariharan Sandanagobalane"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50654241"
                        ],
                        "name": "Vinod Grover",
                        "slug": "Vinod-Grover",
                        "structuredName": {
                            "firstName": "Vinod",
                            "lastName": "Grover",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vinod Grover"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 169,
                                "start": 163
                            }
                        ],
                        "text": "The most notable designs are either inspired by the compute-schedule split introduced by Halide and adapted by TVM, or the polyhedral framework, as used by TC and Diesel."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 165,
                                "start": 161
                            }
                        ],
                        "text": "There are a number of competing approaches, both from academic and commercial entities, such as TVM [7], Halide [35], Tensor Comprehensions(TC) [53], and Diesel [11]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 47018174,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8ad834debde06968c763bfe2fb9c83aa4d843e0e",
            "isKey": false,
            "numCitedBy": 37,
            "numCiting": 12,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a domain specific language compiler, Diesel, for basic linear algebra and neural network computations, that accepts input expressions in an intuitive form and generates high performing code for GPUs. The current trend is to represent a neural network as a computation DAG, where each node in the DAG corresponds to a single operation such as matrix-matrix multiplication, and map the individual operations to hand tuned library functions provided by standard libraries such as CuBLAS and CuDNN. While this method takes advantage of readily available optimized library codes to achieve good performance for individual operations, it is not possible to optimize across operations. As opposed to this, given a computation composed of several operations, Diesel generates (a set) of efficient device functions, where the code is optimized for the computation as a whole, using polyhedral compilation techniques. In addition, there are cases where the code needs to be specialized for specific problem sizes to achieve optimal performance. While standard libraries are written for parametric problem sizes (where problem sizes are provided at runtime), Diesel can accept problem sizes at compile time and generate specialized codes. Experimental results show that the performance achieved by Diesel generated code for individual operations are comparable to the highly tuned versions provided by standard libraries, while for composite computations, Diesel outperforms manually written versions."
            },
            "slug": "Diesel:-DSL-for-linear-algebra-and-neural-net-on-Elango-Rubin",
            "title": {
                "fragments": [],
                "text": "Diesel: DSL for linear algebra and neural net computations on GPUs"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "Experimental results show that the performance achieved by Diesel generated code for individual operations are comparable to the highly tuned versions provided by standard libraries, while for composite computations, Diesel outperforms manually written versions."
            },
            "venue": {
                "fragments": [],
                "text": "MAPL@PLDI"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2496412"
                        ],
                        "name": "Connelly Barnes",
                        "slug": "Connelly-Barnes",
                        "structuredName": {
                            "firstName": "Connelly",
                            "lastName": "Barnes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Connelly Barnes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 95,
                                "start": 89
                            }
                        ],
                        "text": "The most notable designs are either inspired by the compute-schedule split introduced by Halide and adapted by TVM, or the polyhedral framework, as used by TC and Diesel."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 103,
                                "start": 92
                            }
                        ],
                        "text": "Relay translates all operators into TVM expressions to produce dense linear algebra kernels [7, 53, 35]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 116,
                                "start": 112
                            }
                        ],
                        "text": "There are a number of competing approaches, both from academic and commercial entities, such as TVM [7], Halide [35], Tensor Comprehensions(TC) [53], and Diesel [11]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 25,
                                "start": 19
                            }
                        ],
                        "text": "ModelCompiler uses Halide to represent low-level operations, but lacks the expressivity of the Relay IR and only demonstrates support for CPUs."
                    },
                    "intents": []
                }
            ],
            "corpusId": 5885207,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d032f74b16457584f8a60ae07cfef9b617033638",
            "isKey": true,
            "numCitedBy": 878,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Image processing pipelines combine the challenges of stencil computations and stream programs. They are composed of large graphs of different stencil stages, as well as complex reductions, and stages with global or data-dependent access patterns. Because of their complex structure, the performance difference between a naive implementation of a pipeline and an optimized one is often an order of magnitude. Efficient implementations require optimization of both parallelism and locality, but due to the nature of stencils, there is a fundamental tension between parallelism, locality, and introducing redundant recomputation of shared values. We present a systematic model of the tradeoff space fundamental to stencil pipelines, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule. Combining this compiler with stochastic search over the space of schedules enables terse, composable programs to achieve state-of-the-art performance on a wide range of real image processing pipelines, and across different hardware architectures, including multicores with SIMD, and heterogeneous CPU+GPU execution. From simple Halide programs written in a few hours, we demonstrate performance up to 5x faster than hand-tuned C, intrinsics, and CUDA implementations optimized by experts over weeks or months, for image processing applications beyond the reach of past automatic compilers."
            },
            "slug": "Halide:-a-language-and-compiler-for-optimizing-and-Ragan-Kelley-Barnes",
            "title": {
                "fragments": [],
                "text": "Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A systematic model of the tradeoff space fundamental to stencil pipelines is presented, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule are presented."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI 2013"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40497400"
                        ],
                        "name": "D. Moldovan",
                        "slug": "D.-Moldovan",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Moldovan",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Moldovan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "117235241"
                        ],
                        "name": "James M. Decker",
                        "slug": "James-M.-Decker",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Decker",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James M. Decker"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1682816"
                        ],
                        "name": "Fei Wang",
                        "slug": "Fei-Wang",
                        "structuredName": {
                            "firstName": "Fei",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fei Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2115826274"
                        ],
                        "name": "A. A. Johnson",
                        "slug": "A.-A.-Johnson",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Johnson",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. A. Johnson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145710580"
                        ],
                        "name": "Brian K. Lee",
                        "slug": "Brian-K.-Lee",
                        "structuredName": {
                            "firstName": "Brian",
                            "lastName": "Lee",
                            "middleNames": [
                                "K."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Brian K. Lee"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "81408931"
                        ],
                        "name": "Zachary Nado",
                        "slug": "Zachary-Nado",
                        "structuredName": {
                            "firstName": "Zachary",
                            "lastName": "Nado",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zachary Nado"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1733143"
                        ],
                        "name": "D. Sculley",
                        "slug": "D.-Sculley",
                        "structuredName": {
                            "firstName": "D.",
                            "lastName": "Sculley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Sculley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1712987"
                        ],
                        "name": "Tiark Rompf",
                        "slug": "Tiark-Rompf",
                        "structuredName": {
                            "firstName": "Tiark",
                            "lastName": "Rompf",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tiark Rompf"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49398909"
                        ],
                        "name": "Alexander B. Wiltschko",
                        "slug": "Alexander-B.-Wiltschko",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Wiltschko",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander B. Wiltschko"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 22,
                                "start": 18
                            }
                        ],
                        "text": "jl [18] AutoGraph [30], Swift for TensorFlow [48], and JAX [25]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 117,
                                "start": 108
                            }
                        ],
                        "text": "New languages designed for machine learning and related tasks include Lantern [54], Lift [43], Flux.jl [18] AutoGraph [30], Swift for TensorFlow [48], and JAX [25]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 129,
                                "start": 120
                            }
                        ],
                        "text": "The alternative approach is the augmentation of languages to support deep learning, the most notable being systems like AutoGraph, Flux.jl, Swift for TensorFlow, and JAX."
                    },
                    "intents": []
                }
            ],
            "corpusId": 53018478,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9f7d20a93278264ea0393def068f1702c1576082",
            "isKey": false,
            "numCitedBy": 29,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "There is a perceived trade-off between machine learning code that is easy to write, and machine learning code that is scalable or fast to execute. In machine learning, imperative style libraries like Autograd and PyTorch are easy to write, but suffer from high interpretive overhead and are not easily deployable in production or mobile settings. Graph-based libraries like TensorFlow and Theano benefit from whole-program optimization and can be deployed broadly, but make expressing complex models more cumbersome. We describe how the use of staged programming in Python, via source code transformation, offers a midpoint between these two library design patterns, capturing the benefits of both. A key insight is to delay all type-dependent decisions until runtime, via dynamic dispatch. We instantiate these principles in AutoGraph, a software system that improves the programming experience of the TensorFlow library, and demonstrate usability improvements with no loss in performance compared to native TensorFlow graphs. We also show that our system is backend agnostic, and demonstrate targeting an alternate IR with characteristics not found in TensorFlow graphs."
            },
            "slug": "AutoGraph:-Imperative-style-Coding-with-Graph-based-Moldovan-Decker",
            "title": {
                "fragments": [],
                "text": "AutoGraph: Imperative-style Coding with Graph-based Performance"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This work describes how the use of staged programming in Python, via source code transformation, offers a midpoint between these two library design patterns, capturing the benefits of both machine learning and imperative programming."
            },
            "venue": {
                "fragments": [],
                "text": "MLSys"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39978391"
                        ],
                        "name": "Yangqing Jia",
                        "slug": "Yangqing-Jia",
                        "structuredName": {
                            "firstName": "Yangqing",
                            "lastName": "Jia",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yangqing Jia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1782282"
                        ],
                        "name": "Evan Shelhamer",
                        "slug": "Evan-Shelhamer",
                        "structuredName": {
                            "firstName": "Evan",
                            "lastName": "Shelhamer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Evan Shelhamer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "7408951"
                        ],
                        "name": "Jeff Donahue",
                        "slug": "Jeff-Donahue",
                        "structuredName": {
                            "firstName": "Jeff",
                            "lastName": "Donahue",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jeff Donahue"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3049736"
                        ],
                        "name": "Sergey Karayev",
                        "slug": "Sergey-Karayev",
                        "structuredName": {
                            "firstName": "Sergey",
                            "lastName": "Karayev",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sergey Karayev"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2117314646"
                        ],
                        "name": "Jonathan Long",
                        "slug": "Jonathan-Long",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Long",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Long"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2983898"
                        ],
                        "name": "Ross B. Girshick",
                        "slug": "Ross-B.-Girshick",
                        "structuredName": {
                            "firstName": "Ross",
                            "lastName": "Girshick",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ross B. Girshick"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1687120"
                        ],
                        "name": "S. Guadarrama",
                        "slug": "S.-Guadarrama",
                        "structuredName": {
                            "firstName": "Sergio",
                            "lastName": "Guadarrama",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Guadarrama"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1753210"
                        ],
                        "name": "Trevor Darrell",
                        "slug": "Trevor-Darrell",
                        "structuredName": {
                            "firstName": "Trevor",
                            "lastName": "Darrell",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Trevor Darrell"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 48,
                                "start": 44
                            }
                        ],
                        "text": "Define-And-Run Frameworks TensorFlow, Caffe [19], and Theano [5] are define-and-run frameworks."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 1799558,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6bdb186ec4726e00a8051119636d4df3b94043b5",
            "isKey": false,
            "numCitedBy": 13814,
            "numCiting": 16,
            "paperAbstract": {
                "fragments": [],
                "text": "Caffe provides multimedia scientists and practitioners with a clean and modifiable framework for state-of-the-art deep learning algorithms and a collection of reference models. The framework is a BSD-licensed C++ library with Python and MATLAB bindings for training and deploying general-purpose convolutional neural networks and other deep models efficiently on commodity architectures. Caffe fits industry and internet-scale media needs by CUDA GPU computation, processing over 40 million images a day on a single K40 or Titan GPU (approx 2 ms per image). By separating model representation from actual implementation, Caffe allows experimentation and seamless switching among platforms for ease of development and deployment from prototyping machines to cloud environments. Caffe is maintained and developed by the Berkeley Vision and Learning Center (BVLC) with the help of an active community of contributors on GitHub. It powers ongoing research projects, large-scale industrial applications, and startup prototypes in vision, speech, and multimedia."
            },
            "slug": "Caffe:-Convolutional-Architecture-for-Fast-Feature-Jia-Shelhamer",
            "title": {
                "fragments": [],
                "text": "Caffe: Convolutional Architecture for Fast Feature Embedding"
            },
            "tldr": {
                "abstractSimilarityScore": 77,
                "text": "Caffe provides multimedia scientists and practitioners with a clean and modifiable framework for state-of-the-art deep learning algorithms and a collection of reference models for training and deploying general-purpose convolutional neural networks and other deep models efficiently on commodity architectures."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Multimedia"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065915235"
                        ],
                        "name": "Raghuraman Krishnamoorthi",
                        "slug": "Raghuraman-Krishnamoorthi",
                        "structuredName": {
                            "firstName": "Raghuraman",
                            "lastName": "Krishnamoorthi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Raghuraman Krishnamoorthi"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 178,
                                "start": 174
                            }
                        ],
                        "text": "State-of-the-art work on quantization demonstrates a number of tradeoffs between different quantization techniques, with the best often determined by platform and model type [22]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 49356451,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3d8b62c060f8444907e7c975c6ae590373b51ed4",
            "isKey": false,
            "numCitedBy": 450,
            "numCiting": 32,
            "paperAbstract": {
                "fragments": [],
                "text": "We present an overview of techniques for quantizing convolutional neural networks for inference with integer weights and activations. Per-channel quantization of weights and per-layer quantization of activations to 8-bits of precision post-training produces classification accuracies within 2% of floating point networks for a wide variety of CNN architectures. Model sizes can be reduced by a factor of 4 by quantizing weights to 8-bits, even when 8-bit arithmetic is not supported. This can be achieved with simple, post training quantization of weights.We benchmark latencies of quantized networks on CPUs and DSPs and observe a speedup of 2x-3x for quantized implementations compared to floating point on CPUs. Speedups of up to 10x are observed on specialized processors with fixed point SIMD capabilities, like the Qualcomm QDSPs with HVX. \nQuantization-aware training can provide further improvements, reducing the gap to floating point to 1% at 8-bit precision. Quantization-aware training also allows for reducing the precision of weights to four bits with accuracy losses ranging from 2% to 10%, with higher accuracy drop for smaller networks.We introduce tools in TensorFlow and TensorFlowLite for quantizing convolutional networks and review best practices for quantization-aware training to obtain high accuracy with quantized weights and activations. We recommend that per-channel quantization of weights and per-layer quantization of activations be the preferred quantization scheme for hardware acceleration and kernel optimization. We also propose that future processors and hardware accelerators for optimized inference support precisions of 4, 8 and 16 bits."
            },
            "slug": "Quantizing-deep-convolutional-networks-for-A-Krishnamoorthi",
            "title": {
                "fragments": [],
                "text": "Quantizing deep convolutional networks for efficient inference: A whitepaper"
            },
            "tldr": {
                "abstractSimilarityScore": 72,
                "text": "An overview of techniques for quantizing convolutional neural networks for inference with integer weights and activations is presented and it is recommended that per-channel quantization of weights and per-layer quantized of activations be the preferred quantization scheme for hardware acceleration and kernel optimization."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1913774"
                        ],
                        "name": "Tianqi Chen",
                        "slug": "Tianqi-Chen",
                        "structuredName": {
                            "firstName": "Tianqi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianqi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2124778071"
                        ],
                        "name": "Mu Li",
                        "slug": "Mu-Li",
                        "structuredName": {
                            "firstName": "Mu",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mu Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2110420880"
                        ],
                        "name": "Yutian Li",
                        "slug": "Yutian-Li",
                        "structuredName": {
                            "firstName": "Yutian",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yutian Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1491081747"
                        ],
                        "name": "Min Lin",
                        "slug": "Min-Lin",
                        "structuredName": {
                            "firstName": "Min",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Min Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48246959"
                        ],
                        "name": "Naiyan Wang",
                        "slug": "Naiyan-Wang",
                        "structuredName": {
                            "firstName": "Naiyan",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Naiyan Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1508337194"
                        ],
                        "name": "Minjie Wang",
                        "slug": "Minjie-Wang",
                        "structuredName": {
                            "firstName": "Minjie",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Minjie Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39102205"
                        ],
                        "name": "Tianjun Xiao",
                        "slug": "Tianjun-Xiao",
                        "structuredName": {
                            "firstName": "Tianjun",
                            "lastName": "Xiao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianjun Xiao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2113742783"
                        ],
                        "name": "Bing Xu",
                        "slug": "Bing-Xu",
                        "structuredName": {
                            "firstName": "Bing",
                            "lastName": "Xu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bing Xu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "151505981"
                        ],
                        "name": "Chiyuan Zhang",
                        "slug": "Chiyuan-Zhang",
                        "structuredName": {
                            "firstName": "Chiyuan",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chiyuan Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38448016"
                        ],
                        "name": "Zheng Zhang",
                        "slug": "Zheng-Zhang",
                        "structuredName": {
                            "firstName": "Zheng",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zheng Zhang"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 93,
                                "start": 88
                            }
                        ],
                        "text": "Relay achieves performance on par with NNVM and outperforms TensorFlow, TensorFlow-XLA, MxNet, and PyTorch on every benchmark."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 14,
                                "start": 9
                            }
                        ],
                        "text": "However, MxNet outperforms Relay on the Gluon RNN, because it uses a hardcoded optimization to unroll the RNN, whereas Relay expresses it as a loop without any unrolling."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 38,
                                "start": 33
                            }
                        ],
                        "text": "Finally an approach adopted from MxNet uses a KLdivergence based loss to optimize the quantization scales."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 254,
                                "start": 249
                            }
                        ],
                        "text": "A user can build an in-memory representation of a program in C++ or Python, parse one written in the Relay text format, load one from the on-disk serialization format, or import one from popular frameworks and interchange formats (e.g., TensorFlow, MxNet, Keras, DarkNet, and ONNX)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 102,
                                "start": 97
                            }
                        ],
                        "text": "We compared Relay to NNVM, TensorFlow, TensorFlow-XLA (Accelerated Linear Algebra), PyTorch, and MxNet."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 108,
                                "start": 103
                            }
                        ],
                        "text": "We used the following software versions: CUDA version 10.0, CuDNN version 7.5.0, TVM commit e518fe1c3, MxNet version 1.5.0, PyTorch version 1.2.0, and TensorFlow version 1.14.0."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 49,
                                "start": 44
                            }
                        ],
                        "text": "3NLP experiments required extensions to the MxNet importer that will be made public later\nNLP Evaluation Implementations of the NLP models were not available in all frameworks; we used MxNet baselines for RNN, GRU, and LSTM and PyTorch for CharRNN and TreeLSTM."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 32,
                                "start": 27
                            }
                        ],
                        "text": "Relay performs better than MxNet on GRU and LSTM because they are implemented in Python using MxNet\u2019s looping constructs."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 224,
                                "start": 221
                            }
                        ],
                        "text": "Large technology companies, such as Google, Facebook, and Amazon, drive the development of frameworks, and consequently, each company has its own stack consisting of the core framework (TensorFlow [1], PyTorch [8], MxNet [6]), compilers(XLA [55], Glow [38], TVM [7]), and hardware accelerators (TPU [20], GraphCore, Inferentia [2])."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 75,
                                "start": 70
                            }
                        ],
                        "text": "The dominant platforms for deep learning are TensorFlow, PyTorch, and MxNet."
                    },
                    "intents": []
                }
            ],
            "corpusId": 1507815,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "62df84d6a4d26f95e4714796c2337c9848cc13b5",
            "isKey": false,
            "numCitedBy": 1891,
            "numCiting": 16,
            "paperAbstract": {
                "fragments": [],
                "text": "MXNet is a multi-language machine learning (ML) library to ease the development of ML algorithms, especially for deep neural networks. Embedded in the host language, it blends declarative symbolic expression with imperative tensor computation. It offers auto differentiation to derive gradients. MXNet is computation and memory efficient and runs on various heterogeneous systems, ranging from mobile devices to distributed GPU clusters. \nThis paper describes both the API design and the system implementation of MXNet, and explains how embedding of both symbolic expression and tensor operation is handled in a unified fashion. Our preliminary experiments reveal promising results on large scale deep neural network applications using multiple GPU machines."
            },
            "slug": "MXNet:-A-Flexible-and-Efficient-Machine-Learning-Chen-Li",
            "title": {
                "fragments": [],
                "text": "MXNet: A Flexible and Efficient Machine Learning Library for Heterogeneous Distributed Systems"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "The API design and the system implementation of MXNet are described, and it is explained how embedding of both symbolic expression and tensor operation is handled in a unified fashion."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057642721"
                        ],
                        "name": "Mart\u00edn Abadi",
                        "slug": "Mart\u00edn-Abadi",
                        "structuredName": {
                            "firstName": "Mart\u00edn",
                            "lastName": "Abadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mart\u00edn Abadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144758007"
                        ],
                        "name": "P. Barham",
                        "slug": "P.-Barham",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Barham",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Barham"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2108406634"
                        ],
                        "name": "Jianmin Chen",
                        "slug": "Jianmin-Chen",
                        "structuredName": {
                            "firstName": "Jianmin",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jianmin Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2545358"
                        ],
                        "name": "Z. Chen",
                        "slug": "Z.-Chen",
                        "structuredName": {
                            "firstName": "Z.",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Z. Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "36347083"
                        ],
                        "name": "Andy Davis",
                        "slug": "Andy-Davis",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Davis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Davis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49959210"
                        ],
                        "name": "J. Dean",
                        "slug": "J.-Dean",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Dean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Dean"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145139947"
                        ],
                        "name": "Matthieu Devin",
                        "slug": "Matthieu-Devin",
                        "structuredName": {
                            "firstName": "Matthieu",
                            "lastName": "Devin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matthieu Devin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1780892"
                        ],
                        "name": "S. Ghemawat",
                        "slug": "S.-Ghemawat",
                        "structuredName": {
                            "firstName": "Sanjay",
                            "lastName": "Ghemawat",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Ghemawat"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060655766"
                        ],
                        "name": "Geoffrey Irving",
                        "slug": "Geoffrey-Irving",
                        "structuredName": {
                            "firstName": "Geoffrey",
                            "lastName": "Irving",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Geoffrey Irving"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2090818"
                        ],
                        "name": "M. Isard",
                        "slug": "M.-Isard",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Isard",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Isard"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1942300"
                        ],
                        "name": "M. Kudlur",
                        "slug": "M.-Kudlur",
                        "structuredName": {
                            "firstName": "Manjunath",
                            "lastName": "Kudlur",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Kudlur"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3369421"
                        ],
                        "name": "J. Levenberg",
                        "slug": "J.-Levenberg",
                        "structuredName": {
                            "firstName": "Josh",
                            "lastName": "Levenberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Levenberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3089272"
                        ],
                        "name": "R. Monga",
                        "slug": "R.-Monga",
                        "structuredName": {
                            "firstName": "Rajat",
                            "lastName": "Monga",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Monga"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144375552"
                        ],
                        "name": "Sherry Moore",
                        "slug": "Sherry-Moore",
                        "structuredName": {
                            "firstName": "Sherry",
                            "lastName": "Moore",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sherry Moore"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "20154699"
                        ],
                        "name": "D. Murray",
                        "slug": "D.-Murray",
                        "structuredName": {
                            "firstName": "Derek",
                            "lastName": "Murray",
                            "middleNames": [
                                "Gordon"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Murray"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32163737"
                        ],
                        "name": "Benoit Steiner",
                        "slug": "Benoit-Steiner",
                        "structuredName": {
                            "firstName": "Benoit",
                            "lastName": "Steiner",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Benoit Steiner"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2080690"
                        ],
                        "name": "P. Tucker",
                        "slug": "P.-Tucker",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Tucker",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Tucker"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2053781980"
                        ],
                        "name": "Vijay Vasudevan",
                        "slug": "Vijay-Vasudevan",
                        "structuredName": {
                            "firstName": "Vijay",
                            "lastName": "Vasudevan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vijay Vasudevan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47941411"
                        ],
                        "name": "P. Warden",
                        "slug": "P.-Warden",
                        "structuredName": {
                            "firstName": "Pete",
                            "lastName": "Warden",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Warden"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35078078"
                        ],
                        "name": "M. Wicke",
                        "slug": "M.-Wicke",
                        "structuredName": {
                            "firstName": "Martin",
                            "lastName": "Wicke",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Wicke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2117163698"
                        ],
                        "name": "Yuan Yu",
                        "slug": "Yuan-Yu",
                        "structuredName": {
                            "firstName": "Yuan",
                            "lastName": "Yu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yuan Yu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2144533795"
                        ],
                        "name": "Xiaoqiang Zhang",
                        "slug": "Xiaoqiang-Zhang",
                        "structuredName": {
                            "firstName": "Xiaoqiang",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xiaoqiang Zhang"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 200,
                                "start": 197
                            }
                        ],
                        "text": "Large technology companies, such as Google, Facebook, and Amazon, drive the development of frameworks, and consequently, each company has its own stack consisting of the core framework (TensorFlow [1], PyTorch [8], MxNet [6]), compilers(XLA [55], Glow [38], TVM [7]), and hardware accelerators (TPU [20], GraphCore, Inferentia [2])."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 156,
                                "start": 134
                            }
                        ],
                        "text": "Popular DL compiler intermediate representations (IRs) offer different tradeoffs between expressivity, composability, and portability [1, 33, 50, 52, 5, 38]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 171,
                                "start": 165
                            }
                        ],
                        "text": "TF\u2019s representation captures many state-of-the-art models, provides support for heterogeneous hardware back-ends, and enables reverse-mode automatic differentiation [4, 1]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 6287870,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "46200b99c40e8586c8a0f588488ab6414119fb28",
            "isKey": false,
            "numCitedBy": 12805,
            "numCiting": 111,
            "paperAbstract": {
                "fragments": [],
                "text": "TensorFlow is a machine learning system that operates at large scale and in heterogeneous environments. Tensor-Flow uses dataflow graphs to represent computation, shared state, and the operations that mutate that state. It maps the nodes of a dataflow graph across many machines in a cluster, and within a machine across multiple computational devices, including multicore CPUs, general-purpose GPUs, and custom-designed ASICs known as Tensor Processing Units (TPUs). This architecture gives flexibility to the application developer: whereas in previous \"parameter server\" designs the management of shared state is built into the system, TensorFlow enables developers to experiment with novel optimizations and training algorithms. TensorFlow supports a variety of applications, with a focus on training and inference on deep neural networks. Several Google services use TensorFlow in production, we have released it as an open-source project, and it has become widely used for machine learning research. In this paper, we describe the TensorFlow dataflow model and demonstrate the compelling performance that TensorFlow achieves for several real-world applications."
            },
            "slug": "TensorFlow:-A-system-for-large-scale-machine-Abadi-Barham",
            "title": {
                "fragments": [],
                "text": "TensorFlow: A system for large-scale machine learning"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "The TensorFlow dataflow model is described and the compelling performance that Tensor Flow achieves for several real-world applications is demonstrated."
            },
            "venue": {
                "fragments": [],
                "text": "OSDI"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32837403"
                        ],
                        "name": "J. Bergstra",
                        "slug": "J.-Bergstra",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Bergstra",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Bergstra"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1967465"
                        ],
                        "name": "Olivier Breuleux",
                        "slug": "Olivier-Breuleux",
                        "structuredName": {
                            "firstName": "Olivier",
                            "lastName": "Breuleux",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Olivier Breuleux"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3227028"
                        ],
                        "name": "Fr\u00e9d\u00e9ric Bastien",
                        "slug": "Fr\u00e9d\u00e9ric-Bastien",
                        "structuredName": {
                            "firstName": "Fr\u00e9d\u00e9ric",
                            "lastName": "Bastien",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fr\u00e9d\u00e9ric Bastien"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3087941"
                        ],
                        "name": "Pascal Lamblin",
                        "slug": "Pascal-Lamblin",
                        "structuredName": {
                            "firstName": "Pascal",
                            "lastName": "Lamblin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pascal Lamblin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1996134"
                        ],
                        "name": "Razvan Pascanu",
                        "slug": "Razvan-Pascanu",
                        "structuredName": {
                            "firstName": "Razvan",
                            "lastName": "Pascanu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Razvan Pascanu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2755582"
                        ],
                        "name": "Guillaume Desjardins",
                        "slug": "Guillaume-Desjardins",
                        "structuredName": {
                            "firstName": "Guillaume",
                            "lastName": "Desjardins",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Guillaume Desjardins"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153160559"
                        ],
                        "name": "Joseph P. Turian",
                        "slug": "Joseph-P.-Turian",
                        "structuredName": {
                            "firstName": "Joseph",
                            "lastName": "Turian",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Joseph P. Turian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1393680089"
                        ],
                        "name": "David Warde-Farley",
                        "slug": "David-Warde-Farley",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Warde-Farley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David Warde-Farley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751762"
                        ],
                        "name": "Yoshua Bengio",
                        "slug": "Yoshua-Bengio",
                        "structuredName": {
                            "firstName": "Yoshua",
                            "lastName": "Bengio",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yoshua Bengio"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 156,
                                "start": 134
                            }
                        ],
                        "text": "Popular DL compiler intermediate representations (IRs) offer different tradeoffs between expressivity, composability, and portability [1, 33, 50, 52, 5, 38]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 106,
                                "start": 103
                            }
                        ],
                        "text": "In order to accelerate model execution, frameworks supporting accelerators such as GPU were introduced [5] ."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 64,
                                "start": 61
                            }
                        ],
                        "text": "Define-And-Run Frameworks TensorFlow, Caffe [19], and Theano [5] are define-and-run frameworks."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 67,
                                "start": 64
                            }
                        ],
                        "text": "%while_loop(meta[Constant][3], meta[Constant][4], meta[Constant][5])"
                    },
                    "intents": []
                }
            ],
            "corpusId": 3183121,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "63936fa32f9e75ab2a864daae6791ce02112183d",
            "isKey": true,
            "numCitedBy": 826,
            "numCiting": 17,
            "paperAbstract": {
                "fragments": [],
                "text": "Theano is a compiler for mathematical expressions in Python that combines the convenience of NumPy's syntax with the speed of optimized native machine language. The user composes mathematical expressions in a high-level description that mimics NumPy's syntax and semantics, while being statically typed and functional (as opposed to imperative). These expressions allow Theano to provide symbolic differentiation. Before performing computation, Theano optimizes the choice of expressions, translates them into C++ (or CUDA for GPU), compiles them into dynamically loaded Python modules, all automatically. Common machine learn- ing algorithms implemented with Theano are from 1:6 to 7:5 faster than competitive alternatives (including those implemented with C/C++, NumPy/SciPy and MATLAB) when compiled for the CPU and between 6:5 and 44 faster when compiled for the GPU. This paper illustrates how to use Theano, outlines the scope of the compiler, provides benchmarks on both CPU and GPU processors, and explains its overall design."
            },
            "slug": "Theano:-A-CPU-and-GPU-Math-Compiler-in-Python-Bergstra-Breuleux",
            "title": {
                "fragments": [],
                "text": "Theano: A CPU and GPU Math Compiler in Python"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This paper illustrates how to use Theano, outlines the scope of the compiler, provides benchmarks on both CPU and GPU processors, and explains its overall design."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2434898"
                        ],
                        "name": "M. Looks",
                        "slug": "M.-Looks",
                        "structuredName": {
                            "firstName": "Moshe",
                            "lastName": "Looks",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Looks"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1881346"
                        ],
                        "name": "Marcello Herreshoff",
                        "slug": "Marcello-Herreshoff",
                        "structuredName": {
                            "firstName": "Marcello",
                            "lastName": "Herreshoff",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Marcello Herreshoff"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32913644"
                        ],
                        "name": "DeLesley S. Hutchins",
                        "slug": "DeLesley-S.-Hutchins",
                        "structuredName": {
                            "firstName": "DeLesley",
                            "lastName": "Hutchins",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "DeLesley S. Hutchins"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2784519"
                        ],
                        "name": "Peter Norvig",
                        "slug": "Peter-Norvig",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Norvig",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Peter Norvig"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 126,
                                "start": 111
                            }
                        ],
                        "text": "Unfortunately, current frameworks\u2019 IRs cannot directly encode trees, so she must use a framework extension like TensorFlow Fold [26]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 33,
                                "start": 29
                            }
                        ],
                        "text": "For example, TensorFlow Fold [27] extends TF with special combinators that dynamically compute a graph for each shape permutation; these high-level constructs are opaque to further optimizations."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 15,
                                "start": 0
                            }
                        ],
                        "text": "TensorFlow Fold addresses this particular limitation [26] but offers no general and extensible solution."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 79
                            }
                        ],
                        "text": "As a result, nontrivial extensions require patching or even forking frameworks [27, 47, 52, 41, 55, 38, 51]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 5144625,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "08d2bae3ddf44d67b9b192a6ff26e954192e4806",
            "isKey": true,
            "numCitedBy": 107,
            "numCiting": 22,
            "paperAbstract": {
                "fragments": [],
                "text": "Neural networks that compute over graph structures are a natural fit for problems in a variety of domains, including natural language (parse trees) and cheminformatics (molecular graphs). However, since the computation graph has a different shape and size for every input, such networks do not directly support batched training or inference. They are also difficult to implement in popular deep learning libraries, which are based on static data-flow graphs. We introduce a technique called dynamic batching, which not only batches together operations between different input graphs of dissimilar shape, but also between different nodes within a single input graph. The technique allows us to create static graphs, using popular libraries, that emulate dynamic computation graphs of arbitrary shape and size. We further present a high-level library of compositional blocks that simplifies the creation of dynamic graph models. Using the library, we demonstrate concise and batch-wise parallel implementations for a variety of models from the literature."
            },
            "slug": "Deep-Learning-with-Dynamic-Computation-Graphs-Looks-Herreshoff",
            "title": {
                "fragments": [],
                "text": "Deep Learning with Dynamic Computation Graphs"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This work introduces a technique called dynamic batching, which not only batches together operations between different input graphs of dissimilar shape, but also between different nodes within a single input graph."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47108160"
                        ],
                        "name": "T. Moreau",
                        "slug": "T.-Moreau",
                        "structuredName": {
                            "firstName": "Thierry",
                            "lastName": "Moreau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Moreau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1913774"
                        ],
                        "name": "Tianqi Chen",
                        "slug": "Tianqi-Chen",
                        "structuredName": {
                            "firstName": "Tianqi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianqi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2056461631"
                        ],
                        "name": "Luis Vega",
                        "slug": "Luis-Vega",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Vega",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luis Vega"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "24961975"
                        ],
                        "name": "Jared Roesch",
                        "slug": "Jared-Roesch",
                        "structuredName": {
                            "firstName": "Jared",
                            "lastName": "Roesch",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jared Roesch"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2621619"
                        ],
                        "name": "Eddie Q. Yan",
                        "slug": "Eddie-Q.-Yan",
                        "structuredName": {
                            "firstName": "Eddie",
                            "lastName": "Yan",
                            "middleNames": [
                                "Q."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eddie Q. Yan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2149970173"
                        ],
                        "name": "Lianmin Zheng",
                        "slug": "Lianmin-Zheng",
                        "structuredName": {
                            "firstName": "Lianmin",
                            "lastName": "Zheng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lianmin Zheng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "71908954"
                        ],
                        "name": "Josh Fromm",
                        "slug": "Josh-Fromm",
                        "structuredName": {
                            "firstName": "Josh",
                            "lastName": "Fromm",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Josh Fromm"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1732910"
                        ],
                        "name": "Ziheng Jiang",
                        "slug": "Ziheng-Jiang",
                        "structuredName": {
                            "firstName": "Ziheng",
                            "lastName": "Jiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ziheng Jiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1717411"
                        ],
                        "name": "L. Ceze",
                        "slug": "L.-Ceze",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Ceze",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Ceze"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1730156"
                        ],
                        "name": "Carlos Guestrin",
                        "slug": "Carlos-Guestrin",
                        "structuredName": {
                            "firstName": "Carlos",
                            "lastName": "Guestrin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Carlos Guestrin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144695691"
                        ],
                        "name": "A. Krishnamurthy",
                        "slug": "A.-Krishnamurthy",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Krishnamurthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Krishnamurthy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 128358750,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "bfc64adf0f3642e427529962affa4c4c39f14794",
            "isKey": false,
            "numCitedBy": 55,
            "numCiting": 14,
            "paperAbstract": {
                "fragments": [],
                "text": "This article describes the Versatile Tensor Accelerator (VTA), a programmable DL architecture designed to be extensible in the face of evolving workloads. VTA achieves \u201cflexible specialization\u201d via a parameterizable architecture, two-level Instruction Set Architecture (ISA), and a Just in Time (JIT) compiler."
            },
            "slug": "A-Hardware\u2013Software-Blueprint-for-Flexible-Deep-Moreau-Chen",
            "title": {
                "fragments": [],
                "text": "A Hardware\u2013Software Blueprint for Flexible Deep Learning Specialization"
            },
            "tldr": {
                "abstractSimilarityScore": 50,
                "text": "The Versatile Tensor Accelerator achieves \u201cflexible specialization\u201d via a parameterizable architecture, two-level Instruction Set Architecture (ISA), and a Just in Time (JIT) compiler."
            },
            "venue": {
                "fragments": [],
                "text": "IEEE Micro"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1715454"
                        ],
                        "name": "N. Jouppi",
                        "slug": "N.-Jouppi",
                        "structuredName": {
                            "firstName": "Norman",
                            "lastName": "Jouppi",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Jouppi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39660914"
                        ],
                        "name": "C. Young",
                        "slug": "C.-Young",
                        "structuredName": {
                            "firstName": "Cliff",
                            "lastName": "Young",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Young"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2056800684"
                        ],
                        "name": "Nishant Patil",
                        "slug": "Nishant-Patil",
                        "structuredName": {
                            "firstName": "Nishant",
                            "lastName": "Patil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nishant Patil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2052996328"
                        ],
                        "name": "David A. Patterson",
                        "slug": "David-A.-Patterson",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Patterson",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David A. Patterson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1839673849"
                        ],
                        "name": "Gaurav Agrawal",
                        "slug": "Gaurav-Agrawal",
                        "structuredName": {
                            "firstName": "Gaurav",
                            "lastName": "Agrawal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gaurav Agrawal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39892484"
                        ],
                        "name": "R. Bajwa",
                        "slug": "R.-Bajwa",
                        "structuredName": {
                            "firstName": "Raminder",
                            "lastName": "Bajwa",
                            "middleNames": [
                                "Singh"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Bajwa"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057224801"
                        ],
                        "name": "Sarah Bates",
                        "slug": "Sarah-Bates",
                        "structuredName": {
                            "firstName": "Sarah",
                            "lastName": "Bates",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sarah Bates"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2125285255"
                        ],
                        "name": "Suresh Bhatia",
                        "slug": "Suresh-Bhatia",
                        "structuredName": {
                            "firstName": "Suresh",
                            "lastName": "Bhatia",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Suresh Bhatia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35750774"
                        ],
                        "name": "N. Boden",
                        "slug": "N.-Boden",
                        "structuredName": {
                            "firstName": "Nanette",
                            "lastName": "Boden",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Boden"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1394297183"
                        ],
                        "name": "Al Borchers",
                        "slug": "Al-Borchers",
                        "structuredName": {
                            "firstName": "Al",
                            "lastName": "Borchers",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Al Borchers"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060002570"
                        ],
                        "name": "Rick Boyle",
                        "slug": "Rick-Boyle",
                        "structuredName": {
                            "firstName": "Rick",
                            "lastName": "Boyle",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Rick Boyle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065727960"
                        ],
                        "name": "Pierre-luc Cantin",
                        "slug": "Pierre-luc-Cantin",
                        "structuredName": {
                            "firstName": "Pierre-luc",
                            "lastName": "Cantin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pierre-luc Cantin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1629772869"
                        ],
                        "name": "Clifford Chao",
                        "slug": "Clifford-Chao",
                        "structuredName": {
                            "firstName": "Clifford",
                            "lastName": "Chao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Clifford Chao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2113263549"
                        ],
                        "name": "Chris Clark",
                        "slug": "Chris-Clark",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Clark",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Clark"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213025"
                        ],
                        "name": "Jeremy Coriell",
                        "slug": "Jeremy-Coriell",
                        "structuredName": {
                            "firstName": "Jeremy",
                            "lastName": "Coriell",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jeremy Coriell"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2061461417"
                        ],
                        "name": "Mike Daley",
                        "slug": "Mike-Daley",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Daley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mike Daley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153358157"
                        ],
                        "name": "Matt Dau",
                        "slug": "Matt-Dau",
                        "structuredName": {
                            "firstName": "Matt",
                            "lastName": "Dau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matt Dau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49959210"
                        ],
                        "name": "J. Dean",
                        "slug": "J.-Dean",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Dean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Dean"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1394723585"
                        ],
                        "name": "Ben Gelb",
                        "slug": "Ben-Gelb",
                        "structuredName": {
                            "firstName": "Ben",
                            "lastName": "Gelb",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ben Gelb"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213038"
                        ],
                        "name": "T. Ghaemmaghami",
                        "slug": "T.-Ghaemmaghami",
                        "structuredName": {
                            "firstName": "Tara",
                            "lastName": "Ghaemmaghami",
                            "middleNames": [
                                "Vazir"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Ghaemmaghami"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40301682"
                        ],
                        "name": "R. Gottipati",
                        "slug": "R.-Gottipati",
                        "structuredName": {
                            "firstName": "Rajendra",
                            "lastName": "Gottipati",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Gottipati"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213045"
                        ],
                        "name": "William Gulland",
                        "slug": "William-Gulland",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Gulland",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William Gulland"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2330986"
                        ],
                        "name": "R. Hagmann",
                        "slug": "R.-Hagmann",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Hagmann",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Hagmann"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2148846139"
                        ],
                        "name": "C. R. Ho",
                        "slug": "C.-R.-Ho",
                        "structuredName": {
                            "firstName": "C.",
                            "lastName": "Ho",
                            "middleNames": [
                                "Richard"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. R. Ho"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1629763752"
                        ],
                        "name": "Doug Hogberg",
                        "slug": "Doug-Hogberg",
                        "structuredName": {
                            "firstName": "Doug",
                            "lastName": "Hogberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Doug Hogberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49268145"
                        ],
                        "name": "John Hu",
                        "slug": "John-Hu",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Hu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "John Hu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1701671"
                        ],
                        "name": "R. Hundt",
                        "slug": "R.-Hundt",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Hundt",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Hundt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38786988"
                        ],
                        "name": "D. Hurt",
                        "slug": "D.-Hurt",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Hurt",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Hurt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46920727"
                        ],
                        "name": "Julian Ibarz",
                        "slug": "Julian-Ibarz",
                        "structuredName": {
                            "firstName": "Julian",
                            "lastName": "Ibarz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Julian Ibarz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "10433955"
                        ],
                        "name": "A. Jaffey",
                        "slug": "A.-Jaffey",
                        "structuredName": {
                            "firstName": "Aaron",
                            "lastName": "Jaffey",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Jaffey"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064306865"
                        ],
                        "name": "Alek Jaworski",
                        "slug": "Alek-Jaworski",
                        "structuredName": {
                            "firstName": "Alek",
                            "lastName": "Jaworski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alek Jaworski"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064354536"
                        ],
                        "name": "Alexander Kaplan",
                        "slug": "Alexander-Kaplan",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Kaplan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander Kaplan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398212995"
                        ],
                        "name": "Harshit Khaitan",
                        "slug": "Harshit-Khaitan",
                        "structuredName": {
                            "firstName": "Harshit",
                            "lastName": "Khaitan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Harshit Khaitan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35002044"
                        ],
                        "name": "Daniel Killebrew",
                        "slug": "Daniel-Killebrew",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Killebrew",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Killebrew"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1406011741"
                        ],
                        "name": "A. Koch",
                        "slug": "A.-Koch",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Koch",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Koch"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2116960562"
                        ],
                        "name": "Naveen Kumar",
                        "slug": "Naveen-Kumar",
                        "structuredName": {
                            "firstName": "Naveen",
                            "lastName": "Kumar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Naveen Kumar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40476752"
                        ],
                        "name": "Steve Lacy",
                        "slug": "Steve-Lacy",
                        "structuredName": {
                            "firstName": "Steve",
                            "lastName": "Lacy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Steve Lacy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2926266"
                        ],
                        "name": "J. Laudon",
                        "slug": "J.-Laudon",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Laudon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Laudon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057766961"
                        ],
                        "name": "James Law",
                        "slug": "James-Law",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Law",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James Law"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1397916881"
                        ],
                        "name": "Diemthu Le",
                        "slug": "Diemthu-Le",
                        "structuredName": {
                            "firstName": "Diemthu",
                            "lastName": "Le",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Diemthu Le"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3362246"
                        ],
                        "name": "Chris Leary",
                        "slug": "Chris-Leary",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Leary",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Leary"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2144265117"
                        ],
                        "name": "Zhuyuan Liu",
                        "slug": "Zhuyuan-Liu",
                        "structuredName": {
                            "firstName": "Zhuyuan",
                            "lastName": "Liu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zhuyuan Liu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49432518"
                        ],
                        "name": "Kyle A. Lucke",
                        "slug": "Kyle-A.-Lucke",
                        "structuredName": {
                            "firstName": "Kyle",
                            "lastName": "Lucke",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kyle A. Lucke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1397991868"
                        ],
                        "name": "Alan Lundin",
                        "slug": "Alan-Lundin",
                        "structuredName": {
                            "firstName": "Alan",
                            "lastName": "Lundin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alan Lundin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213046"
                        ],
                        "name": "G. MacKean",
                        "slug": "G.-MacKean",
                        "structuredName": {
                            "firstName": "Gordon",
                            "lastName": "MacKean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. MacKean"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1973715"
                        ],
                        "name": "A. Maggiore",
                        "slug": "A.-Maggiore",
                        "structuredName": {
                            "firstName": "Adriana",
                            "lastName": "Maggiore",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Maggiore"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2105943261"
                        ],
                        "name": "Maire Mahony",
                        "slug": "Maire-Mahony",
                        "structuredName": {
                            "firstName": "Maire",
                            "lastName": "Mahony",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Maire Mahony"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50092571"
                        ],
                        "name": "K. Miller",
                        "slug": "K.-Miller",
                        "structuredName": {
                            "firstName": "Kieran",
                            "lastName": "Miller",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Miller"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1395811464"
                        ],
                        "name": "R. Nagarajan",
                        "slug": "R.-Nagarajan",
                        "structuredName": {
                            "firstName": "Rahul",
                            "lastName": "Nagarajan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Nagarajan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213032"
                        ],
                        "name": "Ravi Narayanaswami",
                        "slug": "Ravi-Narayanaswami",
                        "structuredName": {
                            "firstName": "Ravi",
                            "lastName": "Narayanaswami",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ravi Narayanaswami"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1393195759"
                        ],
                        "name": "Ray Ni",
                        "slug": "Ray-Ni",
                        "structuredName": {
                            "firstName": "Ray",
                            "lastName": "Ni",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ray Ni"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213062"
                        ],
                        "name": "K. Nix",
                        "slug": "K.-Nix",
                        "structuredName": {
                            "firstName": "Kathy",
                            "lastName": "Nix",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Nix"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3222376"
                        ],
                        "name": "Thomas Norrie",
                        "slug": "Thomas-Norrie",
                        "structuredName": {
                            "firstName": "Thomas",
                            "lastName": "Norrie",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Thomas Norrie"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3175815"
                        ],
                        "name": "Mark Omernick",
                        "slug": "Mark-Omernick",
                        "structuredName": {
                            "firstName": "Mark",
                            "lastName": "Omernick",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mark Omernick"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398212990"
                        ],
                        "name": "Narayana Penukonda",
                        "slug": "Narayana-Penukonda",
                        "structuredName": {
                            "firstName": "Narayana",
                            "lastName": "Penukonda",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Narayana Penukonda"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064991162"
                        ],
                        "name": "Andy Phelps",
                        "slug": "Andy-Phelps",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Phelps",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Phelps"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2116470453"
                        ],
                        "name": "Jonathan Ross",
                        "slug": "Jonathan-Ross",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ross",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ross"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2068076326"
                        ],
                        "name": "Matt Ross",
                        "slug": "Matt-Ross",
                        "structuredName": {
                            "firstName": "Matt",
                            "lastName": "Ross",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matt Ross"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144717532"
                        ],
                        "name": "Amir Salek",
                        "slug": "Amir-Salek",
                        "structuredName": {
                            "firstName": "Amir",
                            "lastName": "Salek",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Amir Salek"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9364218"
                        ],
                        "name": "E. Samadiani",
                        "slug": "E.-Samadiani",
                        "structuredName": {
                            "firstName": "Emad",
                            "lastName": "Samadiani",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Samadiani"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1395804389"
                        ],
                        "name": "C. Severn",
                        "slug": "C.-Severn",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Severn",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Severn"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2473816"
                        ],
                        "name": "G. Sizikov",
                        "slug": "G.-Sizikov",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Sizikov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Sizikov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398212969"
                        ],
                        "name": "Matthew Snelham",
                        "slug": "Matthew-Snelham",
                        "structuredName": {
                            "firstName": "Matthew",
                            "lastName": "Snelham",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matthew Snelham"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2144885096"
                        ],
                        "name": "Jed Souter",
                        "slug": "Jed-Souter",
                        "structuredName": {
                            "firstName": "Jed",
                            "lastName": "Souter",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jed Souter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39566019"
                        ],
                        "name": "D. Steinberg",
                        "slug": "D.-Steinberg",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Steinberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Steinberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1394189636"
                        ],
                        "name": "Andy Swing",
                        "slug": "Andy-Swing",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Swing",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Swing"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1393173244"
                        ],
                        "name": "Mercedes Tan",
                        "slug": "Mercedes-Tan",
                        "structuredName": {
                            "firstName": "Mercedes",
                            "lastName": "Tan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mercedes Tan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48930610"
                        ],
                        "name": "G. Thorson",
                        "slug": "G.-Thorson",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Thorson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Thorson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064522407"
                        ],
                        "name": "Bo Tian",
                        "slug": "Bo-Tian",
                        "structuredName": {
                            "firstName": "Bo",
                            "lastName": "Tian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bo Tian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50042144"
                        ],
                        "name": "H. Toma",
                        "slug": "H.-Toma",
                        "structuredName": {
                            "firstName": "Horia",
                            "lastName": "Toma",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Toma"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1397585416"
                        ],
                        "name": "Erick Tuttle",
                        "slug": "Erick-Tuttle",
                        "structuredName": {
                            "firstName": "Erick",
                            "lastName": "Tuttle",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Erick Tuttle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2053781980"
                        ],
                        "name": "Vijay Vasudevan",
                        "slug": "Vijay-Vasudevan",
                        "structuredName": {
                            "firstName": "Vijay",
                            "lastName": "Vasudevan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vijay Vasudevan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060269562"
                        ],
                        "name": "Richard Walter",
                        "slug": "Richard-Walter",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Walter",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Richard Walter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2108459300"
                        ],
                        "name": "Walter Wang",
                        "slug": "Walter-Wang",
                        "structuredName": {
                            "firstName": "Walter",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Walter Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064779797"
                        ],
                        "name": "Eric Wilcox",
                        "slug": "Eric-Wilcox",
                        "structuredName": {
                            "firstName": "Eric",
                            "lastName": "Wilcox",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eric Wilcox"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1712426"
                        ],
                        "name": "D. Yoon",
                        "slug": "D.-Yoon",
                        "structuredName": {
                            "firstName": "Doe",
                            "lastName": "Yoon",
                            "middleNames": [
                                "Hyun"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Yoon"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 303,
                                "start": 299
                            }
                        ],
                        "text": "Large technology companies, such as Google, Facebook, and Amazon, drive the development of frameworks, and consequently, each company has its own stack consisting of the core framework (TensorFlow [1], PyTorch [8], MxNet [6]), compilers(XLA [55], Glow [38], TVM [7]), and hardware accelerators (TPU [20], GraphCore, Inferentia [2])."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 4202768,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "2dfeb5a90abc49ab2a80a492a01a4e2c8e92ec22",
            "isKey": false,
            "numCitedBy": 2951,
            "numCiting": 119,
            "paperAbstract": {
                "fragments": [],
                "text": "Many architects believe that major improvements in cost-energy-performance must now come from domain-specific hardware. This paper evaluates a custom ASIC-called a Tensor Processing Unit (TPU)-deployed in datacenters since 2015 that accelerates the inference phase of neural networks (NN). The heart of the TPU is a 65,536 8-bit MAC matrix multiply unit that offers a peak throughput of 92 TeraOps/second (TOPS) and a large (28 MiB) software-managed on-chip memory. The TPU's deterministic execution model is a better match to the 99th-percentile response-time requirement of our NN applications than are the time-varying optimizations of CPUs and GPUs that help average throughput more than guaranteed latency. The lack of such features helps explain why, despite having myriad MACs and a big memory, the TPU is relatively small and low power. We compare the TPU to a server-class Intel Haswell CPU and an Nvidia K80 GPU, which are contemporaries deployed in the same datacenters. Our workload, written in the high-level TensorFlow framework, uses production NN applications (MLPs, CNNs, and LSTMs) that represent 95% of our datacenters' NN inference demand. Despite low utilization for some applications, the TPU is on average about 15X\u201330X faster than its contemporary GPU or CPU, with TOPS/Watt about 30X\u201380X higher. Moreover, using the GPU's GDDR5 memory in the TPU would triple achieved TOPS and raise TOPS/Watt to nearly 70X the GPU and 200X the CPU."
            },
            "slug": "In-datacenter-performance-analysis-of-a-tensor-unit-Jouppi-Young",
            "title": {
                "fragments": [],
                "text": "In-datacenter performance analysis of a tensor processing unit"
            },
            "tldr": {
                "abstractSimilarityScore": 59,
                "text": "This paper evaluates a custom ASIC-called a Tensor Processing Unit (TPU)-deployed in datacenters since 2015 that accelerates the inference phase of neural networks (NN) and compares it to a server-class Intel Haswell CPU and an Nvidia K80 GPU, which are contemporaries deployed in the samedatacenters."
            },
            "venue": {
                "fragments": [],
                "text": "2017 ACM/IEEE 44th Annual International Symposium on Computer Architecture (ISCA)"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3407277"
                        ],
                        "name": "Adam Paszke",
                        "slug": "Adam-Paszke",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Paszke",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Adam Paszke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39793298"
                        ],
                        "name": "S. Gross",
                        "slug": "S.-Gross",
                        "structuredName": {
                            "firstName": "Sam",
                            "lastName": "Gross",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Gross"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2127604"
                        ],
                        "name": "Soumith Chintala",
                        "slug": "Soumith-Chintala",
                        "structuredName": {
                            "firstName": "Soumith",
                            "lastName": "Chintala",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Soumith Chintala"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "114250963"
                        ],
                        "name": "Gregory Chanan",
                        "slug": "Gregory-Chanan",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Chanan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gregory Chanan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2052812305"
                        ],
                        "name": "E. Yang",
                        "slug": "E.-Yang",
                        "structuredName": {
                            "firstName": "Edward",
                            "lastName": "Yang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Yang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2375710"
                        ],
                        "name": "Zach DeVito",
                        "slug": "Zach-DeVito",
                        "structuredName": {
                            "firstName": "Zach",
                            "lastName": "DeVito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zach DeVito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3370429"
                        ],
                        "name": "Zeming Lin",
                        "slug": "Zeming-Lin",
                        "structuredName": {
                            "firstName": "Zeming",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zeming Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3050846"
                        ],
                        "name": "Alban Desmaison",
                        "slug": "Alban-Desmaison",
                        "structuredName": {
                            "firstName": "Alban",
                            "lastName": "Desmaison",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alban Desmaison"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3029482"
                        ],
                        "name": "L. Antiga",
                        "slug": "L.-Antiga",
                        "structuredName": {
                            "firstName": "Luca",
                            "lastName": "Antiga",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Antiga"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1977806"
                        ],
                        "name": "Adam Lerer",
                        "slug": "Adam-Lerer",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Lerer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Adam Lerer"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 156,
                                "start": 134
                            }
                        ],
                        "text": "Popular DL compiler intermediate representations (IRs) offer different tradeoffs between expressivity, composability, and portability [1, 33, 50, 52, 5, 38]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 37,
                                "start": 33
                            }
                        ],
                        "text": "Define-By-Run Frameworks PyTorch [33], Gluon [12], Chainer [50], and TensorFlow eager-mode [41] are defineby-run frameworks which attempt to address the challenges of previous work."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 40027675,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b36a5bb1707bb9c70025294b3a310138aae8327a",
            "isKey": false,
            "numCitedBy": 10485,
            "numCiting": 7,
            "paperAbstract": {
                "fragments": [],
                "text": "In this article, we describe an automatic differentiation module of PyTorch \u2014 a library designed to enable rapid research on machine learning models. It builds upon a few projects, most notably Lua Torch, Chainer, and HIPS Autograd [4], and provides a high performance environment with easy access to automatic differentiation of models executed on different devices (CPU and GPU). To make prototyping easier, PyTorch does not follow the symbolic approach used in many other deep learning frameworks, but focuses on differentiation of purely imperative programs, with a focus on extensibility and low overhead. Note that this preprint is a draft of certain sections from an upcoming paper covering all PyTorch features."
            },
            "slug": "Automatic-differentiation-in-PyTorch-Paszke-Gross",
            "title": {
                "fragments": [],
                "text": "Automatic differentiation in PyTorch"
            },
            "tldr": {
                "abstractSimilarityScore": 66,
                "text": "An automatic differentiation module of PyTorch is described \u2014 a library designed to enable rapid research on machine learning models that focuses on differentiation of purely imperative programs, with a focus on extensibility and low overhead."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1682816"
                        ],
                        "name": "Fei Wang",
                        "slug": "Fei-Wang",
                        "structuredName": {
                            "firstName": "Fei",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fei Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3491668"
                        ],
                        "name": "Xilun Wu",
                        "slug": "Xilun-Wu",
                        "structuredName": {
                            "firstName": "Xilun",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xilun Wu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9931980"
                        ],
                        "name": "Gr\u00e9gory M. Essertel",
                        "slug": "Gr\u00e9gory-M.-Essertel",
                        "structuredName": {
                            "firstName": "Gr\u00e9gory",
                            "lastName": "Essertel",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gr\u00e9gory M. Essertel"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "117235241"
                        ],
                        "name": "James M. Decker",
                        "slug": "James-M.-Decker",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Decker",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James M. Decker"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1712987"
                        ],
                        "name": "Tiark Rompf",
                        "slug": "Tiark-Rompf",
                        "structuredName": {
                            "firstName": "Tiark",
                            "lastName": "Rompf",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tiark Rompf"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 12,
                                "start": 8
                            }
                        ],
                        "text": "Lantern [54] is the most related work to Relay as it can be used as a code generator."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 7,
                                "start": 0
                            }
                        ],
                        "text": "Lantern is a deep learning DSL in Scala that uses lightweight modular staging (LMS) to lower code into C++ and CUDA."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 7,
                                "start": 0
                            }
                        ],
                        "text": "Lantern does not yet support hardware accelerators, and does not focus on full program optimizations."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 77,
                                "start": 70
                            }
                        ],
                        "text": "New languages designed for machine learning and related tasks include Lantern [54], Lift [43], Flux.jl [18] AutoGraph [30], Swift for TensorFlow [48], and JAX [25]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 7,
                                "start": 0
                            }
                        ],
                        "text": "Lantern\u2019s defining feature is the use of delimited continuations to perform automatic differentiation."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 82,
                                "start": 78
                            }
                        ],
                        "text": "New languages designed for machine learning and related tasks include Lantern [54], Lift [43], Flux."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 7,
                                "start": 0
                            }
                        ],
                        "text": "Lantern solves this problem by using a CPS transform which complicated further optimization and code generation."
                    },
                    "intents": []
                }
            ],
            "corpusId": 4387049,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9987eebf9c80e48dcc6a14f43d835e4bc920f18c",
            "isKey": true,
            "numCitedBy": 56,
            "numCiting": 142,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning has seen tremendous success over the past decade in computer vision, machine translation, and gameplay. This success rests crucially on gradient-descent optimization and the ability to \u201clearn\u201d parameters of a neural network by backpropagating observed errors. However, neural network architectures are growing increasingly sophisticated and diverse, which motivates an emerging quest for even more general forms of differentiable programming, where arbitrary parameterized computations can be trained by gradient descent. In this paper, we take a fresh look at automatic differentiation (AD) techniques, and especially aim to demystify the reverse-mode form of AD that generalizes backpropagation in neural networks. We uncover a tight connection between reverse-mode AD and delimited continuations, which permits implementing reverse-mode AD purely via operator overloading and without managing any auxiliary data structures. We further show how this formulation of AD can be fruitfully combined with multi-stage programming (staging), leading to an efficient implementation that combines the performance benefits of deep learning frameworks based on explicit reified computation graphs (e.g., TensorFlow) with the expressiveness of pure library approaches (e.g., PyTorch)."
            },
            "slug": "Demystifying-differentiable-programming:-the-Wang-Wu",
            "title": {
                "fragments": [],
                "text": "Demystifying differentiable programming: shift/reset the penultimate backpropagator"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This paper uncovers a tight connection between reverse-mode AD and delimited continuations, which permits implementing reverse- mode AD purely via operator overloading and without managing any auxiliary data structures, and shows how this formulation of AD can be fruitfully combined with multi-stage programming (staging), leading to an efficient implementation."
            },
            "venue": {
                "fragments": [],
                "text": "Proc. ACM Program. Lang."
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34289387"
                        ],
                        "name": "Mike Innes",
                        "slug": "Mike-Innes",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Innes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mike Innes"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 7,
                                "start": 3
                            }
                        ],
                        "text": "jl [18] AutoGraph [30], Swift for TensorFlow [48], and JAX [25]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 53244078,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d4414002f23c0f1c497166eb51c5b1d549ff75c8",
            "isKey": false,
            "numCitedBy": 166,
            "numCiting": 3,
            "paperAbstract": {
                "fragments": [],
                "text": "Flux is library for machine learning (ML), written using the numerical computing language Julia (Bezanson et al. 2017). The package allows models to be written using Julia\u2019s simple mathematical syntax, and applies automatic differentiation (AD) to seamlessly calculate derivatives and train the model. Meanwhile, it makes heavy use of Julia\u2019s language and compiler features to carry out code analysis and make optimisations. For example, Julia\u2019s GPU compilation support (Besard, Foket, and De Sutter 2017) can be used to JIT-compile custom GPU kernels for model layers (Innes and others 2017a)."
            },
            "slug": "Flux:-Elegant-machine-learning-with-Julia-Innes",
            "title": {
                "fragments": [],
                "text": "Flux: Elegant machine learning with Julia"
            },
            "tldr": {
                "abstractSimilarityScore": 66,
                "text": "JuliaFlux is library for machine learning (ML), written using the numerical computing language Julia, and applies automatic differentiation (AD) to seamlessly calculate derivatives and train the model."
            },
            "venue": {
                "fragments": [],
                "text": "J. Open Source Softw."
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3117618"
                        ],
                        "name": "Seiya Tokui",
                        "slug": "Seiya-Tokui",
                        "structuredName": {
                            "firstName": "Seiya",
                            "lastName": "Tokui",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Seiya Tokui"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1812144"
                        ],
                        "name": "Kenta Oono",
                        "slug": "Kenta-Oono",
                        "structuredName": {
                            "firstName": "Kenta",
                            "lastName": "Oono",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kenta Oono"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 40821847,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "67156902beca9bc90b728c8d5dd4ac9d8b27d3a3",
            "isKey": false,
            "numCitedBy": 750,
            "numCiting": 23,
            "paperAbstract": {
                "fragments": [],
                "text": "Software frameworks for neural networks play key roles in the development and application of deep learning methods. However, as new types of deep learning models are developed, existing frameworks designed for convolutional neural networks are becoming less useful. In this paper, we introduce Chainer, a Pythonbased, standalone open source framework for deep learning models. Chainer provides a flexible, intuitive, and high performance means of implementing a full range of deep learning models, including state-of-the-art models such as recurrent neural networks and variational autoencoders."
            },
            "slug": "Chainer-:-a-Next-Generation-Open-Source-Framework-Tokui-Oono",
            "title": {
                "fragments": [],
                "text": "Chainer : a Next-Generation Open Source Framework for Deep Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "Chainer provides a flexible, intuitive, and high performance means of implementing a full range of deep learning models, including state-of-the-art models such as recurrent neural networks and variational autoencoders."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39353098"
                        ],
                        "name": "Kaiming He",
                        "slug": "Kaiming-He",
                        "structuredName": {
                            "firstName": "Kaiming",
                            "lastName": "He",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kaiming He"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1771551"
                        ],
                        "name": "X. Zhang",
                        "slug": "X.-Zhang",
                        "structuredName": {
                            "firstName": "X.",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "X. Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3080683"
                        ],
                        "name": "Shaoqing Ren",
                        "slug": "Shaoqing-Ren",
                        "structuredName": {
                            "firstName": "Shaoqing",
                            "lastName": "Ren",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shaoqing Ren"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Jian Sun",
                        "slug": "Jian-Sun",
                        "structuredName": {
                            "firstName": "Jian",
                            "lastName": "Sun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jian Sun"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 162,
                                "start": 158
                            }
                        ],
                        "text": "We evaluate batch-size-normalized inference time on the accelerator designs on a mix of vision and NLP workloads: ResNet-18, ResNet-34, ResNet-50, ResNet-101 [16]; and TreeLSTM in Figure 3."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 206594692,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "2c03df8b48bf3fa39054345bafabfeff15bfd11d",
            "isKey": false,
            "numCitedBy": 97653,
            "numCiting": 61,
            "paperAbstract": {
                "fragments": [],
                "text": "Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers - 8\u00d7 deeper than VGG nets [40] but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers. The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC & COCO 2015 competitions1, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation."
            },
            "slug": "Deep-Residual-Learning-for-Image-Recognition-He-Zhang",
            "title": {
                "fragments": [],
                "text": "Deep Residual Learning for Image Recognition"
            },
            "tldr": {
                "abstractSimilarityScore": 63,
                "text": "This work presents a residual learning framework to ease the training of networks that are substantially deeper than those used previously, and provides comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth."
            },
            "venue": {
                "fragments": [],
                "text": "2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2391802"
                        ],
                        "name": "Hanxiao Liu",
                        "slug": "Hanxiao-Liu",
                        "structuredName": {
                            "firstName": "Hanxiao",
                            "lastName": "Liu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hanxiao Liu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34838386"
                        ],
                        "name": "K. Simonyan",
                        "slug": "K.-Simonyan",
                        "structuredName": {
                            "firstName": "Karen",
                            "lastName": "Simonyan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Simonyan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35729970"
                        ],
                        "name": "Yiming Yang",
                        "slug": "Yiming-Yang",
                        "structuredName": {
                            "firstName": "Yiming",
                            "lastName": "Yang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yiming Yang"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 49411844,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "c1f457e31b611da727f9aef76c283a18157dfa83",
            "isKey": false,
            "numCitedBy": 2237,
            "numCiting": 51,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper addresses the scalability challenge of architecture search by formulating the task in a differentiable manner. Unlike conventional approaches of applying evolution or reinforcement learning over a discrete and non-differentiable search space, our method is based on the continuous relaxation of the architecture representation, allowing efficient search of the architecture using gradient descent. Extensive experiments on CIFAR-10, ImageNet, Penn Treebank and WikiText-2 show that our algorithm excels in discovering high-performance convolutional architectures for image classification and recurrent architectures for language modeling, while being orders of magnitude faster than state-of-the-art non-differentiable techniques. Our implementation has been made publicly available to facilitate further research on efficient architecture search algorithms."
            },
            "slug": "DARTS:-Differentiable-Architecture-Search-Liu-Simonyan",
            "title": {
                "fragments": [],
                "text": "DARTS: Differentiable Architecture Search"
            },
            "tldr": {
                "abstractSimilarityScore": 49,
                "text": "The proposed algorithm excels in discovering high-performance convolutional architectures for image classification and recurrent architectures for language modeling, while being orders of magnitude faster than state-of-the-art non-differentiable techniques."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2061649994"
                        ],
                        "name": "Tom Young",
                        "slug": "Tom-Young",
                        "structuredName": {
                            "firstName": "Tom",
                            "lastName": "Young",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tom Young"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8223433"
                        ],
                        "name": "Devamanyu Hazarika",
                        "slug": "Devamanyu-Hazarika",
                        "structuredName": {
                            "firstName": "Devamanyu",
                            "lastName": "Hazarika",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Devamanyu Hazarika"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1746416"
                        ],
                        "name": "Soujanya Poria",
                        "slug": "Soujanya-Poria",
                        "structuredName": {
                            "firstName": "Soujanya",
                            "lastName": "Poria",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Soujanya Poria"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49943757"
                        ],
                        "name": "E. Cambria",
                        "slug": "E.-Cambria",
                        "structuredName": {
                            "firstName": "E.",
                            "lastName": "Cambria",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Cambria"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 132,
                                "start": 129
                            }
                        ],
                        "text": "Targeting Deep Learning Accelerators on FPGAs We demonstrate that Relay can support specialized hardware by compiling vision and NLP workloads onto two DNN accelerator designs (single-batch, multi-batch) we generate in-house."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 3,
                                "start": 0
                            }
                        ],
                        "text": "NLP workloads feature control flow, which makes them more challenging to optimize."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 77,
                                "start": 74
                            }
                        ],
                        "text": "We evaluate Relay on several systems and over a diverse set of vision and NLP workloads to demonstrate that (1) Relay enables expressive programs via a large breadth of models, (2) Relay supports composition of program-level optimizations such as quantization and fusion, and (3) Relay provides portability by targeting a number of hardware backends."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 112
                            }
                        ],
                        "text": "Deep learning (DL) has radically transformed domains like computer vision and natural language processing (NLP) [36, 56]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 27
                            }
                        ],
                        "text": "We evaluated the following NLP models: CharRNN, a generator character-level RNN from a PyTorch tutorial; TreeLSTM, a generalization of LSTMs to tree-structured network topologies; and RNN, GRU, and LSTM, a selection of models from the Gluon Model Zoo [37, 46, 13]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 85,
                                "start": 82
                            }
                        ],
                        "text": "For the vision workloads, we used TVM\u2019s graph runtime as the executor, and for the NLP workloads, we used Relay\u2019s AoT compiler."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 4,
                                "start": 1
                            }
                        ],
                        "text": "3NLP experiments required extensions to the MxNet importer that will be made public later\nNLP Evaluation Implementations of the NLP models were not available in all frameworks; we used MxNet baselines for RNN, GRU, and LSTM and PyTorch for CharRNN and TreeLSTM."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 18,
                                "start": 15
                            }
                        ],
                        "text": "The vision and NLP experiments (from Section 5.3 and Section 5.2) were run on a machine with an AMD Ryzen Threadripper 1950X 16-Core CPU, an Nvidia Titan-V GPU, and 64 GB of RAM."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 102,
                                "start": 99
                            }
                        ],
                        "text": "We evaluate batch-size-normalized inference time on the accelerator designs on a mix of vision and NLP workloads: ResNet-18, ResNet-34, ResNet-50, ResNet-101 [16]; and TreeLSTM in Figure 3."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 80,
                                "start": 77
                            }
                        ],
                        "text": "The ResNets have high arithmetic intensity due to 2D convolutions, while the NLP workload is memory bound due to the lower-intensity vector-matrix multiplication used in the LSTM cells."
                    },
                    "intents": []
                }
            ],
            "corpusId": 3397190,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ce2d5b5856bb6c9ab5c2390eb8b180c75a162055",
            "isKey": true,
            "numCitedBy": 1850,
            "numCiting": 240,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning methods employ multiple processing layers to learn hierarchical representations of data and have produced state-of-the-art results in many domains. Recently, a variety of model designs and methods have blossomed in the context of natural language processing (NLP). In this paper, we review significant deep learning related models and methods that have been employed for numerous NLP tasks and provide a walk-through of their evolution. We also summarize, compare and contrast the various models and put forward a detailed understanding of the past, present and future of deep learning in NLP."
            },
            "slug": "Recent-Trends-in-Deep-Learning-Based-Natural-Young-Hazarika",
            "title": {
                "fragments": [],
                "text": "Recent Trends in Deep Learning Based Natural Language Processing [Review Article]"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This paper reviews significant deep learning related models and methods that have been employed for numerous NLP tasks and provides a walk-through of their evolution."
            },
            "venue": {
                "fragments": [],
                "text": "IEEE Computational Intelligence Magazine"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2196579"
                        ],
                        "name": "Daniel Selsam",
                        "slug": "Daniel-Selsam",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Selsam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Selsam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145419642"
                        ],
                        "name": "Percy Liang",
                        "slug": "Percy-Liang",
                        "structuredName": {
                            "firstName": "Percy",
                            "lastName": "Liang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Percy Liang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1699040"
                        ],
                        "name": "D. Dill",
                        "slug": "D.-Dill",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Dill",
                            "middleNames": [
                                "L."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Dill"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 123,
                                "start": 119
                            }
                        ],
                        "text": "It is possible to model arbitrarily complex static properties, such as shape information, with a dependent type theory [40], but such a design incurs significant user complexity."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 8755038,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0b16f99ee6a6dd9ed4f6236d557d252ccd613e6f",
            "isKey": false,
            "numCitedBy": 50,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "Noisy data, non-convex objectives, model misspecification, and numerical instability can all cause undesired behaviors in machine learning systems. As a result, detecting actual implementation errors can be extremely difficult. We demonstrate a methodology in which developers use an interactive proof assistant to both implement their system and to state a formal theorem defining what it means for their system to be correct. The process of proving this theorem interactively in the proof assistant exposes all implementation errors since any error in the program would cause the proof to fail. As a case study, we implement a new system, Certigrad, for optimizing over stochastic computation graphs, and we generate a formal (i.e. machine-checkable) proof that the gradients sampled by the system are unbiased estimates of the true mathematical gradients. We train a variational autoencoder using Certigrad and find the performance comparable to training the same model in TensorFlow."
            },
            "slug": "Developing-Bug-Free-Machine-Learning-Systems-With-Selsam-Liang",
            "title": {
                "fragments": [],
                "text": "Developing Bug-Free Machine Learning Systems With Formal Mathematics"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "A methodology in which developers use an interactive proof assistant to both implement their system and to state a formal theorem defining what it means for their system to be correct is demonstrated."
            },
            "venue": {
                "fragments": [],
                "text": "ICML"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3158246"
                        ],
                        "name": "Bart van Merrienboer",
                        "slug": "Bart-van-Merrienboer",
                        "structuredName": {
                            "firstName": "Bart",
                            "lastName": "Merrienboer",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bart van Merrienboer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40497400"
                        ],
                        "name": "D. Moldovan",
                        "slug": "D.-Moldovan",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Moldovan",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Moldovan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49398909"
                        ],
                        "name": "Alexander B. Wiltschko",
                        "slug": "Alexander-B.-Wiltschko",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Wiltschko",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander B. Wiltschko"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 156,
                                "start": 134
                            }
                        ],
                        "text": "Popular DL compiler intermediate representations (IRs) offer different tradeoffs between expressivity, composability, and portability [1, 33, 50, 52, 5, 38]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 79
                            }
                        ],
                        "text": "As a result, nontrivial extensions require patching or even forking frameworks [27, 47, 52, 41, 55, 38, 51]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 52822947,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ac77271440ef7647aff432f3c3e59bad109b9ef8",
            "isKey": false,
            "numCitedBy": 24,
            "numCiting": 30,
            "paperAbstract": {
                "fragments": [],
                "text": "The need to efficiently calculate first- and higher-order derivatives of increasingly complex models expressed in Python has stressed or exceeded the capabilities of available tools. In this work, we explore techniques from the field of automatic differentiation (AD) that can give researchers expressive power, performance and strong usability. These include source-code transformation (SCT), flexible gradient surgery, efficient in-place array operations, and higher-order derivatives. We implement and demonstrate these ideas in the Tangent software library for Python, the first AD framework for a dynamic language that uses SCT."
            },
            "slug": "Tangent:-Automatic-differentiation-using-for-typed-Merrienboer-Moldovan",
            "title": {
                "fragments": [],
                "text": "Tangent: Automatic differentiation using source-code transformation for dynamically typed array programming"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "Techniques from the field of automatic differentiation that can give researchers expressive power, performance and strong usability are explored, including source-code transformation (SCT), flexible gradient surgery, efficient in-place array operations, and higher-order derivatives."
            },
            "venue": {
                "fragments": [],
                "text": "NeurIPS"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3158246"
                        ],
                        "name": "Bart van Merrienboer",
                        "slug": "Bart-van-Merrienboer",
                        "structuredName": {
                            "firstName": "Bart",
                            "lastName": "Merrienboer",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bart van Merrienboer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49398909"
                        ],
                        "name": "Alexander B. Wiltschko",
                        "slug": "Alexander-B.-Wiltschko",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Wiltschko",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander B. Wiltschko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40497400"
                        ],
                        "name": "D. Moldovan",
                        "slug": "D.-Moldovan",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Moldovan",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Moldovan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 28222904,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b03b6f101528d813d5f5cec7d208439932937e8d",
            "isKey": false,
            "numCitedBy": 20,
            "numCiting": 10,
            "paperAbstract": {
                "fragments": [],
                "text": "Automatic differentiation (AD) is an essential primitive for machine learning programming systems. Tangent is a new library that performs AD using source code transformation (SCT) in Python. It takes numeric functions written in a syntactic subset of Python and NumPy as input, and generates new Python functions which calculate a derivative. This approach to automatic differentiation is different from existing packages popular in machine learning, such as TensorFlow and Autograd. Advantages are that Tangent generates gradient code in Python which is readable by the user, easy to understand and debug, and has no runtime overhead. Tangent also introduces abstractions for easily injecting logic into the generated gradient code, further improving usability."
            },
            "slug": "Tangent:-Automatic-Differentiation-Using-Source-in-Merrienboer-Wiltschko",
            "title": {
                "fragments": [],
                "text": "Tangent: Automatic Differentiation Using Source Code Transformation in Python"
            },
            "tldr": {
                "abstractSimilarityScore": 57,
                "text": "Tangent is a new library that performs AD using source code transformation (SCT) in Python, and takes numeric functions written in a syntactic subset of Python and NumPy as input, and generates new Python functions which calculate a derivative."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38909097"
                        ],
                        "name": "Alec Radford",
                        "slug": "Alec-Radford",
                        "structuredName": {
                            "firstName": "Alec",
                            "lastName": "Radford",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alec Radford"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2096458"
                        ],
                        "name": "Luke Metz",
                        "slug": "Luke-Metz",
                        "structuredName": {
                            "firstName": "Luke",
                            "lastName": "Metz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luke Metz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2127604"
                        ],
                        "name": "Soumith Chintala",
                        "slug": "Soumith-Chintala",
                        "structuredName": {
                            "firstName": "Soumith",
                            "lastName": "Chintala",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Soumith Chintala"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 11758569,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8388f1be26329fa45e5807e968a641ce170ea078",
            "isKey": false,
            "numCitedBy": 9978,
            "numCiting": 59,
            "paperAbstract": {
                "fragments": [],
                "text": "In recent years, supervised learning with convolutional networks (CNNs) has seen huge adoption in computer vision applications. Comparatively, unsupervised learning with CNNs has received less attention. In this work we hope to help bridge the gap between the success of CNNs for supervised learning and unsupervised learning. We introduce a class of CNNs called deep convolutional generative adversarial networks (DCGANs), that have certain architectural constraints, and demonstrate that they are a strong candidate for unsupervised learning. Training on various image datasets, we show convincing evidence that our deep convolutional adversarial pair learns a hierarchy of representations from object parts to scenes in both the generator and discriminator. Additionally, we use the learned features for novel tasks - demonstrating their applicability as general image representations."
            },
            "slug": "Unsupervised-Representation-Learning-with-Deep-Radford-Metz",
            "title": {
                "fragments": [],
                "text": "Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This work introduces a class of CNNs called deep convolutional generative adversarial networks (DCGANs), that have certain architectural constraints, and demonstrates that they are a strong candidate for unsupervised learning."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34838386"
                        ],
                        "name": "K. Simonyan",
                        "slug": "K.-Simonyan",
                        "structuredName": {
                            "firstName": "Karen",
                            "lastName": "Simonyan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Simonyan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1688869"
                        ],
                        "name": "Andrew Zisserman",
                        "slug": "Andrew-Zisserman",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Zisserman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Zisserman"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 14124313,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "eb42cf88027de515750f230b23b1a057dc782108",
            "isKey": false,
            "numCitedBy": 63195,
            "numCiting": 57,
            "paperAbstract": {
                "fragments": [],
                "text": "In this work we investigate the effect of the convolutional network depth on its accuracy in the large-scale image recognition setting. Our main contribution is a thorough evaluation of networks of increasing depth using an architecture with very small (3x3) convolution filters, which shows that a significant improvement on the prior-art configurations can be achieved by pushing the depth to 16-19 weight layers. These findings were the basis of our ImageNet Challenge 2014 submission, where our team secured the first and the second places in the localisation and classification tracks respectively. We also show that our representations generalise well to other datasets, where they achieve state-of-the-art results. We have made our two best-performing ConvNet models publicly available to facilitate further research on the use of deep visual representations in computer vision."
            },
            "slug": "Very-Deep-Convolutional-Networks-for-Large-Scale-Simonyan-Zisserman",
            "title": {
                "fragments": [],
                "text": "Very Deep Convolutional Networks for Large-Scale Image Recognition"
            },
            "tldr": {
                "abstractSimilarityScore": 73,
                "text": "This work investigates the effect of the convolutional network depth on its accuracy in the large-scale image recognition setting using an architecture with very small convolution filters, which shows that a significant improvement on the prior-art configurations can be achieved by pushing the depth to 16-19 weight layers."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34289387"
                        ],
                        "name": "Mike Innes",
                        "slug": "Mike-Innes",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Innes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mike Innes"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 53015357,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "145a35666dea4eaf631f999b6f61e62447bbfa96",
            "isKey": false,
            "numCitedBy": 89,
            "numCiting": 28,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents reverse-mode algorithmic differentiation (AD) based on source code transformation, in particular of the Static Single Assignment (SSA) form used by modern compilers. The approach can support control flow, nesting, mutation, recursion, data structures, higher-order functions, and other language constructs, and the output is given to an existing compiler to produce highly efficient differentiated code. Our implementation is a new AD tool for the Julia language, called Zygote, which presents high-level dynamic semantics while transparently compiling adjoint code under the hood. We discuss the benefits of this approach to both the usability and performance of AD tools."
            },
            "slug": "Don't-Unroll-Adjoint:-Differentiating-SSA-Form-Innes",
            "title": {
                "fragments": [],
                "text": "Don't Unroll Adjoint: Differentiating SSA-Form Programs"
            },
            "tldr": {
                "abstractSimilarityScore": 71,
                "text": "This paper presents reverse-mode algorithmic differentiation based on source code transformation, in particular of the Static Single Assignment form used by modern compilers, and presents a new AD tool for the Julia language, called Zygote, which presents high-level dynamic semantics while transparently compiling adjoint code under the hood."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1967465"
                        ],
                        "name": "Olivier Breuleux",
                        "slug": "Olivier-Breuleux",
                        "structuredName": {
                            "firstName": "Olivier",
                            "lastName": "Breuleux",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Olivier Breuleux"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "84569456"
                        ],
                        "name": "Bart van Merri\u00ebnboer",
                        "slug": "Bart-van-Merri\u00ebnboer",
                        "structuredName": {
                            "firstName": "Bart",
                            "lastName": "Merri\u00ebnboer",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bart van Merri\u00ebnboer"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 11702759,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "95d9d8ef4242e02cd210cbea73c4ec116d974345",
            "isKey": false,
            "numCitedBy": 11,
            "numCiting": 11,
            "paperAbstract": {
                "fragments": [],
                "text": "Automatic differentiation is an essential feature of machine learning frameworks. However, its implementation in existing frameworks often has limitations. In dataflow programming frameworks such as Theano or TensorFlow the representation used makes supporting higher-order gradients difficult. On the other hand, operator overloading frameworks such as PyTorch are flexible, but do not lend themselves well to optimization. With Myia, we attempt to have the best of both worlds: Building on the work by Pearlmutter and Siskind we implement a first-order gradient operator for a subset of the Python programming language."
            },
            "slug": "Automatic-Differentiation-in-Myia-Breuleux-Merri\u00ebnboer",
            "title": {
                "fragments": [],
                "text": "Automatic Differentiation in Myia"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This work implements a first-order gradient operator for a subset of the Python programming language, building on the work by Pearlmutter and Siskind and attempting to have the best of both worlds."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2574060"
                        ],
                        "name": "Christian Szegedy",
                        "slug": "Christian-Szegedy",
                        "structuredName": {
                            "firstName": "Christian",
                            "lastName": "Szegedy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christian Szegedy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2157222093"
                        ],
                        "name": "Wei Liu",
                        "slug": "Wei-Liu",
                        "structuredName": {
                            "firstName": "Wei",
                            "lastName": "Liu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wei Liu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39978391"
                        ],
                        "name": "Yangqing Jia",
                        "slug": "Yangqing-Jia",
                        "structuredName": {
                            "firstName": "Yangqing",
                            "lastName": "Jia",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yangqing Jia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3142556"
                        ],
                        "name": "Pierre Sermanet",
                        "slug": "Pierre-Sermanet",
                        "structuredName": {
                            "firstName": "Pierre",
                            "lastName": "Sermanet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pierre Sermanet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144828948"
                        ],
                        "name": "Scott E. Reed",
                        "slug": "Scott-E.-Reed",
                        "structuredName": {
                            "firstName": "Scott",
                            "lastName": "Reed",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Scott E. Reed"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1838674"
                        ],
                        "name": "Dragomir Anguelov",
                        "slug": "Dragomir-Anguelov",
                        "structuredName": {
                            "firstName": "Dragomir",
                            "lastName": "Anguelov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dragomir Anguelov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1761978"
                        ],
                        "name": "D. Erhan",
                        "slug": "D.-Erhan",
                        "structuredName": {
                            "firstName": "D.",
                            "lastName": "Erhan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Erhan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2657155"
                        ],
                        "name": "Vincent Vanhoucke",
                        "slug": "Vincent-Vanhoucke",
                        "structuredName": {
                            "firstName": "Vincent",
                            "lastName": "Vanhoucke",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vincent Vanhoucke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39863668"
                        ],
                        "name": "Andrew Rabinovich",
                        "slug": "Andrew-Rabinovich",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Rabinovich",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Rabinovich"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 47,
                                "start": 43
                            }
                        ],
                        "text": "It was designed with the Inception network [45] in mind, as it contains blocks of convolutions that share the same input."
                    },
                    "intents": []
                }
            ],
            "corpusId": 206592484,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "e15cf50aa89fee8535703b9f9512fca5bfc43327",
            "isKey": false,
            "numCitedBy": 29917,
            "numCiting": 278,
            "paperAbstract": {
                "fragments": [],
                "text": "We propose a deep convolutional neural network architecture codenamed Inception that achieves the new state of the art for classification and detection in the ImageNet Large-Scale Visual Recognition Challenge 2014 (ILSVRC14). The main hallmark of this architecture is the improved utilization of the computing resources inside the network. By a carefully crafted design, we increased the depth and width of the network while keeping the computational budget constant. To optimize quality, the architectural decisions were based on the Hebbian principle and the intuition of multi-scale processing. One particular incarnation used in our submission for ILSVRC14 is called GoogLeNet, a 22 layers deep network, the quality of which is assessed in the context of classification and detection."
            },
            "slug": "Going-deeper-with-convolutions-Szegedy-Liu",
            "title": {
                "fragments": [],
                "text": "Going deeper with convolutions"
            },
            "tldr": {
                "abstractSimilarityScore": 95,
                "text": "A deep convolutional neural network architecture codenamed Inception is proposed that achieves the new state of the art for classification and detection in the ImageNet Large-Scale Visual Recognition Challenge 2014 (ILSVRC14)."
            },
            "venue": {
                "fragments": [],
                "text": "2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40497777"
                        ],
                        "name": "Joseph Redmon",
                        "slug": "Joseph-Redmon",
                        "structuredName": {
                            "firstName": "Joseph",
                            "lastName": "Redmon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Joseph Redmon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2038685"
                        ],
                        "name": "S. Divvala",
                        "slug": "S.-Divvala",
                        "structuredName": {
                            "firstName": "Santosh",
                            "lastName": "Divvala",
                            "middleNames": [
                                "Kumar"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Divvala"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2983898"
                        ],
                        "name": "Ross B. Girshick",
                        "slug": "Ross-B.-Girshick",
                        "structuredName": {
                            "firstName": "Ross",
                            "lastName": "Girshick",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ross B. Girshick"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143787583"
                        ],
                        "name": "Ali Farhadi",
                        "slug": "Ali-Farhadi",
                        "structuredName": {
                            "firstName": "Ali",
                            "lastName": "Farhadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ali Farhadi"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 132,
                                "start": 129
                            }
                        ],
                        "text": "Targeting Deep Learning Accelerators on FPGAs We demonstrate that Relay can support specialized hardware by compiling vision and NLP workloads onto two DNN accelerator designs (single-batch, multi-batch) we generate in-house."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 3,
                                "start": 0
                            }
                        ],
                        "text": "NLP workloads feature control flow, which makes them more challenging to optimize."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 77,
                                "start": 74
                            }
                        ],
                        "text": "We evaluate Relay on several systems and over a diverse set of vision and NLP workloads to demonstrate that (1) Relay enables expressive programs via a large breadth of models, (2) Relay supports composition of program-level optimizations such as quantization and fusion, and (3) Relay provides portability by targeting a number of hardware backends."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 112
                            }
                        ],
                        "text": "Deep learning (DL) has radically transformed domains like computer vision and natural language processing (NLP) [36, 56]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 27
                            }
                        ],
                        "text": "We evaluated the following NLP models: CharRNN, a generator character-level RNN from a PyTorch tutorial; TreeLSTM, a generalization of LSTMs to tree-structured network topologies; and RNN, GRU, and LSTM, a selection of models from the Gluon Model Zoo [37, 46, 13]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 85,
                                "start": 82
                            }
                        ],
                        "text": "For the vision workloads, we used TVM\u2019s graph runtime as the executor, and for the NLP workloads, we used Relay\u2019s AoT compiler."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 4,
                                "start": 1
                            }
                        ],
                        "text": "3NLP experiments required extensions to the MxNet importer that will be made public later\nNLP Evaluation Implementations of the NLP models were not available in all frameworks; we used MxNet baselines for RNN, GRU, and LSTM and PyTorch for CharRNN and TreeLSTM."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 18,
                                "start": 15
                            }
                        ],
                        "text": "The vision and NLP experiments (from Section 5.3 and Section 5.2) were run on a machine with an AMD Ryzen Threadripper 1950X 16-Core CPU, an Nvidia Titan-V GPU, and 64 GB of RAM."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 102,
                                "start": 99
                            }
                        ],
                        "text": "We evaluate batch-size-normalized inference time on the accelerator designs on a mix of vision and NLP workloads: ResNet-18, ResNet-34, ResNet-50, ResNet-101 [16]; and TreeLSTM in Figure 3."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 80,
                                "start": 77
                            }
                        ],
                        "text": "The ResNets have high arithmetic intensity due to 2D convolutions, while the NLP workload is memory bound due to the lower-intensity vector-matrix multiplication used in the LSTM cells."
                    },
                    "intents": []
                }
            ],
            "corpusId": 206594738,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f8e79ac0ea341056ef20f2616628b3e964764cfd",
            "isKey": true,
            "numCitedBy": 16956,
            "numCiting": 50,
            "paperAbstract": {
                "fragments": [],
                "text": "We present YOLO, a new approach to object detection. Prior work on object detection repurposes classifiers to perform detection. Instead, we frame object detection as a regression problem to spatially separated bounding boxes and associated class probabilities. A single neural network predicts bounding boxes and class probabilities directly from full images in one evaluation. Since the whole detection pipeline is a single network, it can be optimized end-to-end directly on detection performance. Our unified architecture is extremely fast. Our base YOLO model processes images in real-time at 45 frames per second. A smaller version of the network, Fast YOLO, processes an astounding 155 frames per second while still achieving double the mAP of other real-time detectors. Compared to state-of-the-art detection systems, YOLO makes more localization errors but is less likely to predict false positives on background. Finally, YOLO learns very general representations of objects. It outperforms other detection methods, including DPM and R-CNN, when generalizing from natural images to other domains like artwork."
            },
            "slug": "You-Only-Look-Once:-Unified,-Real-Time-Object-Redmon-Divvala",
            "title": {
                "fragments": [],
                "text": "You Only Look Once: Unified, Real-Time Object Detection"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "Compared to state-of-the-art detection systems, YOLO makes more localization errors but is less likely to predict false positives on background, and outperforms other detection methods, including DPM and R-CNN, when generalizing from natural images to other domains like artwork."
            },
            "venue": {
                "fragments": [],
                "text": "2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144727050"
                        ],
                        "name": "Andrew G. Howard",
                        "slug": "Andrew-G.-Howard",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Howard",
                            "middleNames": [
                                "G."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew G. Howard"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2717876"
                        ],
                        "name": "Menglong Zhu",
                        "slug": "Menglong-Zhu",
                        "structuredName": {
                            "firstName": "Menglong",
                            "lastName": "Zhu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Menglong Zhu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Bo Chen",
                        "slug": "Bo-Chen",
                        "structuredName": {
                            "firstName": "Bo",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bo Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2741985"
                        ],
                        "name": "Dmitry Kalenichenko",
                        "slug": "Dmitry-Kalenichenko",
                        "structuredName": {
                            "firstName": "Dmitry",
                            "lastName": "Kalenichenko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dmitry Kalenichenko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2108301072"
                        ],
                        "name": "Weijun Wang",
                        "slug": "Weijun-Wang",
                        "structuredName": {
                            "firstName": "Weijun",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Weijun Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47447630"
                        ],
                        "name": "Tobias Weyand",
                        "slug": "Tobias-Weyand",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Weyand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tobias Weyand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2612392"
                        ],
                        "name": "M. Andreetto",
                        "slug": "M.-Andreetto",
                        "structuredName": {
                            "firstName": "Marco",
                            "lastName": "Andreetto",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Andreetto"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2595180"
                        ],
                        "name": "Hartwig Adam",
                        "slug": "Hartwig-Adam",
                        "structuredName": {
                            "firstName": "Hartwig",
                            "lastName": "Adam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hartwig Adam"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 12670695,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3647d6d0f151dc05626449ee09cc7bce55be497e",
            "isKey": false,
            "numCitedBy": 10323,
            "numCiting": 40,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a class of efficient models called MobileNets for mobile and embedded vision applications. MobileNets are based on a streamlined architecture that uses depth-wise separable convolutions to build light weight deep neural networks. We introduce two simple global hyper-parameters that efficiently trade off between latency and accuracy. These hyper-parameters allow the model builder to choose the right sized model for their application based on the constraints of the problem. We present extensive experiments on resource and accuracy tradeoffs and show strong performance compared to other popular models on ImageNet classification. We then demonstrate the effectiveness of MobileNets across a wide range of applications and use cases including object detection, finegrain classification, face attributes and large scale geo-localization."
            },
            "slug": "MobileNets:-Efficient-Convolutional-Neural-Networks-Howard-Zhu",
            "title": {
                "fragments": [],
                "text": "MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This work introduces two simple global hyper-parameters that efficiently trade off between latency and accuracy and demonstrates the effectiveness of MobileNets across a wide range of applications and use cases including object detection, finegrain classification, face attributes and large scale geo-localization."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1753223"
                        ],
                        "name": "A. Graves",
                        "slug": "A.-Graves",
                        "structuredName": {
                            "firstName": "Alex",
                            "lastName": "Graves",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Graves"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40360972"
                        ],
                        "name": "Abdel-rahman Mohamed",
                        "slug": "Abdel-rahman-Mohamed",
                        "structuredName": {
                            "firstName": "Abdel-rahman",
                            "lastName": "Mohamed",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Abdel-rahman Mohamed"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1695689"
                        ],
                        "name": "Geoffrey E. Hinton",
                        "slug": "Geoffrey-E.-Hinton",
                        "structuredName": {
                            "firstName": "Geoffrey",
                            "lastName": "Hinton",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Geoffrey E. Hinton"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 206741496,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "4177ec52d1b80ed57f2e72b0f9a42365f1a8598d",
            "isKey": false,
            "numCitedBy": 6959,
            "numCiting": 35,
            "paperAbstract": {
                "fragments": [],
                "text": "Recurrent neural networks (RNNs) are a powerful model for sequential data. End-to-end training methods such as Connectionist Temporal Classification make it possible to train RNNs for sequence labelling problems where the input-output alignment is unknown. The combination of these methods with the Long Short-term Memory RNN architecture has proved particularly fruitful, delivering state-of-the-art results in cursive handwriting recognition. However RNN performance in speech recognition has so far been disappointing, with better results returned by deep feedforward networks. This paper investigates deep recurrent neural networks, which combine the multiple levels of representation that have proved so effective in deep networks with the flexible use of long range context that empowers RNNs. When trained end-to-end with suitable regularisation, we find that deep Long Short-term Memory RNNs achieve a test set error of 17.7% on the TIMIT phoneme recognition benchmark, which to our knowledge is the best recorded score."
            },
            "slug": "Speech-recognition-with-deep-recurrent-neural-Graves-Mohamed",
            "title": {
                "fragments": [],
                "text": "Speech recognition with deep recurrent neural networks"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This paper investigates deep recurrent neural networks, which combine the multiple levels of representation that have proved so effective in deep networks with the flexible use of long range context that empowers RNNs."
            },
            "venue": {
                "fragments": [],
                "text": "2013 IEEE International Conference on Acoustics, Speech and Signal Processing"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40250403"
                        ],
                        "name": "Xiaodan Liang",
                        "slug": "Xiaodan-Liang",
                        "structuredName": {
                            "firstName": "Xiaodan",
                            "lastName": "Liang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xiaodan Liang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1720987"
                        ],
                        "name": "Xiaohui Shen",
                        "slug": "Xiaohui-Shen",
                        "structuredName": {
                            "firstName": "Xiaohui",
                            "lastName": "Shen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xiaohui Shen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "33221685"
                        ],
                        "name": "Jiashi Feng",
                        "slug": "Jiashi-Feng",
                        "structuredName": {
                            "firstName": "Jiashi",
                            "lastName": "Feng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jiashi Feng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1737218"
                        ],
                        "name": "Liang Lin",
                        "slug": "Liang-Lin",
                        "structuredName": {
                            "firstName": "Liang",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Liang Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143653681"
                        ],
                        "name": "Shuicheng Yan",
                        "slug": "Shuicheng-Yan",
                        "structuredName": {
                            "firstName": "Shuicheng",
                            "lastName": "Yan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shuicheng Yan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 123,
                                "start": 111
                            }
                        ],
                        "text": "Data Abstraction Many models make use of additional data types beyond tuples, such as lists, trees, and graphs [21, 46, 23]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 7886345,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3cea26512e9fd8bcb4081af44286d395004a5433",
            "isKey": false,
            "numCitedBy": 285,
            "numCiting": 58,
            "paperAbstract": {
                "fragments": [],
                "text": "By taking the semantic object parsing task as an exemplar application scenario, we propose the Graph Long Short-Term Memory (Graph LSTM) network, which is the generalization of LSTM from sequential data or multi-dimensional data to general graph-structured data. Particularly, instead of evenly and fixedly dividing an image to pixels or patches in existing multi-dimensional LSTM structures (e.g., Row, Grid and Diagonal LSTMs), we take each arbitrary-shaped superpixel as a semantically consistent node, and adaptively construct an undirected graph for each image, where the spatial relations of the superpixels are naturally used as edges. Constructed on such an adaptive graph topology, the Graph LSTM is more naturally aligned with the visual patterns in the image (e.g., object boundaries or appearance similarities) and provides a more economical information propagation route. Furthermore, for each optimization step over Graph LSTM, we propose to use a confidence-driven scheme to update the hidden and memory states of nodes progressively till all nodes are updated. In addition, for each node, the forgets gates are adaptively learned to capture different degrees of semantic correlation with neighboring nodes. Comprehensive evaluations on four diverse semantic object parsing datasets well demonstrate the significant superiority of our Graph LSTM over other state-of-the-art solutions."
            },
            "slug": "Semantic-Object-Parsing-with-Graph-LSTM-Liang-Shen",
            "title": {
                "fragments": [],
                "text": "Semantic Object Parsing with Graph LSTM"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "The Graph Long Short-Term Memory network is proposed, which is the generalization of LSTM from sequential data or multi-dimensional data to general graph-structured data."
            },
            "venue": {
                "fragments": [],
                "text": "ECCV"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1739503"
                        ],
                        "name": "A. G. Baydin",
                        "slug": "A.-G.-Baydin",
                        "structuredName": {
                            "firstName": "Atilim",
                            "lastName": "Baydin",
                            "middleNames": [
                                "Gunes"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. G. Baydin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1700974"
                        ],
                        "name": "Barak A. Pearlmutter",
                        "slug": "Barak-A.-Pearlmutter",
                        "structuredName": {
                            "firstName": "Barak",
                            "lastName": "Pearlmutter",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Barak A. Pearlmutter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1767709"
                        ],
                        "name": "Alexey Radul",
                        "slug": "Alexey-Radul",
                        "structuredName": {
                            "firstName": "Alexey",
                            "lastName": "Radul",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexey Radul"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1737754"
                        ],
                        "name": "J. Siskind",
                        "slug": "J.-Siskind",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Siskind",
                            "middleNames": [
                                "Mark"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Siskind"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 3766791,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "da118b8aa99699edd7609fbbd081d5b93bc2e87b",
            "isKey": false,
            "numCitedBy": 1243,
            "numCiting": 278,
            "paperAbstract": {
                "fragments": [],
                "text": "Derivatives, mostly in the form of gradients and Hessians, are ubiquitous in machine learning. Automatic differentiation (AD), also called algorithmic differentiation or simply \u201cauto-diff\u201d, is a family of techniques similar to but more general than backpropagation for efficiently and accurately evaluating derivatives of numeric functions expressed as computer programs. AD is a small but established field with applications in areas including computational fluid dynamics, atmospheric sciences, and engineering design optimization. Until \nvery recently, the fields of machine learning and AD have largely been unaware of each other and, in some cases, have independently discovered each other\u2019s results. Despite its \nrelevance, general-purpose AD has been missing from the machine learning toolbox, a situation slowly changing with its ongoing adoption under the names \u201cdynamic computational \ngraphs\u201d and \u201cdifferentiable programming\u201d. We survey the intersection of AD and machine learning, cover applications where AD has direct relevance, and address the main imple- \nmentation techniques. By precisely defining the main differentiation techniques and their interrelationships, we aim to bring clarity to the usage of the terms \u201cautodiff\u201d, \u201cautomatic differentiation\u201d, and \u201csymbolic differentiation\u201d as these are encountered more and more in machine learning settings."
            },
            "slug": "Automatic-differentiation-in-machine-learning:-a-Baydin-Pearlmutter",
            "title": {
                "fragments": [],
                "text": "Automatic differentiation in machine learning: a survey"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "By precisely defining the main differentiation techniques and their interrelationships, this work aims to bring clarity to the usage of the terms \u201cautodiff\u2019, \u201cautomatic differentiation\u201d, and \u201csymbolic differentiation\" as these are encountered more and more in machine learning settings."
            },
            "venue": {
                "fragments": [],
                "text": "J. Mach. Learn. Res."
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2071392632"
                        ],
                        "name": "StatePeter Thiemann",
                        "slug": "StatePeter-Thiemann",
                        "structuredName": {
                            "firstName": "StatePeter",
                            "lastName": "Thiemann",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "StatePeter Thiemann"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 128,
                                "start": 124
                            }
                        ],
                        "text": "Relay is the first compiler to apply partial evaluation techniques to deep learning, the core approach of which is based on [49]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 6103746,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "00c647d77f2a12a1369cee3ec26b817f86eefdcb",
            "isKey": false,
            "numCitedBy": 36,
            "numCiting": 96,
            "paperAbstract": {
                "fragments": [],
                "text": "We have designed and implemented an ooine partial evaluator for a higher-order language with rst-class references. Its distinguishing feature over other partial evaluators is its ability to perform assignments to local and global references at specialization time for a higher-order language. The partial evaluator consists of a region-based monovariant binding-time analysis and a specializer in essentially continuation-passing store-passing style, thus generalizing type-based binding-time analysis and continuation-based partial evaluation. The partial evaluator yields good results for realistic problems such as object-oriented programming, uniication, and specializer generation."
            },
            "slug": "Partial-Evaluation-for-Higher-Order-Languages-with-Thiemann",
            "title": {
                "fragments": [],
                "text": "Partial Evaluation for Higher-Order Languages with"
            },
            "tldr": {
                "abstractSimilarityScore": 56,
                "text": "An ooine partial evaluator for a higher-order language with rst-class references that is generalizing type-based binding-time analysis and continuation-based partial evaluation and yields good results for realistic problems such as object-oriented programming, uniication, and specializer generation."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1996
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1706320"
                        ],
                        "name": "B. Stroustrup",
                        "slug": "B.-Stroustrup",
                        "structuredName": {
                            "firstName": "Bjarne",
                            "lastName": "Stroustrup",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "B. Stroustrup"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 134,
                                "start": 130
                            }
                        ],
                        "text": "We set out to build zero-cost abstractions for Relay, governed by Stroustrup\u2019s principle, \u201cWhat you don\u2019t use, you don\u2019t pay for\u201d [44]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 29464138,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "dcb38a10f1a634dc82b535527c58791dbae94429",
            "isKey": false,
            "numCitedBy": 26,
            "numCiting": 13,
            "paperAbstract": {
                "fragments": [],
                "text": "C++ was designed to be a systems programming language and has been used for embedded systems programming and other resource-constrained types of programming since the earliest days. This paper will briefly discuss how C++'s basic model of computation and data supports time and space performance, hardware access, and predictability. If that was all we wanted, we could write assembler or C, so I show how these basic features interact with abstraction mechanisms (such as classes, inheritance, and templates) to control system complexity and improve correctness while retaining the desired predictability and performance."
            },
            "slug": "Abstraction-and-the-C++-Machine-Model-Stroustrup",
            "title": {
                "fragments": [],
                "text": "Abstraction and the C++ Machine Model"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This paper will briefly discuss how C++'s basic model of computation and data supports time and space performance, hardware access, and predictability."
            },
            "venue": {
                "fragments": [],
                "text": "ICESS"
            },
            "year": 2004
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153440022"
                        ],
                        "name": "Ian J. Goodfellow",
                        "slug": "Ian-J.-Goodfellow",
                        "structuredName": {
                            "firstName": "Ian",
                            "lastName": "Goodfellow",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ian J. Goodfellow"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2751422"
                        ],
                        "name": "Yaroslav Bulatov",
                        "slug": "Yaroslav-Bulatov",
                        "structuredName": {
                            "firstName": "Yaroslav",
                            "lastName": "Bulatov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yaroslav Bulatov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46920727"
                        ],
                        "name": "Julian Ibarz",
                        "slug": "Julian-Ibarz",
                        "structuredName": {
                            "firstName": "Julian",
                            "lastName": "Ibarz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Julian Ibarz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1911894"
                        ],
                        "name": "Sacha Arnoud",
                        "slug": "Sacha-Arnoud",
                        "structuredName": {
                            "firstName": "Sacha",
                            "lastName": "Arnoud",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sacha Arnoud"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1961864"
                        ],
                        "name": "V. Shet",
                        "slug": "V.-Shet",
                        "structuredName": {
                            "firstName": "Vinay",
                            "lastName": "Shet",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "V. Shet"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 17991431,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b3d8dffb73bc93de239998548386c84177caa2ad",
            "isKey": false,
            "numCitedBy": 584,
            "numCiting": 20,
            "paperAbstract": {
                "fragments": [],
                "text": "Abstract: Recognizing arbitrary multi-character text in unconstrained natural photographs is a hard problem. In this paper, we address an equally hard sub-problem in this domain viz. recognizing arbitrary multi-digit numbers from Street View imagery. Traditional approaches to solve this problem typically separate out the localization, segmentation, and recognition steps. In this paper we propose a unified approach that integrates these three steps via the use of a deep convolutional neural network that operates directly on the image pixels. We employ the DistBelief implementation of deep neural networks in order to train large, distributed neural networks on high quality images. We find that the performance of this approach increases with the depth of the convolutional network, with the best performance occurring in the deepest architecture we trained, with eleven hidden layers. We evaluate this approach on the publicly available SVHN dataset and achieve over $96\\%$ accuracy in recognizing complete street numbers. We show that on a per-digit recognition task, we improve upon the state-of-the-art, achieving $97.84\\%$ accuracy. We also evaluate this approach on an even more challenging dataset generated from Street View imagery containing several tens of millions of street number annotations and achieve over $90\\%$ accuracy. To further explore the applicability of the proposed system to broader text recognition tasks, we apply it to synthetic distorted text from reCAPTCHA. reCAPTCHA is one of the most secure reverse turing tests that uses distorted text to distinguish humans from bots. We report a $99.8\\%$ accuracy on the hardest category of reCAPTCHA. Our evaluations on both tasks indicate that at specific operating thresholds, the performance of the proposed system is comparable to, and in some cases exceeds, that of human operators."
            },
            "slug": "Multi-digit-Number-Recognition-from-Street-View-Goodfellow-Bulatov",
            "title": {
                "fragments": [],
                "text": "Multi-digit Number Recognition from Street View Imagery using Deep Convolutional Neural Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This paper employs the DistBelief implementation of deep neural networks in order to train large, distributed neural networks on high quality images and finds that the performance of this approach increases with the depth of the convolutional network."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "11126631"
                        ],
                        "name": "T. Chen",
                        "slug": "T.-Chen",
                        "structuredName": {
                            "firstName": "Tian",
                            "lastName": "Chen",
                            "middleNames": [
                                "Qi"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40959192"
                        ],
                        "name": "Yulia Rubanova",
                        "slug": "Yulia-Rubanova",
                        "structuredName": {
                            "firstName": "Yulia",
                            "lastName": "Rubanova",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yulia Rubanova"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "51012893"
                        ],
                        "name": "J. Bettencourt",
                        "slug": "J.-Bettencourt",
                        "structuredName": {
                            "firstName": "Jesse",
                            "lastName": "Bettencourt",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Bettencourt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1704657"
                        ],
                        "name": "D. Duvenaud",
                        "slug": "D.-Duvenaud",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Duvenaud",
                            "middleNames": [
                                "Kristjanson"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Duvenaud"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 49310446,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "449310e3538b08b43227d660227dfd2875c3c3c1",
            "isKey": false,
            "numCitedBy": 1878,
            "numCiting": 67,
            "paperAbstract": {
                "fragments": [],
                "text": "We introduce a new family of deep neural network models. Instead of specifying a discrete sequence of hidden layers, we parameterize the derivative of the hidden state using a neural network. The output of the network is computed using a black-box differential equation solver. These continuous-depth models have constant memory cost, adapt their evaluation strategy to each input, and can explicitly trade numerical precision for speed. We demonstrate these properties in continuous-depth residual networks and continuous-time latent variable models. We also construct continuous normalizing flows, a generative model that can train by maximum likelihood, without partitioning or ordering the data dimensions. For training, we show how to scalably backpropagate through any ODE solver, without access to its internal operations. This allows end-to-end training of ODEs within larger models."
            },
            "slug": "Neural-Ordinary-Differential-Equations-Chen-Rubanova",
            "title": {
                "fragments": [],
                "text": "Neural Ordinary Differential Equations"
            },
            "tldr": {
                "abstractSimilarityScore": 36,
                "text": "This work shows how to scalably backpropagate through any ODE solver, without access to its internal operations, which allows end-to-end training of ODEs within larger models."
            },
            "venue": {
                "fragments": [],
                "text": "NeurIPS"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3255983"
                        ],
                        "name": "Volodymyr Mnih",
                        "slug": "Volodymyr-Mnih",
                        "structuredName": {
                            "firstName": "Volodymyr",
                            "lastName": "Mnih",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Volodymyr Mnih"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2645384"
                        ],
                        "name": "K. Kavukcuoglu",
                        "slug": "K.-Kavukcuoglu",
                        "structuredName": {
                            "firstName": "Koray",
                            "lastName": "Kavukcuoglu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Kavukcuoglu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145824029"
                        ],
                        "name": "David Silver",
                        "slug": "David-Silver",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Silver",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David Silver"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1753223"
                        ],
                        "name": "A. Graves",
                        "slug": "A.-Graves",
                        "structuredName": {
                            "firstName": "Alex",
                            "lastName": "Graves",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Graves"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2460849"
                        ],
                        "name": "Ioannis Antonoglou",
                        "slug": "Ioannis-Antonoglou",
                        "structuredName": {
                            "firstName": "Ioannis",
                            "lastName": "Antonoglou",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ioannis Antonoglou"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1688276"
                        ],
                        "name": "Daan Wierstra",
                        "slug": "Daan-Wierstra",
                        "structuredName": {
                            "firstName": "Daan",
                            "lastName": "Wierstra",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daan Wierstra"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3137672"
                        ],
                        "name": "Martin A. Riedmiller",
                        "slug": "Martin-A.-Riedmiller",
                        "structuredName": {
                            "firstName": "Martin",
                            "lastName": "Riedmiller",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Martin A. Riedmiller"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 15238391,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "2319a491378867c7049b3da055c5df60e1671158",
            "isKey": false,
            "numCitedBy": 6930,
            "numCiting": 37,
            "paperAbstract": {
                "fragments": [],
                "text": "We present the first deep learning model to successfully learn control policies directly from high-dimensional sensory input using reinforcement learning. The model is a convolutional neural network, trained with a variant of Q-learning, whose input is raw pixels and whose output is a value function estimating future rewards. We apply our method to seven Atari 2600 games from the Arcade Learning Environment, with no adjustment of the architecture or learning algorithm. We find that it outperforms all previous approaches on six of the games and surpasses a human expert on three of them."
            },
            "slug": "Playing-Atari-with-Deep-Reinforcement-Learning-Mnih-Kavukcuoglu",
            "title": {
                "fragments": [],
                "text": "Playing Atari with Deep Reinforcement Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 72,
                "text": "This work presents the first deep learning model to successfully learn control policies directly from high-dimensional sensory input using reinforcement learning, which outperforms all previous approaches on six of the games and surpasses a human expert on three of them."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8421815"
                        ],
                        "name": "Kai Sheng Tai",
                        "slug": "Kai-Sheng-Tai",
                        "structuredName": {
                            "firstName": "Kai",
                            "lastName": "Tai",
                            "middleNames": [
                                "Sheng"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kai Sheng Tai"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2166511"
                        ],
                        "name": "R. Socher",
                        "slug": "R.-Socher",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Socher",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Socher"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144783904"
                        ],
                        "name": "Christopher D. Manning",
                        "slug": "Christopher-D.-Manning",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Manning",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christopher D. Manning"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 263,
                                "start": 251
                            }
                        ],
                        "text": "We evaluated the following NLP models: CharRNN, a generator character-level RNN from a PyTorch tutorial; TreeLSTM, a generalization of LSTMs to tree-structured network topologies; and RNN, GRU, and LSTM, a selection of models from the Gluon Model Zoo [37, 46, 13]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 104,
                                "start": 100
                            }
                        ],
                        "text": "The engineer decides to use a variant of TreeLSTM, a deep learning model that uses a tree structure [46]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 123,
                                "start": 111
                            }
                        ],
                        "text": "Data Abstraction Many models make use of additional data types beyond tuples, such as lists, trees, and graphs [21, 46, 23]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 3033526,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "32de44f01a96d4473d21099d15e25bc2b9f08e2f",
            "isKey": false,
            "numCitedBy": 2533,
            "numCiting": 43,
            "paperAbstract": {
                "fragments": [],
                "text": "Because of their superior ability to preserve sequence information over time, Long Short-Term Memory (LSTM) networks, a type of recurrent neural network with a more complex computational unit, have obtained strong results on a variety of sequence modeling tasks. The only underlying LSTM structure that has been explored so far is a linear chain. However, natural language exhibits syntactic properties that would naturally combine words to phrases. We introduce the Tree-LSTM, a generalization of LSTMs to tree-structured network topologies. Tree-LSTMs outperform all existing systems and strong LSTM baselines on two tasks: predicting the semantic relatedness of two sentences (SemEval 2014, Task 1) and sentiment classification (Stanford Sentiment Treebank)."
            },
            "slug": "Improved-Semantic-Representations-From-Long-Memory-Tai-Socher",
            "title": {
                "fragments": [],
                "text": "Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "The Tree-LSTM is introduced, a generalization of LSTMs to tree-structured network topologies that outperform all existing systems and strong LSTM baselines on two tasks: predicting the semantic relatedness of two sentences and sentiment classification."
            },
            "venue": {
                "fragments": [],
                "text": "ACL"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145885839"
                        ],
                        "name": "J. Moses",
                        "slug": "J.-Moses",
                        "structuredName": {
                            "firstName": "Joel",
                            "lastName": "Moses",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Moses"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 252,
                                "start": 244
                            }
                        ],
                        "text": "The lack of lexical scope in computation graphs complicates language features, like first-class functions and control flow, and reduces the precision of traditional analyses, such as liveness, because the high-level program structure is absent [32, 39]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 17514262,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "634351ffae75acb390779094f484d22ac31a164f",
            "isKey": false,
            "numCitedBy": 92,
            "numCiting": 7,
            "paperAbstract": {
                "fragments": [],
                "text": "A problem common to many powerful programming languages arises when one has to determine what values to assign to free variables in functions. Different implementational approaches which attempt to solve the problem are considered. The discussion concentrates on LISP implementations and points out why most current LISP systems are not as general as the original LISP 1.5 system. Readers not familiar with LISP should be able to read this paper without difficulty since we have tried to couch the argument in ALGOL-like terms as much as possible."
            },
            "slug": "The-function-of-FUNCTION-in-LISP-or-why-the-FUNARG-Moses",
            "title": {
                "fragments": [],
                "text": "The function of FUNCTION in LISP or why the FUNARG problem should be called the environment problem"
            },
            "tldr": {
                "abstractSimilarityScore": 77,
                "text": "A problem common to many powerful programming languages arises when one has to determine what values to assign to free variables in functions and the argument is tried to couch the argument in ALGOL-like terms as much as possible."
            },
            "venue": {
                "fragments": [],
                "text": "SIGS"
            },
            "year": 1970
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1720304"
                        ],
                        "name": "E. Sandewall",
                        "slug": "E.-Sandewall",
                        "structuredName": {
                            "firstName": "Erik",
                            "lastName": "Sandewall",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Sandewall"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 38587305,
            "fieldsOfStudy": [
                "Mathematics"
            ],
            "id": "46329b4a7b8c0fc6c88363283f7dc8f0d0910188",
            "isKey": false,
            "numCitedBy": 18,
            "numCiting": 7,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper is a response to Joel Moses's recent paper, \"The Function of FUNCTION in LISP, or ... \". We give some examples where the FUNARG feature of LISP 1. 5 is relative useful, and suggest a computationally efficient implementation of FUNARG. The idea in the proposal is to let a FUNARG-expression create indirect-addressing type bindings on the push-list for variables."
            },
            "slug": "A-proposed-solution-to-the-FUNARG-problem-Sandewall",
            "title": {
                "fragments": [],
                "text": "A proposed solution to the FUNARG problem"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "The idea in the proposal is to let a FUNARG-expression create indirect-addressing type bindings on the push-list for variables."
            },
            "venue": {
                "fragments": [],
                "text": "SIGS"
            },
            "year": 1971
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 86,
                                "start": 83
                            }
                        ],
                        "text": "Relay achieves performance on par with NNVM and outperforms TensorFlow, TensorFlow-XLA, MxNet, and PyTorch on every benchmark."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 79
                            }
                        ],
                        "text": "As a result, nontrivial extensions require patching or even forking frameworks [27, 47, 52, 41, 55, 38, 51]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 128,
                                "start": 124
                            }
                        ],
                        "text": "DL frameworks have adopted compilers to tackle both performance and portability for existing applications, most notably XLA [55], Glow [38], nGraph [10], ONNC [24], PlaidML [9], and ModelCompiler."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 68,
                                "start": 65
                            }
                        ],
                        "text": "Upon first examination MLIR might appear to be a replacement for XLA and related TF compiler efforts, but it is not that."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 53,
                                "start": 50
                            }
                        ],
                        "text": "We compared Relay to NNVM, TensorFlow, TensorFlow-XLA (Accelerated Linear Algebra), PyTorch, and MxNet."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 44,
                                "start": 41
                            }
                        ],
                        "text": "More advanced strategies, implemented in XLA, detect a closed set of statically shaped operators for fusion and generate code for CPU/GPU."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 245,
                                "start": 241
                            }
                        ],
                        "text": "Large technology companies, such as Google, Facebook, and Amazon, drive the development of frameworks, and consequently, each company has its own stack consisting of the core framework (TensorFlow [1], PyTorch [8], MxNet [6]), compilers(XLA [55], Glow [38], TVM [7]), and hardware accelerators (TPU [20], GraphCore, Inferentia [2])."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Xla - tensorflow, compiled"
            },
            "venue": {
                "fragments": [],
                "text": "https://developers.googleblog.com/2017/ 03/xla-tensorflow-compiled.html, March"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1752762"
                        ],
                        "name": "J. Gustafson",
                        "slug": "J.-Gustafson",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Gustafson",
                            "middleNames": [
                                "L."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Gustafson"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 232,
                                "start": 220
                            }
                        ],
                        "text": "Although researchers have developed a variety of quantization strategies, each of which makes use of different bit-widths, rounding modes, and datatypes, our engineer must use a strategy supported by existing frameworks [15, 14, 34]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 125565114,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ee74cf1fdbd9c9a0991fa544251feb4604fda28e",
            "isKey": false,
            "numCitedBy": 89,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "The-End-of-Error:-Unum-Computing-Gustafson",
            "title": {
                "fragments": [],
                "text": "The End of Error: Unum Computing"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1813029"
                        ],
                        "name": "D. Cyphers",
                        "slug": "D.-Cyphers",
                        "structuredName": {
                            "firstName": "D.",
                            "lastName": "Cyphers",
                            "middleNames": [
                                "Scott"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Cyphers"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1994518"
                        ],
                        "name": "Arjun K. Bansal",
                        "slug": "Arjun-K.-Bansal",
                        "structuredName": {
                            "firstName": "Arjun",
                            "lastName": "Bansal",
                            "middleNames": [
                                "K."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Arjun K. Bansal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35339838"
                        ],
                        "name": "Anahita Bhiwandiwalla",
                        "slug": "Anahita-Bhiwandiwalla",
                        "structuredName": {
                            "firstName": "Anahita",
                            "lastName": "Bhiwandiwalla",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anahita Bhiwandiwalla"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1713733"
                        ],
                        "name": "J. Bobba",
                        "slug": "J.-Bobba",
                        "structuredName": {
                            "firstName": "Jayaram",
                            "lastName": "Bobba",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Bobba"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38922457"
                        ],
                        "name": "M. Brookhart",
                        "slug": "M.-Brookhart",
                        "structuredName": {
                            "firstName": "Matthew",
                            "lastName": "Brookhart",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Brookhart"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2019491890"
                        ],
                        "name": "Avijit Chakraborty",
                        "slug": "Avijit-Chakraborty",
                        "structuredName": {
                            "firstName": "Avijit",
                            "lastName": "Chakraborty",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Avijit Chakraborty"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46682999"
                        ],
                        "name": "W. Constable",
                        "slug": "W.-Constable",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Constable",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "W. Constable"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3018822"
                        ],
                        "name": "Christian Convey",
                        "slug": "Christian-Convey",
                        "structuredName": {
                            "firstName": "Christian",
                            "lastName": "Convey",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christian Convey"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40026482"
                        ],
                        "name": "L. Cook",
                        "slug": "L.-Cook",
                        "structuredName": {
                            "firstName": "Leona",
                            "lastName": "Cook",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Cook"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35583006"
                        ],
                        "name": "Omar Kanawi",
                        "slug": "Omar-Kanawi",
                        "structuredName": {
                            "firstName": "Omar",
                            "lastName": "Kanawi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Omar Kanawi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2070657403"
                        ],
                        "name": "Robert Kimball",
                        "slug": "Robert-Kimball",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Kimball",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Robert Kimball"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144468565"
                        ],
                        "name": "Jason Knight",
                        "slug": "Jason-Knight",
                        "structuredName": {
                            "firstName": "Jason",
                            "lastName": "Knight",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jason Knight"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2628842"
                        ],
                        "name": "Nikolay Korovaiko",
                        "slug": "Nikolay-Korovaiko",
                        "structuredName": {
                            "firstName": "Nikolay",
                            "lastName": "Korovaiko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nikolay Korovaiko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1849728"
                        ],
                        "name": "V. Vijay",
                        "slug": "V.-Vijay",
                        "structuredName": {
                            "firstName": "V.",
                            "lastName": "Vijay",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "V. Vijay"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35582047"
                        ],
                        "name": "Yixing Lao",
                        "slug": "Yixing-Lao",
                        "structuredName": {
                            "firstName": "Yixing",
                            "lastName": "Lao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yixing Lao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1390057343"
                        ],
                        "name": "C. Lishka",
                        "slug": "C.-Lishka",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Lishka",
                            "middleNames": [
                                "R."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Lishka"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38817255"
                        ],
                        "name": "J. Menon",
                        "slug": "J.-Menon",
                        "structuredName": {
                            "firstName": "Jai",
                            "lastName": "Menon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Menon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2111799713"
                        ],
                        "name": "Jennifer Myers",
                        "slug": "Jennifer-Myers",
                        "structuredName": {
                            "firstName": "Jennifer",
                            "lastName": "Myers",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jennifer Myers"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8193799"
                        ],
                        "name": "Sandeep Aswath Narayana",
                        "slug": "Sandeep-Aswath-Narayana",
                        "structuredName": {
                            "firstName": "Sandeep",
                            "lastName": "Narayana",
                            "middleNames": [
                                "Aswath"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sandeep Aswath Narayana"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35456885"
                        ],
                        "name": "A. Procter",
                        "slug": "A.-Procter",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Procter",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Procter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "31123495"
                        ],
                        "name": "T. Webb",
                        "slug": "T.-Webb",
                        "structuredName": {
                            "firstName": "Tristan",
                            "lastName": "Webb",
                            "middleNames": [
                                "James"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Webb"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 152,
                                "start": 148
                            }
                        ],
                        "text": "DL frameworks have adopted compilers to tackle both performance and portability for existing applications, most notably XLA [55], Glow [38], nGraph [10], ONNC [24], PlaidML [9], and ModelCompiler."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 20334038,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "83fb3f8df8a8ae3a69cdf2b5044e73f0c56f9547",
            "isKey": false,
            "numCitedBy": 92,
            "numCiting": 5,
            "paperAbstract": {
                "fragments": [],
                "text": "The Deep Learning (DL) community sees many novel topologies published each year. Achieving high performance on each new topology remains challenging, as each requires some level of manual effort. This issue is compounded by the proliferation of frameworks and hardware platforms. The current approach, which we call \"direct optimization\", requires deep changes within each framework to improve the training performance for each hardware backend (CPUs, GPUs, FPGAs, ASICs) and requires $\\mathcal{O}(fp)$ effort; where $f$ is the number of frameworks and $p$ is the number of platforms. While optimized kernels for deep-learning primitives are provided via libraries like Intel Math Kernel Library for Deep Neural Networks (MKL-DNN), there are several compiler-inspired ways in which performance can be further optimized. Building on our experience creating neon (a fast deep learning library on GPUs), we developed Intel nGraph, a soon to be open-sourced C++ library to simplify the realization of optimized deep learning performance across frameworks and hardware platforms. Initially-supported frameworks include TensorFlow, MXNet, and Intel neon framework. Initial backends are Intel Architecture CPUs (CPU), the Intel(R) Nervana Neural Network Processor(R) (NNP), and NVIDIA GPUs. Currently supported compiler optimizations include efficient memory management and data layout abstraction. In this paper, we describe our overall architecture and its core components. In the future, we envision extending nGraph API support to a wider range of frameworks, hardware (including FPGAs and ASICs), and compiler optimizations (training versus inference optimizations, multi-node and multi-device scaling via efficient sub-graph partitioning, and HW-specific compounding of operations)."
            },
            "slug": "Intel-nGraph:-An-Intermediate-Representation,-and-Cyphers-Bansal",
            "title": {
                "fragments": [],
                "text": "Intel nGraph: An Intermediate Representation, Compiler, and Executor for Deep Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "Intel nGraph, a soon to be open-sourced C++ library to simplify the realization of optimized deep learning performance across frameworks and hardware platforms, is developed and the overall architecture and its core components are described."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2398772"
                        ],
                        "name": "G. Mainland",
                        "slug": "G.-Mainland",
                        "structuredName": {
                            "firstName": "Geoffrey",
                            "lastName": "Mainland",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Mainland"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2560604"
                        ],
                        "name": "Roman Leshchinskiy",
                        "slug": "Roman-Leshchinskiy",
                        "structuredName": {
                            "firstName": "Roman",
                            "lastName": "Leshchinskiy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Roman Leshchinskiy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144689023"
                        ],
                        "name": "S. Jones",
                        "slug": "S.-Jones",
                        "structuredName": {
                            "firstName": "Simon",
                            "lastName": "Jones",
                            "middleNames": [
                                "L.",
                                "Peyton"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Jones"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 116
                            }
                        ],
                        "text": "By borrowing from PL literature, we can apply program analysis and optimization techniques from decades of research [28]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 52860796,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "134580fab97363ebe7b31cf7ae4322e75375b62f",
            "isKey": false,
            "numCitedBy": 22,
            "numCiting": 13,
            "paperAbstract": {
                "fragments": [],
                "text": "Ideally, a program written as a composition of concise, self-contained components should perform as well as the equivalent hand-written version where the functionality of what was many components has been manually combined into a monolithic implementation. That is, programmers should not have to sacrifice code clarity or good software engineering practices to obtain performance---we want compositionality without a performance penalty. This work shows how to attain this goal for high-level Haskell in the domain of sequence-processing functions, which includes applications such as array processing. Prior work on stream fusion shows how to automatically transform some high-level sequence-processing functions into efficient implementations. It has been used to great effect in Haskell libraries for manipulating byte arrays, Unicode text, and unboxed vectors. However some operations, like vector append, do not perform well within the stream fusion framework. Others, like SIMD computation using the SSE and AVX instructions available on modern x86 chips, do not seem to fit in the stream fusion framework at all. We describe generalized stream fusion, which solves these issues through a careful choice of stream representation. Benchmarks show that high-level Haskell code written using our compiler and libraries can produce code that is faster than both compiler- and hand-vectorized C."
            },
            "slug": "Exploiting-vector-instructions-with-generalized-Mainland-Leshchinskiy",
            "title": {
                "fragments": [],
                "text": "Exploiting vector instructions with generalized stream fusion"
            },
            "venue": {
                "fragments": [],
                "text": "Commun. ACM"
            },
            "year": 2017
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 123,
                                "start": 111
                            }
                        ],
                        "text": "Data Abstraction Many models make use of additional data types beyond tuples, such as lists, trees, and graphs [21, 46, 23]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "The unreasonable effectiveness of recurrent neural networks. http://karpathy.github"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2015
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 79
                            }
                        ],
                        "text": "As a result, nontrivial extensions require patching or even forking frameworks [27, 47, 52, 41, 55, 38, 51]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 95,
                                "start": 91
                            }
                        ],
                        "text": "Define-By-Run Frameworks PyTorch [33], Gluon [12], Chainer [50], and TensorFlow eager-mode [41] are defineby-run frameworks which attempt to address the challenges of previous work."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Eager execution: An imperative, define-by-run interface to tensorflow. https://ai.googleblog.com/2017/10/ eager-execution-imperative-define-by.html"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2017
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 132,
                                "start": 128
                            }
                        ],
                        "text": "Unfortunately, current frameworks\u2019 IRs cannot directly encode trees, so she must use a framework extension like TensorFlow Fold [26]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 28,
                                "start": 13
                            }
                        ],
                        "text": "For example, TensorFlow Fold [27] extends TF with special combinators that dynamically compute a graph for each shape permutation; these high-level constructs are opaque to further optimizations."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 57,
                                "start": 53
                            }
                        ],
                        "text": "TensorFlow Fold addresses this particular limitation [26] but offers no general and extensible solution."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Announcing tensorflow fold: Deep learning with dynamic computation graphs. https://research.googleblog.com/2017/02/ announcing-tensorflow-fold-deep.html"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2017
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 79
                            }
                        ],
                        "text": "As a result, nontrivial extensions require patching or even forking frameworks [27, 47, 52, 41, 55, 38, 51]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Announcing tensorflow lite. https://developers.googleblog.com/2017/11/ announcing-tensorflow-lite.html, November 2017"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2017
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 263,
                                "start": 251
                            }
                        ],
                        "text": "We evaluated the following NLP models: CharRNN, a generator character-level RNN from a PyTorch tutorial; TreeLSTM, a generalization of LSTMs to tree-structured network topologies; and RNN, GRU, and LSTM, a selection of models from the Gluon Model Zoo [37, 46, 13]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Generating names with a characterlevel rnn"
            },
            "venue": {
                "fragments": [],
                "text": "https://pytorch.org/tutorials/ intermediate/char_rnn_generation_tutorial. html,"
            },
            "year": 2017
        }
    ],
    "meta_info": {
        "citationIntent": "all",
        "citationIntentCount": {
            "background": 27,
            "methodology": 14
        },
        "citationType": "citedPapers",
        "pageNumber": 1,
        "requestedPageSize": 10,
        "sort": "relevance",
        "totalCitations": 53,
        "totalPages": 6
    },
    "page_url": "https://www.semanticscholar.org/paper/Relay:-A-High-Level-Compiler-for-Deep-Learning-Roesch-Lyubomirsky/82995a95781ef5b906a71a5378a9133341bca96b?sort=total-citations"
}