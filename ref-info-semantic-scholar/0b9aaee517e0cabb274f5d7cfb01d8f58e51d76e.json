{
    "links": [
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1801789"
                        ],
                        "name": "M. Levoy",
                        "slug": "M.-Levoy",
                        "structuredName": {
                            "firstName": "Marc",
                            "lastName": "Levoy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Levoy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 79,
                                "start": 75
                            }
                        ],
                        "text": "Halide is a recent domain-specific language for image processing pipelines [36] that decouples the algorithm and schedule specification."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 15,
                                "start": 7
                            }
                        ],
                        "text": "Halide [36, 37] a recent domain-specific language and compiler for image processing pipelines focuses on both productivity and performance."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 53,
                                "start": 49
                            }
                        ],
                        "text": "The design of our language is inspired by Halide [36], and allows a user to intuitively express common computation patterns that emerge in image processing."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 13,
                                "start": 9
                            }
                        ],
                        "text": "float Ix [36][260]; float Iy [36][260]; float Syy [36][260]; float Sxy [36][260]; float Sxx [36][260]; for (int Tj = -1; Tj <= C/256; Tj +=1) { int lbi = max(1, 32*Ti); int ubi = min(R, 32*Ti + 35); for (int i = lbi; i <= ubi; i+=1) { int lbj = max(1, 256*Tj); int ubj = min(C, 256*Tj + 259); #pragma ivdep for (int j=lbj; j<=ubj; j+=1) { Iy[-32*Ti+i][ -256*Tj+j] = ."
                    },
                    "intents": []
                }
            ],
            "corpusId": 9001340,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3e06546182d5a36796a0f48e70151bf1d38e094d",
            "isKey": true,
            "numCitedBy": 247,
            "numCiting": 51,
            "paperAbstract": {
                "fragments": [],
                "text": "Using existing programming tools, writing high-performance image processing code requires sacrificing readability, portability, and modularity. We argue that this is a consequence of conflating what computations define the algorithm, with decisions about storage and the order of computation. We refer to these latter two concerns as the schedule, including choices of tiling, fusion, recomputation vs. storage, vectorization, and parallelism. We propose a representation for feed-forward imaging pipelines that separates the algorithm from its schedule, enabling high-performance without sacrificing code clarity. This decoupling simplifies the algorithm specification: images and intermediate buffers become functions over an infinite integer domain, with no explicit storage or boundary conditions. Imaging pipelines are compositions of functions. Programmers separately specify scheduling strategies for the various functions composing the algorithm, which allows them to efficiently explore different optimizations without changing the algorithmic code. We demonstrate the power of this representation by expressing a range of recent image processing applications in an embedded domain specific language called Halide, and compiling them for ARM, x86, and GPUs. Our compiler targets SIMD units, multiple cores, and complex memory hierarchies. We demonstrate that it can handle algorithms such as a camera raw pipeline, the bilateral grid, fast local Laplacian filtering, and image segmentation. The algorithms expressed in our language are both shorter and faster than state-of-the-art implementations."
            },
            "slug": "Decoupling-algorithms-from-schedules-for-easy-of-Ragan-Kelley-Adams",
            "title": {
                "fragments": [],
                "text": "Decoupling algorithms from schedules for easy optimization of image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This work proposes a representation for feed-forward imaging pipelines that separates the algorithm from its schedule, enabling high-performance without sacrificing code clarity, and demonstrates the power of this representation by expressing a range of recent image processing applications in an embedded domain specific language called Halide and compiling them for ARM, x86, and GPUs."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Graph."
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2496412"
                        ],
                        "name": "Connelly Barnes",
                        "slug": "Connelly-Barnes",
                        "structuredName": {
                            "firstName": "Connelly",
                            "lastName": "Barnes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Connelly Barnes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 15,
                                "start": 7
                            }
                        ],
                        "text": "Halide [36, 37] a recent domain-specific language and compiler for image processing pipelines focuses on both productivity and performance."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 4,
                                "start": 0
                            }
                        ],
                        "text": "[37] are either proprietary or not publicly available."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 39,
                                "start": 35
                            }
                        ],
                        "text": "Autotuning based on genetic search [37] was used in conjunction with Halide to explore the vast space of schedules."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 5885207,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d032f74b16457584f8a60ae07cfef9b617033638",
            "isKey": false,
            "numCitedBy": 878,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Image processing pipelines combine the challenges of stencil computations and stream programs. They are composed of large graphs of different stencil stages, as well as complex reductions, and stages with global or data-dependent access patterns. Because of their complex structure, the performance difference between a naive implementation of a pipeline and an optimized one is often an order of magnitude. Efficient implementations require optimization of both parallelism and locality, but due to the nature of stencils, there is a fundamental tension between parallelism, locality, and introducing redundant recomputation of shared values. We present a systematic model of the tradeoff space fundamental to stencil pipelines, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule. Combining this compiler with stochastic search over the space of schedules enables terse, composable programs to achieve state-of-the-art performance on a wide range of real image processing pipelines, and across different hardware architectures, including multicores with SIMD, and heterogeneous CPU+GPU execution. From simple Halide programs written in a few hours, we demonstrate performance up to 5x faster than hand-tuned C, intrinsics, and CUDA implementations optimized by experts over weeks or months, for image processing applications beyond the reach of past automatic compilers."
            },
            "slug": "Halide:-a-language-and-compiler-for-optimizing-and-Ragan-Kelley-Barnes",
            "title": {
                "fragments": [],
                "text": "Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A systematic model of the tradeoff space fundamental to stencil pipelines is presented, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule are presented."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI 2013"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2341914"
                        ],
                        "name": "Michael I. Gordon",
                        "slug": "Michael-I.-Gordon",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Gordon",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michael I. Gordon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1718457"
                        ],
                        "name": "William Thies",
                        "slug": "William-Thies",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Thies",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William Thies"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 8333054,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9b23d37b72ee7fe4f8bb3230e1640cbeb9c6c599",
            "isKey": false,
            "numCitedBy": 592,
            "numCiting": 47,
            "paperAbstract": {
                "fragments": [],
                "text": "As multicore architectures enter the mainstream, there is a pressing demand for high-level programming models that can effectively map to them. Stream programming offers an attractive way to expose coarse-grained parallelism, as streaming applications (image, video, DSP, etc.) are naturally represented by independent filters that communicate over explicit data channels.In this paper, we demonstrate an end-to-end stream compiler that attains robust multicore performance in the face of varying application characteristics. As benchmarks exhibit different amounts of task, data, and pipeline parallelism, we exploit all types of parallelism in a unified manner in order to achieve this generality. Our compiler, which maps from the StreamIt language to the 16-core Raw architecture, attains a 11.2x mean speedup over a single-core baseline, and a 1.84x speedup over our previous work."
            },
            "slug": "Exploiting-coarse-grained-task,-data,-and-pipeline-Gordon-Thies",
            "title": {
                "fragments": [],
                "text": "Exploiting coarse-grained task, data, and pipeline parallelism in stream programs"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This paper demonstrates an end-to-end stream compiler that attains robust multicore performance in the face of varying application characteristics and exploits all types of parallelism in a unified manner in order to achieve this generality."
            },
            "venue": {
                "fragments": [],
                "text": "ASPLOS XII"
            },
            "year": 2006
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1763408"
                        ],
                        "name": "Albert Hartono",
                        "slug": "Albert-Hartono",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Hartono",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Hartono"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145981817"
                        ],
                        "name": "J. Ramanujam",
                        "slug": "J.-Ramanujam",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Ramanujam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ramanujam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 170,
                                "start": 159
                            }
                        ],
                        "text": "Stencil optimization efforts have extensively focused on improving locality and parallelism for time-iterated stencil computations, resulting in parallelogram [8, 43, 44], diamond [5], split [22], and hybrid hexagonal [21] tiling techniques."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 45,
                                "start": 38
                            }
                        ],
                        "text": "Among these techniques, parallelogram [8, 44], split [26], overlapped [27, 29], diamond [5], and hexagonal [21] tiling use the polyhedral model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 7086982,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f0f4757aa2f923a349e8357e73850a78e9b80fee",
            "isKey": false,
            "numCitedBy": 860,
            "numCiting": 71,
            "paperAbstract": {
                "fragments": [],
                "text": "We present the design and implementation of an automatic polyhedral source-to-source transformation framework that can optimize regular programs (sequences of possibly imperfectly nested loops) for parallelism and locality simultaneously. Through this work, we show the practicality of analytical model-driven automatic transformation in the polyhedral model -- far beyond what is possible by current production compilers. Unlike previous works, our approach is an end-to-end fully automatic one driven by an integer linear optimization framework that takes an explicit view of finding good ways of tiling for parallelism and locality using affine transformations. The framework has been implemented into a tool to automatically generate OpenMP parallel code from C program sections. Experimental results from the tool show very high speedups for local and parallel execution on multi-cores over state-of-the-art compiler frameworks from the research community as well as the best native production compilers. The system also enables the easy use of powerful empirical/iterative optimization for general arbitrarily nested loop sequences."
            },
            "slug": "A-practical-automatic-polyhedral-parallelizer-and-Bondhugula-Hartono",
            "title": {
                "fragments": [],
                "text": "A practical automatic polyhedral parallelizer and locality optimizer"
            },
            "tldr": {
                "abstractSimilarityScore": 60,
                "text": "An automatic polyhedral source-to-source transformation framework that can optimize regular programs for parallelism and locality simultaneously simultaneously and is implemented into a tool to automatically generate OpenMP parallel code from C program sections."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '08"
            },
            "year": 2008
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2506136"
                        ],
                        "name": "Sylvain Girbal",
                        "slug": "Sylvain-Girbal",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Girbal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Girbal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1769333"
                        ],
                        "name": "C. Bastoul",
                        "slug": "C.-Bastoul",
                        "structuredName": {
                            "firstName": "C\u00e9dric",
                            "lastName": "Bastoul",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Bastoul"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1702824"
                        ],
                        "name": "David Parello",
                        "slug": "David-Parello",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Parello",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David Parello"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "18182536"
                        ],
                        "name": "Marc Sigler",
                        "slug": "Marc-Sigler",
                        "structuredName": {
                            "firstName": "Marc",
                            "lastName": "Sigler",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Marc Sigler"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1731764"
                        ],
                        "name": "O. Temam",
                        "slug": "O.-Temam",
                        "structuredName": {
                            "firstName": "Olivier",
                            "lastName": "Temam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Temam"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 8182159,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cc1c1b1eb6e9672d1b2813ad763f701494d8fcee",
            "isKey": false,
            "numCitedBy": 240,
            "numCiting": 123,
            "paperAbstract": {
                "fragments": [],
                "text": "Modern compilers are responsible for translating the idealistic operational semantics of the source program into a form that makes efficient use of a highly complex heterogeneous machine. Since optimization problems are associated with huge and unstructured search spaces, this combinational task is poorly achieved in general, resulting in weak scalability and disappointing sustained performance. We address this challenge by working on the program representation itself, using a semi-automatic optimization approach to demonstrate that current compilers offen suffer from unnecessary constraints and intricacies that can be avoided in a semantically richer transformation framework. Technically, the purpose of this paper is threefold: (1) to show that syntactic code representations close to the operational semantics lead to rigid phase ordering and cumbersome expression of architecture-aware loop transformations, (2) to illustrate how complex transformation sequences may be needed to achieve significant performance benefits, (3) to facilitate the automatic search for program transformation sequences, improving on classical polyhedral representations to better support operation research strategies in a simpler, structured search space. The proposed framework relies on a unified polyhedral representation of loops and statements, using normalization rules to allow flexible and expressive transformation sequencing. Thisrepresentation allows to extend the scalability of polyhedral dependence analysis, and to delay the (automatic) legality checks until the end of a transformation sequence. Our work leverages on algorithmic advances in polyhedral code generation and has been implemented in a modern research compiler."
            },
            "slug": "Semi-Automatic-Composition-of-Loop-Transformations-Girbal-Vasilache",
            "title": {
                "fragments": [],
                "text": "Semi-Automatic Composition of Loop Transformations for Deep Parallelism and Memory Hierarchies"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "This work leverages on algorithmic advances in polyhedral code generation and has been implemented in a modern research compiler, using a semi-automatic optimization approach to demonstrate that current compilers suffer from unnecessary constraints and intricacies that can be avoided in a semantically richer transformation framework."
            },
            "venue": {
                "fragments": [],
                "text": "International Journal of Parallel Programming"
            },
            "year": 2006
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1797584"
                        ],
                        "name": "O. G\u00fcnl\u00fck",
                        "slug": "O.-G\u00fcnl\u00fck",
                        "structuredName": {
                            "firstName": "Oktay",
                            "lastName": "G\u00fcnl\u00fck",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. G\u00fcnl\u00fck"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1693363"
                        ],
                        "name": "S. Dash",
                        "slug": "S.-Dash",
                        "structuredName": {
                            "firstName": "Sanjeeb",
                            "lastName": "Dash",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Dash"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2341687"
                        ],
                        "name": "Lakshminarayanan Renganarayanan",
                        "slug": "Lakshminarayanan-Renganarayanan",
                        "structuredName": {
                            "firstName": "Lakshminarayanan",
                            "lastName": "Renganarayanan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lakshminarayanan Renganarayanan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 2406509,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cfb284092b127b8e111b403a42c609616b2bddf3",
            "isKey": false,
            "numCitedBy": 63,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "Loop fusion has been studied extensively, but in a manner isolated from other transformations. This was mainly due to the lack of a powerful intermediate representation for application of compositions of high-level transformations. Fusion presents strong interactions with parallelism and locality. Currently, there exist no models to determine good fusion structures integrated with all components of an auto-parallelizing compiler. This is also one of the reasons why all the benefits of optimization and automatic parallelization of long sequences of loop nests spanning hundreds of lines of code have never been explored. We present a fusion model in an integrated automatic parallelization framework that simultaneously optimizes for hardware prefetch stream buffer utilization, locality, and parallelism. Characterizing the legal space of fusion structures in the polyhedral compiler framework is not difficult. However, incorporating useful optimization criteria into such a legal space to pick good fusion structures is very hard. The model we propose captures utilization of hardware prefetch streams, loss of parallelism, as well as constraints imposed by privatization and code expansion into a single convex optimization space. The model scales very well to program sections spanning hundreds of lines of code. It has been implemented into the polyhedral pass of the IBM XL optimizing compiler. Experimental results demonstrate its effectiveness in finding good fusion structures for codes including SPEC benchmarks and large applications. An improvement ranging from 5% to nearly a factor of 2.75\u00d7 is obtained over the current production compiler optimizer on these benchmarks."
            },
            "slug": "A-model-for-fusion-and-code-motion-in-an-automatic-Bondhugula-G\u00fcnl\u00fck",
            "title": {
                "fragments": [],
                "text": "A model for fusion and code motion in an automatic parallelizing compiler"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This work presents a fusion model in an integrated automatic parallelization framework that simultaneously optimizes for hardware prefetch stream buffer utilization, locality, and parallelism, and demonstrates effectiveness in finding good fusion structures for codes including SPEC benchmarks and large applications."
            },
            "venue": {
                "fragments": [],
                "text": "2010 19th International Conference on Parallel Architectures and Compilation Techniques (PACT)"
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2341914"
                        ],
                        "name": "Michael I. Gordon",
                        "slug": "Michael-I.-Gordon",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Gordon",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michael I. Gordon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1718457"
                        ],
                        "name": "William Thies",
                        "slug": "William-Thies",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Thies",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William Thies"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1739385"
                        ],
                        "name": "M. Karczmarek",
                        "slug": "M.-Karczmarek",
                        "structuredName": {
                            "firstName": "Michal",
                            "lastName": "Karczmarek",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Karczmarek"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48208672"
                        ],
                        "name": "Jasper Lin",
                        "slug": "Jasper-Lin",
                        "structuredName": {
                            "firstName": "Jasper",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jasper Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2602165"
                        ],
                        "name": "Ali S. Meli",
                        "slug": "Ali-S.-Meli",
                        "structuredName": {
                            "firstName": "Ali",
                            "lastName": "Meli",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ali S. Meli"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32689850"
                        ],
                        "name": "Andrew A. Lamb",
                        "slug": "Andrew-A.-Lamb",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Lamb",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew A. Lamb"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2070611374"
                        ],
                        "name": "Chris Leger",
                        "slug": "Chris-Leger",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Leger",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Leger"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1643893286"
                        ],
                        "name": "J.S.S.M. Wong",
                        "slug": "J.S.S.M.-Wong",
                        "structuredName": {
                            "firstName": "J.S.S.M.",
                            "lastName": "Wong",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J.S.S.M. Wong"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144704832"
                        ],
                        "name": "H. Hoffmann",
                        "slug": "H.-Hoffmann",
                        "structuredName": {
                            "firstName": "Henry",
                            "lastName": "Hoffmann",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Hoffmann"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144604583"
                        ],
                        "name": "David Maze",
                        "slug": "David-Maze",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Maze",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David Maze"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 110712,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "4ce393506dc1e0ddbc65225d2dad24d31d430c90",
            "isKey": false,
            "numCitedBy": 370,
            "numCiting": 39,
            "paperAbstract": {
                "fragments": [],
                "text": "With the increasing miniaturization of transistors, wire delays are becoming a dominant factor in microprocessor performance. To address this issue, a number of emerging architectures contain replicated processing units with software-exposed communication between one unit and another (e.g., Raw, SmartMemories, TRIPS). However, for their use to be widespread, it will be necessary to develop compiler technology that enables a portable, high-level language to execute efficiently across a range of wire-exposed architectures.In this paper, we describe our compiler for StreamIt: a high-level, architecture-independent language for streaming applications. We focus on our backend for the Raw processor. Though StreamIt exposes the parallelism and communication patterns of stream programs, some analysis is needed to adapt a stream program to a software-exposed processor. We describe a partitioning algorithm that employs fission and fusion transformations to adjust the granularity of a stream graph, a layout algorithm that maps a stream graph to a given network topology, and a scheduling strategy that generates a fine-grained static communication pattern for each computational element.We have implemented a fully functional compiler that parallelizes StreamIt applications for Raw, including several load-balancing transformations. Using the cycle-accurate Raw simulator, we demonstrate that the StreamIt compiler can automatically map a high-level stream abstraction to Raw without losing performance. We consider this work to be a first step towards a portable programming model for communication-exposed architectures."
            },
            "slug": "A-stream-compiler-for-communication-exposed-Gordon-Thies",
            "title": {
                "fragments": [],
                "text": "A stream compiler for communication-exposed architectures"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This paper describes a fully functional compiler that parallelizes StreamIt applications for Raw, including several load-balancing transformations, and demonstrates that the StreamIt compiler can automatically map a high-level stream abstraction to Raw without losing performance."
            },
            "venue": {
                "fragments": [],
                "text": "ASPLOS X"
            },
            "year": 2002
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "18182536"
                        ],
                        "name": "Marc Sigler",
                        "slug": "Marc-Sigler",
                        "structuredName": {
                            "firstName": "Marc",
                            "lastName": "Sigler",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Marc Sigler"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2506136"
                        ],
                        "name": "Sylvain Girbal",
                        "slug": "Sylvain-Girbal",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Girbal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Girbal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1731764"
                        ],
                        "name": "O. Temam",
                        "slug": "O.-Temam",
                        "structuredName": {
                            "firstName": "Olivier",
                            "lastName": "Temam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Temam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1702824"
                        ],
                        "name": "David Parello",
                        "slug": "David-Parello",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Parello",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David Parello"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 16965438,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "081fdf4787a2ec2cae16fa76a59c1747f4467e94",
            "isKey": false,
            "numCitedBy": 111,
            "numCiting": 42,
            "paperAbstract": {
                "fragments": [],
                "text": "Static compiler optimizations can hardly cope with the complex run-time behavior and hardware components interplay of modern processor architectures. Multiple architectural phenomena occur and interact simultaneously, which requires the optimizer to combine multiple program transformations. Whether these transformations are selected through static analysis and models, runtime feedback, or both, the underlying infrastructure must have the ability to perform long and complex compositions of program transformations in a flexible manner. Existing compilers are ill-equipped to perform that task because of rigid phase ordering, fragile selection rules using pattern matching, and cumbersome expression of loop transformations on syntax trees. Moreover, iterative optimization emerges as a pragmatic and general means to select an optimization strategy via machine learning and operations research. Searching for the composition of dozens of complex, dependent, parameterized transformations is a challenge for iterative approaches.The purpose of this article is threefold: (1) to facilitate the automatic search for compositions of program transformations, introducing a richer framework which improves on classical polyhedral representations, suitable for iterative optimization on a simpler, structured search space, (2) to illustrate, using several examples, that syntactic code representations close to the operational semantics hamper the composition of transformations, and (3) that complex compositions of transformations can be necessary to achieve significant performance benefits. The proposed framework relies on a unified polyhedral representation of loops and statements. The key is to clearly separate four types of actions associated with program transformations: iteration domain, schedule, data layout and memory access functions modifications. The framework is implemented within the Open64/ORC compiler, aiming for native IA64, AMD64 and IA32 code generation, along with source-to-source optimization of Fortran90, C and C++."
            },
            "slug": "Facilitating-the-search-for-compositions-of-program-Cohen-Sigler",
            "title": {
                "fragments": [],
                "text": "Facilitating the search for compositions of program transformations"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "The purpose of this article is to facilitate the automatic search for compositions of program transformations, introducing a richer framework which improves on classical polyhedral representations, suitable for iterative optimization on a simpler, structured search space, and to illustrate that complex compositions of transformations can be necessary to achieve significant performance benefits."
            },
            "venue": {
                "fragments": [],
                "text": "ICS '05"
            },
            "year": 2005
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1883512"
                        ],
                        "name": "Justin Holewinski",
                        "slug": "Justin-Holewinski",
                        "structuredName": {
                            "firstName": "Justin",
                            "lastName": "Holewinski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Justin Holewinski"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793611"
                        ],
                        "name": "L. Pouchet",
                        "slug": "L.-Pouchet",
                        "structuredName": {
                            "firstName": "Louis-No\u00ebl",
                            "lastName": "Pouchet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Pouchet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 18
                            }
                        ],
                        "text": "Overlapped tiling [27, 29, 46] is attractive in this context due to the dismissal of dependence between neighboring tiles \u2013 this greatly simplifies scratchpad allocation, indexing, and management."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 78,
                                "start": 70
                            }
                        ],
                        "text": "Among these techniques, parallelogram [8, 44], split [26], overlapped [27, 29], diamond [5], and hexagonal [21] tiling use the polyhedral model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 166,
                                "start": 158
                            }
                        ],
                        "text": "Our technique to construct overlapped tiles takes this heterogeneity into account, and minimizes overlap further in comparison to prior polyhedral approaches [27, 29]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 49,
                                "start": 41
                            }
                        ],
                        "text": "Current techniques for overlapped tiling [27, 29] are designed only for time-iterated stencil dependence patterns and cannot be directly applied in our context."
                    },
                    "intents": []
                }
            ],
            "corpusId": 15462468,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3087eeb39c88b1fc9bdc72812930451fc98cedec",
            "isKey": true,
            "numCitedBy": 231,
            "numCiting": 23,
            "paperAbstract": {
                "fragments": [],
                "text": "Stencil computations arise in many scientific computing domains, and often represent time-critical portions of applications. There is significant interest in offloading these computations to high-performance devices such as GPU accelerators, but these architectures offer challenges for developers and compilers alike. Stencil computations in particular require careful attention to off-chip memory access and the balancing of work among compute units in GPU devices.\n In this paper, we present a code generation scheme for stencil computations on GPU accelerators, which optimizes the code by trading an increase in the computational workload for a decrease in the required global memory bandwidth. We develop compiler algorithms for automatic generation of efficient, time-tiled stencil code for GPU accelerators from a high-level description of the stencil operation. We show that the code generation scheme can achieve high performance on a range of GPU architectures, including both nVidia and AMD devices."
            },
            "slug": "High-performance-code-generation-for-stencil-on-GPU-Holewinski-Pouchet",
            "title": {
                "fragments": [],
                "text": "High-performance code generation for stencil computations on GPU architectures"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "This paper develops compiler algorithms for automatic generation of efficient, time-tiled stencil code for GPU accelerators from a high-level description of the stencil operation, and shows that the code generation scheme can achieve high performance on a range of GPU architectures, including both nVidia and AMD devices."
            },
            "venue": {
                "fragments": [],
                "text": "ICS '12"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2375710"
                        ],
                        "name": "Zach DeVito",
                        "slug": "Zach-DeVito",
                        "structuredName": {
                            "firstName": "Zach",
                            "lastName": "DeVito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zach DeVito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2568050"
                        ],
                        "name": "N. Joubert",
                        "slug": "N.-Joubert",
                        "structuredName": {
                            "firstName": "Niels",
                            "lastName": "Joubert",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Joubert"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057602258"
                        ],
                        "name": "Francisco Palacios Ortega",
                        "slug": "Francisco-Palacios-Ortega",
                        "structuredName": {
                            "firstName": "Francisco",
                            "lastName": "Ortega",
                            "middleNames": [
                                "Palacios"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Francisco Palacios Ortega"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145328386"
                        ],
                        "name": "Stephen Oakley",
                        "slug": "Stephen-Oakley",
                        "structuredName": {
                            "firstName": "Stephen",
                            "lastName": "Oakley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Stephen Oakley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2068315412"
                        ],
                        "name": "Montserrat Medina",
                        "slug": "Montserrat-Medina",
                        "structuredName": {
                            "firstName": "Montserrat",
                            "lastName": "Medina",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Montserrat Medina"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49639660"
                        ],
                        "name": "M. Barrientos",
                        "slug": "M.-Barrientos",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Barrientos",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Barrientos"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064208331"
                        ],
                        "name": "E. Elsen",
                        "slug": "E.-Elsen",
                        "structuredName": {
                            "firstName": "Erich",
                            "lastName": "Elsen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Elsen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144698086"
                        ],
                        "name": "F. Ham",
                        "slug": "F.-Ham",
                        "structuredName": {
                            "firstName": "Frank",
                            "lastName": "Ham",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Ham"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144653825"
                        ],
                        "name": "A. Aiken",
                        "slug": "A.-Aiken",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Aiken",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Aiken"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1974037"
                        ],
                        "name": "K. Duraisamy",
                        "slug": "K.-Duraisamy",
                        "structuredName": {
                            "firstName": "Karthik",
                            "lastName": "Duraisamy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Duraisamy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3195327"
                        ],
                        "name": "Eric F Darve",
                        "slug": "Eric-F-Darve",
                        "structuredName": {
                            "firstName": "Eric",
                            "lastName": "Darve",
                            "middleNames": [
                                "F"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eric F Darve"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145409784"
                        ],
                        "name": "J. Alonso",
                        "slug": "J.-Alonso",
                        "structuredName": {
                            "firstName": "Juan",
                            "lastName": "Alonso",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Alonso"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144872229"
                        ],
                        "name": "P. Hanrahan",
                        "slug": "P.-Hanrahan",
                        "structuredName": {
                            "firstName": "Pat",
                            "lastName": "Hanrahan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Hanrahan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 87,
                                "start": 75
                            }
                        ],
                        "text": "Such an approach has been used successfully in the context of several DSLs [15, 28, 39]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 534409,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ef5a6a843ec0c0317f36713d71129b0ea64ba26c",
            "isKey": false,
            "numCitedBy": 256,
            "numCiting": 51,
            "paperAbstract": {
                "fragments": [],
                "text": "Heterogeneous computers with processors and accelerators are becoming widespread in scientific computing. However, it is difficult to program hybrid architectures and there is no commonly accepted programming model. Ideally, applications should be written in a way that is portable to many platforms, but providing this portability for general programs is a hard problem. By restricting the class of programs considered, we can make this portability feasible. We present Liszt, a domain- specific language for constructing mesh-based PDE solvers. We introduce language statements for interacting with an unstructured mesh, and storing data at its elements. Pro- gram analysis of these statements enables our compiler to expose the parallelism, locality, and synchronization of Liszt programs. Using this analysis, we generate applications for multiple platforms: a cluster, an SMP, and a GPU. This approach allows Liszt applications to perform within 12% of hand-written C++, scale to large clusters, and experience order-of-magnitude speedups on GPUs."
            },
            "slug": "Liszt:-A-domain-specific-language-for-building-PDE-DeVito-Joubert",
            "title": {
                "fragments": [],
                "text": "Liszt: A domain specific language for building portable mesh-based PDE solvers"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "Liszt is presented, a domain- specific language for constructing mesh-based PDE solvers, and language statements for interacting with an unstructured mesh, and storing data at its elements enable the compiler to expose the parallelism, locality, and synchronization of Liszt programs."
            },
            "venue": {
                "fragments": [],
                "text": "2011 International Conference for High Performance Computing, Networking, Storage and Analysis (SC)"
            },
            "year": 2011
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2279138"
                        ],
                        "name": "Thomas Henretty",
                        "slug": "Thomas-Henretty",
                        "structuredName": {
                            "firstName": "Thomas",
                            "lastName": "Henretty",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Thomas Henretty"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1792393"
                        ],
                        "name": "R. Veras",
                        "slug": "R.-Veras",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Veras",
                            "middleNames": [
                                "Michael"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Veras"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1803350"
                        ],
                        "name": "F. Franchetti",
                        "slug": "F.-Franchetti",
                        "structuredName": {
                            "firstName": "Franz",
                            "lastName": "Franchetti",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Franchetti"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793611"
                        ],
                        "name": "L. Pouchet",
                        "slug": "L.-Pouchet",
                        "structuredName": {
                            "firstName": "Louis-No\u00ebl",
                            "lastName": "Pouchet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Pouchet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145981817"
                        ],
                        "name": "J. Ramanujam",
                        "slug": "J.-Ramanujam",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Ramanujam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ramanujam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 57,
                                "start": 53
                            }
                        ],
                        "text": "Among these techniques, parallelogram [8, 44], split [26], overlapped [27, 29], diamond [5], and hexagonal [21] tiling use the polyhedral model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 11447621,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6fded3e440a34308ed3fba310c85e7ef9a5f050d",
            "isKey": false,
            "numCitedBy": 121,
            "numCiting": 23,
            "paperAbstract": {
                "fragments": [],
                "text": "Stencil computations are an integral component of applications in a number of scientific computing domains. Short-vector SIMD instruction sets are ubiquitous on modern processors and can be used to significantly increase the performance of stencil computations. Traditional approaches to optimizing stencils on these platforms have focused on either short-vector SIMD or data locality optimizations. In this paper, we propose a domain specific language and compiler for stencil computations that allows specification of stencils in a concise manner and automates both locality and short-vector SIMD optimizations, along with effective utilization of multi-core parallelism. Loop transformations to enhance data locality and enable load-balanced parallelism are combined with a data layout transformation to effectively increase the performance of stencil computations. Performance increases are demonstrated for a number of stencils on several modern SIMD architectures."
            },
            "slug": "A-stencil-compiler-for-short-vector-SIMD-Henretty-Veras",
            "title": {
                "fragments": [],
                "text": "A stencil compiler for short-vector SIMD architectures"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "A domain specific language and compiler for stencil computations is proposed that allows specification of stencils in a concise manner and automates both locality and short-vector SIMD optimizations, along with effective utilization of multi-core parallelism."
            },
            "venue": {
                "fragments": [],
                "text": "ICS '13"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144497869"
                        ],
                        "name": "S. Krishnamoorthy",
                        "slug": "S.-Krishnamoorthy",
                        "structuredName": {
                            "firstName": "Sriram",
                            "lastName": "Krishnamoorthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Krishnamoorthy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47800062"
                        ],
                        "name": "M. Baskaran",
                        "slug": "M.-Baskaran",
                        "structuredName": {
                            "firstName": "Muthu",
                            "lastName": "Baskaran",
                            "middleNames": [
                                "Manikandan"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Baskaran"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145981817"
                        ],
                        "name": "J. Ramanujam",
                        "slug": "J.-Ramanujam",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Ramanujam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ramanujam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793925"
                        ],
                        "name": "A. Rountev",
                        "slug": "A.-Rountev",
                        "structuredName": {
                            "firstName": "Atanas",
                            "lastName": "Rountev",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Rountev"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 18
                            }
                        ],
                        "text": "Overlapped tiling [27, 29, 46] is attractive in this context due to the dismissal of dependence between neighboring tiles \u2013 this greatly simplifies scratchpad allocation, indexing, and management."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 78,
                                "start": 70
                            }
                        ],
                        "text": "Among these techniques, parallelogram [8, 44], split [26], overlapped [27, 29], diamond [5], and hexagonal [21] tiling use the polyhedral model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 166,
                                "start": 158
                            }
                        ],
                        "text": "Our technique to construct overlapped tiles takes this heterogeneity into account, and minimizes overlap further in comparison to prior polyhedral approaches [27, 29]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 49,
                                "start": 41
                            }
                        ],
                        "text": "Current techniques for overlapped tiling [27, 29] are designed only for time-iterated stencil dependence patterns and cannot be directly applied in our context."
                    },
                    "intents": []
                }
            ],
            "corpusId": 900262,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "1bec73cbc0ffb8eb32d6da63895f5319b7409386",
            "isKey": false,
            "numCitedBy": 221,
            "numCiting": 31,
            "paperAbstract": {
                "fragments": [],
                "text": "Performance optimization of stencil computations has been widely studied in the literature, since they occur in many computationally intensive scientific and engineering applications. Compiler frameworks have also been developed that can transform sequential stencil codes for optimization of data locality and parallelism. However, loop skewing is typically required in order to tile stencil codes along the time dimension, resulting in load imbalance in pipelined parallel execution of the tiles. In this paper, we develop an approach for automatic parallelization of stencil codes, that explicitly addresses the issue of load-balanced execution of tiles. Experimental results are provided that demonstrate the effectiveness of the approach."
            },
            "slug": "Effective-automatic-parallelization-of-stencil-Krishnamoorthy-Baskaran",
            "title": {
                "fragments": [],
                "text": "Effective automatic parallelization of stencil computations"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This paper develops an approach for automatic parallelization of stencil codes, that explicitly addresses the issue of load-balanced execution of tiles, and demonstrates the effectiveness of the approach."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '07"
            },
            "year": 2007
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2207212"
                        ],
                        "name": "Sungpack Hong",
                        "slug": "Sungpack-Hong",
                        "structuredName": {
                            "firstName": "Sungpack",
                            "lastName": "Hong",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sungpack Hong"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1694512"
                        ],
                        "name": "H. Chafi",
                        "slug": "H.-Chafi",
                        "structuredName": {
                            "firstName": "Hassan",
                            "lastName": "Chafi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Chafi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3243326"
                        ],
                        "name": "Eric Sedlar",
                        "slug": "Eric-Sedlar",
                        "structuredName": {
                            "firstName": "Eric",
                            "lastName": "Sedlar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eric Sedlar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1746638"
                        ],
                        "name": "K. Olukotun",
                        "slug": "K.-Olukotun",
                        "structuredName": {
                            "firstName": "Kunle",
                            "lastName": "Olukotun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Olukotun"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "Categories and Subject Descriptors D.3.4 [Programming Languages]: Processors \u2013 compilers, optimization, code generation\nKeywords Domain-specific language; image processing; polyhedral optimization; locality; parallelism; tiling; multicores; vectorization"
                    },
                    "intents": []
                }
            ],
            "corpusId": 5721606,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "e82ebc17c5eace74f5e300dce8fff69b1d5118e9",
            "isKey": true,
            "numCitedBy": 293,
            "numCiting": 42,
            "paperAbstract": {
                "fragments": [],
                "text": "The increasing importance of graph-data based applications is fueling the need for highly efficient and parallel implementations of graph analysis software. In this paper we describe Green-Marl, a domain-specific language (DSL) whose high level language constructs allow developers to describe their graph analysis algorithms intuitively, but expose the data-level parallelism inherent in the algorithms. We also present our Green-Marl compiler which translates high-level algorithmic description written in Green-Marl into an efficient C++ implementation by exploiting this exposed data-level parallelism. Furthermore, our Green-Marl compiler applies a set of optimizations that take advantage of the high-level semantic knowledge encoded in the Green-Marl DSL. We demonstrate that graph analysis algorithms can be written very intuitively with Green-Marl through some examples, and our experimental results show that the compiler-generated implementation out of such descriptions performs as well as or better than highly-tuned hand-coded implementations."
            },
            "slug": "Green-Marl:-a-DSL-for-easy-and-efficient-graph-Hong-Chafi",
            "title": {
                "fragments": [],
                "text": "Green-Marl: a DSL for easy and efficient graph analysis"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This paper describes Green-Marl, a domain-specific language (DSL) whose high level language constructs allow developers to describe their graph analysis algorithms intuitively, but expose the data-level parallelism inherent in the algorithms."
            },
            "venue": {
                "fragments": [],
                "text": "ASPLOS XVII"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143896454"
                        ],
                        "name": "Mary W. Hall",
                        "slug": "Mary-W.-Hall",
                        "structuredName": {
                            "firstName": "Mary",
                            "lastName": "Hall",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mary W. Hall"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772362"
                        ],
                        "name": "Jacqueline Chame",
                        "slug": "Jacqueline-Chame",
                        "structuredName": {
                            "firstName": "Jacqueline",
                            "lastName": "Chame",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jacqueline Chame"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2109525543"
                        ],
                        "name": "Chun Chen",
                        "slug": "Chun-Chen",
                        "structuredName": {
                            "firstName": "Chun",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chun Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2111108147"
                        ],
                        "name": "Jaewook Shin",
                        "slug": "Jaewook-Shin",
                        "structuredName": {
                            "firstName": "Jaewook",
                            "lastName": "Shin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jaewook Shin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40335288"
                        ],
                        "name": "Gabe Rudy",
                        "slug": "Gabe-Rudy",
                        "structuredName": {
                            "firstName": "Gabe",
                            "lastName": "Rudy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gabe Rudy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "31568526"
                        ],
                        "name": "M. Khan",
                        "slug": "M.-Khan",
                        "structuredName": {
                            "firstName": "Malik",
                            "lastName": "Khan",
                            "middleNames": [
                                "Murtaza"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Khan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 8,
                                "start": 0
                            }
                        ],
                        "text": "[24, 41] have taken a decoupled view of computation (as a set of iteration domains) and schedules (as multi-dimensional affine functions)."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 17524405,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3ab39b6f60e163a4a609410f320555ddc20b3976",
            "isKey": false,
            "numCitedBy": 108,
            "numCiting": 52,
            "paperAbstract": {
                "fragments": [],
                "text": "In this paper, we describe transformation recipes, which provide a high-level interface to the code transformation and code generation capability of a compiler. These recipes can be generated by compiler decision algorithms or savvy software developers. This interface is part of an auto-tuning framework that explores a set of different implementations of the same computation and automatically selects the best-performing implementation. Along with the original computation, a transformation recipe specifies a range of implementations of the computation resulting from composing a set of high-level code transformations. In our system, an underlying polyhedral framework coupled with transformation algorithms takes this set of transformations, composes them and automatically generates correct code. We first describe an abstract interface for transformation recipes, which we propose to facilitate interoperability with other transformation frameworks. We then focus on the specific transformation recipe interface used in our compiler and present performance results on its application to kernel and library tuning and tuning of key computations in high-end applications. We also show how this framework can be used to generate and auto-tune parallel OpenMP or CUDA code from a high-level specification."
            },
            "slug": "Loop-Transformation-Recipes-for-Code-Generation-and-Hall-Chame",
            "title": {
                "fragments": [],
                "text": "Loop Transformation Recipes for Code Generation and Auto-Tuning"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "An abstract interface for transformation recipes is described, which is proposed to facilitate interoperability with other transformation frameworks and present performance results on its application to kernel and library tuning and tuning of key computations in high-end applications."
            },
            "venue": {
                "fragments": [],
                "text": "LCPC"
            },
            "year": 2009
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1769333"
                        ],
                        "name": "C. Bastoul",
                        "slug": "C.-Bastoul",
                        "structuredName": {
                            "firstName": "C\u00e9dric",
                            "lastName": "Bastoul",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Bastoul"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 61,
                                "start": 54
                            }
                        ],
                        "text": "Polyhedral compilation frameworks, since the works of Bastoul [6], Cohen et al [13, 17], and Hall et al. [24, 41] have taken a decoupled view of computation (as a set of iteration domains) and schedules (as multi-dimensional affine functions)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 65,
                                "start": 62
                            }
                        ],
                        "text": "Polyhedral compilation frameworks, since the works of Bastoul [6], Cohen et al [13, 17], and Hall et al."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 7971227,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d2f48fb9fd31390c56609f00510accf5c56f9f9b",
            "isKey": false,
            "numCitedBy": 518,
            "numCiting": 41,
            "paperAbstract": {
                "fragments": [],
                "text": "Many advances in automatic parallelization and optimization have been achieved through the polyhedral model. It has been extensively shown that this computational model provides convenient abstractions to reason about and apply program transformations. Nevertheless, the complexity of code generation has long been a deterrent for using polyhedral representation in optimizing compilers. First, code generators have a hard time coping with generated code size and control overhead that may spoil theoretical benefits achieved by the transformations. Second, this step is usually time consuming, hampering the integration of the polyhedral framework in production compilers or feedback-directed, iterative optimization schemes. Moreover, current code generation algorithms only cover a restrictive set of possible transformation functions. This paper discusses a general transformation framework able to deal with nonunimodular, noninvertible, nonintegral or even nonuniform functions. It presents several improvements to a state-of-the-art code generation algorithm. Two directions are explored: generated code size and code generator efficiency. Experimental evidence proves the ability of the improved method to handle real-life problems."
            },
            "slug": "Code-generation-in-the-polyhedral-model-is-easier-Bastoul",
            "title": {
                "fragments": [],
                "text": "Code generation in the polyhedral model is easier than you think"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "A general transformation framework able to deal with nonunimodular, noninvertible, nonintegral or even nonuniform functions is discussed and several improvements to a state-of-the-art code generation algorithm are presented."
            },
            "venue": {
                "fragments": [],
                "text": "Proceedings. 13th International Conference on Parallel Architecture and Compilation Techniques, 2004. PACT 2004."
            },
            "year": 2004
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3116070"
                        ],
                        "name": "Vinayaka Bandishti",
                        "slug": "Vinayaka-Bandishti",
                        "structuredName": {
                            "firstName": "Vinayaka",
                            "lastName": "Bandishti",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vinayaka Bandishti"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2382205"
                        ],
                        "name": "Irshad Pananilath",
                        "slug": "Irshad-Pananilath",
                        "structuredName": {
                            "firstName": "Irshad",
                            "lastName": "Pananilath",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Irshad Pananilath"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 183,
                                "start": 180
                            }
                        ],
                        "text": "Stencil optimization efforts have extensively focused on improving locality and parallelism for time-iterated stencil computations, resulting in parallelogram [8, 43, 44], diamond [5], split [22], and hybrid hexagonal [21] tiling techniques."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 91,
                                "start": 88
                            }
                        ],
                        "text": "Among these techniques, parallelogram [8, 44], split [26], overlapped [27, 29], diamond [5], and hexagonal [21] tiling use the polyhedral model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 6021422,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "599802d68c1cf7d9fdaf3fea337f479c29c1832a",
            "isKey": false,
            "numCitedBy": 122,
            "numCiting": 63,
            "paperAbstract": {
                "fragments": [],
                "text": "Most stencil computations allow tile-wise concurrent start, i.e., there always exists a face of the iteration space and a set of tiling hyperplanes such that all tiles along that face can be started concurrently. This provides load balance and maximizes parallelism. However, existing automatic tiling frameworks often choose hyperplanes that lead to pipelined start-up and load imbalance. We address this issue with a new tiling technique that ensures concurrent start-up as well as perfect load-balance whenever possible. We first provide necessary and sufficient conditions on tiling hyperplanes to enable concurrent start for programs with affine data accesses. We then provide an approach to find such hyperplanes. Experimental evaluation on a 12-core Intel Westmere shows that our code is able to outperform a tuned domain-specific stencil code generator by 4% to 27%, and previous compiler techniques by a factor of 2\u00d7 to 10.14\u00d7."
            },
            "slug": "Tiling-stencil-computations-to-maximize-parallelism-Bandishti-Pananilath",
            "title": {
                "fragments": [],
                "text": "Tiling stencil computations to maximize parallelism"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This work provides necessary and sufficient conditions on tiling hyperplanes to enable concurrent start for programs with affine data accesses and provides an approach to find such hyperplanes."
            },
            "venue": {
                "fragments": [],
                "text": "2012 International Conference for High Performance Computing, Networking, Storage and Analysis"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2497343"
                        ],
                        "name": "Sanyam Mehta",
                        "slug": "Sanyam-Mehta",
                        "structuredName": {
                            "firstName": "Sanyam",
                            "lastName": "Mehta",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sanyam Mehta"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2113316488"
                        ],
                        "name": "P. Lin",
                        "slug": "P.-Lin",
                        "structuredName": {
                            "firstName": "Pei-Hung",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1699961"
                        ],
                        "name": "P. Yew",
                        "slug": "P.-Yew",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Yew",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Yew"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 18203522,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8ca3be326a523d8d4177166cc3ffd29bffd0a0e3",
            "isKey": false,
            "numCitedBy": 24,
            "numCiting": 30,
            "paperAbstract": {
                "fragments": [],
                "text": "Loop fusion is an important compiler optimization for improving memory hierarchy performance through enabling data reuse. Traditional compilers have approached loop fusion in a manner decoupled from other high-level loop optimizations, missing several interesting solutions. Recently, the polyhedral compiler framework with its ability to compose complex transformations, has proved to be promising in performing loop optimizations for small programs. However, our experiments with large programs using state-of-the-art polyhedral compiler frameworks reveal suboptimal fusion partitions in the transformed code. We trace the reason for this to be lack of an effective cost model to choose a good fusion partitioning among the possible choices, which increase exponentially with the number of program statements. In this paper, we propose a fusion algorithm to choose good fusion partitions with two objective functions - achieving good data reuse and preserving parallelism inherent in the source code. These objectives, although targeted by previous work in traditional compilers, pose new challenges within the polyhedral compiler framework and have thus not been addressed. In our algorithm, we propose several heuristics that work effectively within the polyhedral compiler framework and allow us to achieve the proposed objectives. Experimental results show that our fusion algorithm achieves performance comparable to the existing polyhedral compilers for small kernel programs, and significantly outperforms them for large benchmark programs such as those in the SPEC benchmark suite."
            },
            "slug": "Revisiting-loop-fusion-in-the-polyhedral-framework-Mehta-Lin",
            "title": {
                "fragments": [],
                "text": "Revisiting loop fusion in the polyhedral framework"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "In this paper, a fusion algorithm to choose good fusion partitions with two objective functions - achieving good data reuse and preserving parallelism inherent in the source code is proposed and significantly outperforms existing polyhedral compilers for large benchmark programs such as those in the SPEC benchmark suite."
            },
            "venue": {
                "fragments": [],
                "text": "PPoPP '14"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144437216"
                        ],
                        "name": "I. Buck",
                        "slug": "I.-Buck",
                        "structuredName": {
                            "firstName": "Ian",
                            "lastName": "Buck",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "I. Buck"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143882867"
                        ],
                        "name": "T. Foley",
                        "slug": "T.-Foley",
                        "structuredName": {
                            "firstName": "Tim",
                            "lastName": "Foley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Foley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144353929"
                        ],
                        "name": "D. Horn",
                        "slug": "D.-Horn",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Horn",
                            "middleNames": [
                                "Reiter"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Horn"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3200943"
                        ],
                        "name": "J. Sugerman",
                        "slug": "J.-Sugerman",
                        "structuredName": {
                            "firstName": "Jeremy",
                            "lastName": "Sugerman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Sugerman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2789576"
                        ],
                        "name": "Kayvon Fatahalian",
                        "slug": "Kayvon-Fatahalian",
                        "structuredName": {
                            "firstName": "Kayvon",
                            "lastName": "Fatahalian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kayvon Fatahalian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "21387495"
                        ],
                        "name": "M. Houston",
                        "slug": "M.-Houston",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Houston",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Houston"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144872229"
                        ],
                        "name": "P. Hanrahan",
                        "slug": "P.-Hanrahan",
                        "structuredName": {
                            "firstName": "Pat",
                            "lastName": "Hanrahan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Hanrahan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 80,
                                "start": 65
                            }
                        ],
                        "text": "There is a large body of work on compilation of stream languages [9, 19, 20, 40]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 5650649,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b5aa2c16c495e44a3a69e246e17eb155a0e9acc4",
            "isKey": false,
            "numCitedBy": 859,
            "numCiting": 72,
            "paperAbstract": {
                "fragments": [],
                "text": "In this paper, we present Brook for GPUs, a system for general-purpose computation on programmable graphics hardware. Brook extends C to include simple data-parallel constructs, enabling the use of the GPU as a streaming co-processor. We present a compiler and runtime system that abstracts and virtualizes many aspects of graphics hardware. In addition, we present an analysis of the effectiveness of the GPU as a compute engine compared to the CPU, to determine when the GPU can outperform the CPU for a particular algorithm. We evaluate our system with five applications, the SAXPY and SGEMV BLAS operators, image segmentation, FFT, and ray tracing. For these applications, we demonstrate that our Brook implementations perform comparably to hand-written GPU code and up to seven times faster than their CPU counterparts."
            },
            "slug": "Brook-for-GPUs:-stream-computing-on-graphics-Buck-Foley",
            "title": {
                "fragments": [],
                "text": "Brook for GPUs: stream computing on graphics hardware"
            },
            "tldr": {
                "abstractSimilarityScore": 66,
                "text": "This paper presents Brook for GPUs, a system for general-purpose computation on programmable graphics hardware that abstracts and virtualizes many aspects of graphics hardware, and presents an analysis of the effectiveness of the GPU as a compute engine compared to the CPU."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Graph."
            },
            "year": 2004
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39223955"
                        ],
                        "name": "Ananta Tiwari",
                        "slug": "Ananta-Tiwari",
                        "structuredName": {
                            "firstName": "Ananta",
                            "lastName": "Tiwari",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ananta Tiwari"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2109525543"
                        ],
                        "name": "Chun Chen",
                        "slug": "Chun-Chen",
                        "structuredName": {
                            "firstName": "Chun",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chun Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772362"
                        ],
                        "name": "Jacqueline Chame",
                        "slug": "Jacqueline-Chame",
                        "structuredName": {
                            "firstName": "Jacqueline",
                            "lastName": "Chame",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jacqueline Chame"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143896454"
                        ],
                        "name": "Mary W. Hall",
                        "slug": "Mary-W.-Hall",
                        "structuredName": {
                            "firstName": "Mary",
                            "lastName": "Hall",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mary W. Hall"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1754659"
                        ],
                        "name": "J. Hollingsworth",
                        "slug": "J.-Hollingsworth",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Hollingsworth",
                            "middleNames": [
                                "K."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Hollingsworth"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 14273486,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f2c72bea63e2cb45823ca8c8ef57c06a45e884b2",
            "isKey": false,
            "numCitedBy": 220,
            "numCiting": 25,
            "paperAbstract": {
                "fragments": [],
                "text": "We describe a scalable and general-purpose framework for auto-tuning compiler-generated code. We combine Active Harmony's parallel search backend with the CHiLL compiler transformation framework to generate in parallel a set of alternative implementations of computation kernels and automatically select the one with the best-performing implementation. The resulting system achieves performance of compiler-generated code comparable to the fully automated version of the ATLAS library for the tested kernels. Performance for various kernels is 1.4 to 3.6 times faster than the native Intel compiler without search. Our search algorithm simultaneously evaluates different combinations of compiler optimizations and converges to solutions in only a few tens of search-steps."
            },
            "slug": "A-scalable-auto-tuning-framework-for-compiler-Tiwari-Chen",
            "title": {
                "fragments": [],
                "text": "A scalable auto-tuning framework for compiler optimization"
            },
            "tldr": {
                "abstractSimilarityScore": 60,
                "text": "A scalable and general-purpose framework for auto-tuning compiler-generated code that simultaneously evaluates different combinations of compiler optimizations and converges to solutions in only a few tens of search-steps is described."
            },
            "venue": {
                "fragments": [],
                "text": "2009 IEEE International Symposium on Parallel & Distributed Processing"
            },
            "year": 2009
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1883512"
                        ],
                        "name": "Justin Holewinski",
                        "slug": "Justin-Holewinski",
                        "structuredName": {
                            "firstName": "Justin",
                            "lastName": "Holewinski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Justin Holewinski"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 222,
                                "start": 218
                            }
                        ],
                        "text": "Stencil optimization efforts have extensively focused on improving locality and parallelism for time-iterated stencil computations, resulting in parallelogram [8, 43, 44], diamond [5], split [22], and hybrid hexagonal [21] tiling techniques."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 111,
                                "start": 107
                            }
                        ],
                        "text": "Among these techniques, parallelogram [8, 44], split [26], overlapped [27, 29], diamond [5], and hexagonal [21] tiling use the polyhedral model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 14200644,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "618fa1c14e3c6008eb047002311d21cae412eebc",
            "isKey": false,
            "numCitedBy": 107,
            "numCiting": 30,
            "paperAbstract": {
                "fragments": [],
                "text": "Time-tiling is necessary for the efficient execution of iterative stencil computations. Classical hyper-rectangular tiles cannot be used due to the combination of backward and forward dependences along space dimensions. Existing techniques trade temporal data reuse for inefficiencies in other areas, such as load imbalance, redundant computations, or increased control flow overhead, therefore making it challenging for use with GPUs.\n We propose a time-tiling method for iterative stencil computations on GPUs. Our method does not involve redundant computations. It favors coalesced global-memory accesses, data reuse in local/shared-memory or cache, avoidance of thread divergence, and concurrency, combining hexagonal tile shapes along the time and one spatial dimension with classical tiling along the other spatial dimensions. Hexagonal tiles expose multi-level parallelism as well as data reuse. Experimental results demonstrate significant performance improvements over existing stencil compilers."
            },
            "slug": "Hybrid-Hexagonal/Classical-Tiling-for-GPUs-Grosser-Cohen",
            "title": {
                "fragments": [],
                "text": "Hybrid Hexagonal/Classical Tiling for GPUs"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "A time-tiling method for iterative stencil computations on GPUs that favors coalesced global-memory accesses, data reuse in local/shared-memory or cache, avoidance of thread divergence, and concurrency, combining hexagonal tile shapes along the time and one spatial dimension with classical tiling along the other spatial dimensions is proposed."
            },
            "venue": {
                "fragments": [],
                "text": "CGO '14"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144965099"
                        ],
                        "name": "Conal Elliott",
                        "slug": "Conal-Elliott",
                        "structuredName": {
                            "firstName": "Conal",
                            "lastName": "Elliott",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Conal Elliott"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 59,
                                "start": 47
                            }
                        ],
                        "text": "Other prior work on image processing languages [16, 35, 38] has focused more on the language, programmability and expressiveness aspects while proposing simple and limited optimization."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 87,
                                "start": 83
                            }
                        ],
                        "text": "For image processing, languages like CoreImage [35] and functional image synthesis [16] have focused on creating easy-to-use abstractions with minimal compiler optimization."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 54801877,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "05e9ea2f6382fe7324a838242ec0bcad117c764c",
            "isKey": false,
            "numCitedBy": 20,
            "numCiting": 22,
            "paperAbstract": {
                "fragments": [],
                "text": "Software used to produce visual beauty is usually created with imperative programming languages and is typically unbeautiful itself. One fundamental reason for this situation is that these languages reflect the underlying discreteness and sequentiality of the computers that run them. The essential nature of what an image is becomes muddled with details of how to display it on a computer. We can, however, generate beautiful images with beautiful programs, by making a shift of programming paradigm, from doing to being. This claim is illustrated by many examples expressed in Pan, an image synthesis language with a freely available optimizing compiler."
            },
            "slug": "Functional-Image-Synthesis-Elliott",
            "title": {
                "fragments": [],
                "text": "Functional Image Synthesis"
            },
            "tldr": {
                "abstractSimilarityScore": 38,
                "text": "Pan, an image synthesis language with a freely available optimizing compiler, proves that one can generate beautiful images with beautiful programs, by making a shift of programming paradigm, from doing to being."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2001
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144676513"
                        ],
                        "name": "P. Kelly",
                        "slug": "P.-Kelly",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Kelly",
                            "middleNames": [
                                "H.",
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Kelly"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145981817"
                        ],
                        "name": "J. Ramanujam",
                        "slug": "J.-Ramanujam",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Ramanujam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ramanujam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 16414295,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "7c2beb7b8770b40caf55dc10437023e60a8fed35",
            "isKey": false,
            "numCitedBy": 75,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "Tiling is a key technique to enhance data reuse. For computations structured as one sequential outer \"time\" loop enclosing a set of parallel inner loops, tiling only the parallel inner loops may not enable enough data reuse in the cache. Tiling the inner loops along with the outer time loop enhances data locality but may require other transformations like loop skewing that inhibit inter-tile parallelism.\n One approach to tiling that enhances data locality without inhibiting inter-tile parallelism is split tiling, where tiles are subdivided into a sequence of trapezoidal computation steps. In this paper, we develop an approach to generate split tiled code for GPUs in the PPCG polyhedral code generator. We propose a generic algorithm to calculate index-set splitting that enables us to perform tiling for locality and synchronization avoidance, while simultaneously maintaining parallelism, without the need for skewing or redundant computations. Our algorithm performs split tiling for an arbitrary number of dimensions and without the need to construct any large integer linear program. The method and its implementation are evaluated on standard stencil kernels and compared with a state-of-the-art polyhedral compiler and with a domain-specific stencil compiler, both targeting CUDA GPUs."
            },
            "slug": "Split-tiling-for-GPUs:-automatic-parallelization-Grosser-Cohen",
            "title": {
                "fragments": [],
                "text": "Split tiling for GPUs: automatic parallelization using trapezoidal tiles"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This paper proposes a generic algorithm to calculate index-set splitting that enables us to perform tiling for locality and synchronization avoidance, while simultaneously maintaining parallelism, without the need for skewing or redundant computations."
            },
            "venue": {
                "fragments": [],
                "text": "GPGPU@ASPLOS"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145506199"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3129635"
                        ],
                        "name": "Eino-Ville Talvala",
                        "slug": "Eino-Ville-Talvala",
                        "structuredName": {
                            "firstName": "Eino-Ville",
                            "lastName": "Talvala",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eino-Ville Talvala"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2115277036"
                        ],
                        "name": "S. H. Park",
                        "slug": "S.-H.-Park",
                        "structuredName": {
                            "firstName": "Sung",
                            "lastName": "Park",
                            "middleNames": [
                                "Hee"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. H. Park"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2059096618"
                        ],
                        "name": "David E. Jacobs",
                        "slug": "David-E.-Jacobs",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Jacobs",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David E. Jacobs"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2027612"
                        ],
                        "name": "B. Ajdin",
                        "slug": "B.-Ajdin",
                        "structuredName": {
                            "firstName": "Boris",
                            "lastName": "Ajdin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "B. Ajdin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1683095"
                        ],
                        "name": "N. Gelfand",
                        "slug": "N.-Gelfand",
                        "structuredName": {
                            "firstName": "Natasha",
                            "lastName": "Gelfand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Gelfand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2889257"
                        ],
                        "name": "Jennifer Dolson",
                        "slug": "Jennifer-Dolson",
                        "structuredName": {
                            "firstName": "Jennifer",
                            "lastName": "Dolson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jennifer Dolson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2000950"
                        ],
                        "name": "D. Vaquero",
                        "slug": "D.-Vaquero",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Vaquero",
                            "middleNames": [
                                "Andr\u00e9"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Vaquero"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1969961"
                        ],
                        "name": "Jongmin Baek",
                        "slug": "Jongmin-Baek",
                        "structuredName": {
                            "firstName": "Jongmin",
                            "lastName": "Baek",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jongmin Baek"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1717236"
                        ],
                        "name": "M. Tico",
                        "slug": "M.-Tico",
                        "structuredName": {
                            "firstName": "Marius",
                            "lastName": "Tico",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Tico"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1809190"
                        ],
                        "name": "H. Lensch",
                        "slug": "H.-Lensch",
                        "structuredName": {
                            "firstName": "Hendrik",
                            "lastName": "Lensch",
                            "middleNames": [
                                "P.",
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Lensch"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1752521"
                        ],
                        "name": "W. Matusik",
                        "slug": "W.-Matusik",
                        "structuredName": {
                            "firstName": "Wojciech",
                            "lastName": "Matusik",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "W. Matusik"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1704409"
                        ],
                        "name": "K. Pulli",
                        "slug": "K.-Pulli",
                        "structuredName": {
                            "firstName": "Kari",
                            "lastName": "Pulli",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Pulli"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144764327"
                        ],
                        "name": "M. Horowitz",
                        "slug": "M.-Horowitz",
                        "structuredName": {
                            "firstName": "Mark",
                            "lastName": "Horowitz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Horowitz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1801789"
                        ],
                        "name": "M. Levoy",
                        "slug": "M.-Levoy",
                        "structuredName": {
                            "firstName": "Marc",
                            "lastName": "Levoy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Levoy"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 149,
                                "start": 146
                            }
                        ],
                        "text": "\u2026evaluation order for the harris function in the corner detection example:\nharrissched = {(x, y)\u2192 (y, x) | x \u2265 2 \u2227 x \u2264 R\u2212 1 \u2227 y \u2265 2 \u2227 y \u2264 C \u2212 1 }\nfor y in [2 ... C-1]:\nfor x in [2 ... R-1]:\nharris(x, y)\nA schedule can alternatively be described using hyperplanes, which provide better geometric\u2026"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 52805092,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b837fc64442b072a0ad1426e033cf40277eecfc4",
            "isKey": false,
            "numCitedBy": 2,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": "Although there has been much interest in computational photography within the research and photography communities, progress has been hampered by the lack of a portable, programmable camera with sufficient image quality and computing power. To address this problem, we have designed and implemented an open architecture and API for such cameras: the Frankencamera. It consists of a base hardware specification, a software stack based on Linux, and an API for C++. Our architecture permits control and synchronization of the sensor and image processing pipeline at the microsecond time scale, as well as the ability to incorporate and synchronize external hardware like lenses and flashes. This paper specifies our architecture and API, and it describes two reference implementations we have built. Using these implementations we demonstrate six computational photography applications: HDR viewfinding and capture, low-light viewfinding and capture, automated acquisition of extended dynamic range panoramas, foveal imaging, IMU-based hand shake detection, and rephotography. Our goal is to standardize the architecture and distribute Frankencameras to researchers and students, as a step towards creating a community of photographer-programmers who develop algorithms, applications, and hardware for computational cameras."
            },
            "slug": "The-Frankencamera:-an-experimental-platform-for-Adams-Talvala",
            "title": {
                "fragments": [],
                "text": "The Frankencamera: an experimental platform for computational photography"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "The goal is to standardize the architecture and distribute Frankencameras to researchers and students, as a step towards creating a community of photographer-programmers who develop algorithms, applications, and hardware for computational cameras."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 34,
                                "start": 30
                            }
                        ],
                        "text": "The integer set library (isl) [42] is used to generate loops to scan each group of functions as per the ordering implied by our schedules."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 9220965,
            "fieldsOfStudy": [
                "Art"
            ],
            "id": "1c5b15587e4034c97610b2017697ad1ea663a8fa",
            "isKey": false,
            "numCitedBy": 351,
            "numCiting": 19,
            "paperAbstract": {
                "fragments": [],
                "text": "In compiler research, polytopes and related mathematical objects have been successfully used for several decades to represent and manipulate computer programs in an approach that has become known as the polyhedral model. The key insight is that the kernels of many compute-intensive applications are composed of loops with bounds that are affine combinations of symbolic constants and outer loop iterators. The iterations of a loop nest can then be represented as the integer points in a (parametric) polytope and manipulated as a whole, rather than as individual iterations. A similar reasoning holds for the elements of an array and for mappings between loop iterations and array elements."
            },
            "slug": "isl:-An-Integer-Set-Library-for-the-Polyhedral-Verdoolaege",
            "title": {
                "fragments": [],
                "text": "isl: An Integer Set Library for the Polyhedral Model"
            },
            "tldr": {
                "abstractSimilarityScore": 100,
                "text": "In compiler research, polytopes and related mathematical objects have been successfully used for several decades to represent and manipulate computer programs in an approach that has become known as the polyhedral model."
            },
            "venue": {
                "fragments": [],
                "text": "ICMS"
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2330227"
                        ],
                        "name": "Michael A. Shantzis",
                        "slug": "Michael-A.-Shantzis",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Shantzis",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michael A. Shantzis"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 59,
                                "start": 47
                            }
                        ],
                        "text": "Other prior work on image processing languages [16, 35, 38] has focused more on the language, programmability and expressiveness aspects while proposing simple and limited optimization."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 1849078,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b9984d1d766d20fff5ea6ce2f06649407ca678b4",
            "isKey": false,
            "numCitedBy": 28,
            "numCiting": 11,
            "paperAbstract": {
                "fragments": [],
                "text": "As common as imaging operations are, the literature contains little about how to build systems for image computation. This paper presents a system which addresses the major issues of image computing. The system includes an algorithm for performing imaging operations which guarantees that we only compute those regions of the image that will affect the result. The paper also discusses several other issues critical when creating a flexible image computing environment and describes solutions for these problems in the context of our model. These issues include how one handles images of any resolution and how one works in arbitrary coordinate systems. It also includes a discussion of the standard memory models, a presentation of a new model, and a discussion of each one's advantages and disadvantages."
            },
            "slug": "A-model-for-efficient-and-flexible-image-computing-Shantzis",
            "title": {
                "fragments": [],
                "text": "A model for efficient and flexible image computing"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A system which addresses the major issues of image computing is presented, which includes an algorithm for performing imaging operations which guarantees that the authors only compute those regions of the image that will affect the result."
            },
            "venue": {
                "fragments": [],
                "text": "SIGGRAPH"
            },
            "year": 1994
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50073003"
                        ],
                        "name": "M. Wolfe",
                        "slug": "M.-Wolfe",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Wolfe",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Wolfe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 8906913,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "831cc6d9b7a333b38d34d923b52aed438e90ee1e",
            "isKey": false,
            "numCitedBy": 455,
            "numCiting": 17,
            "paperAbstract": {
                "fragments": [],
                "text": "Subdividing the iteration space of a loop into blocks or tiles with a fixed maximum size has several advantages. Tiles become a natural candidate as the unit of work for parallel task scheduling. Synchronization between processors can be done between tiles, reducing synchronization frequency (at some loss of potential parallelism). The shape and size of a tile can be optimized to take advantage of memory locality for memory hierarchy utilization. Vectorization and register locality naturally fits into the optimization within a tile, while parallelization and cache locality fits into optimization between tiles."
            },
            "slug": "More-iteration-space-tiling-Wolfe",
            "title": {
                "fragments": [],
                "text": "More iteration space tiling"
            },
            "tldr": {
                "abstractSimilarityScore": 98,
                "text": "Subdividing the iteration space of a loop into blocks or tiles with a fixed maximum size has several advantages, and tiles become a natural candidate as the unit of work for parallel task scheduling."
            },
            "venue": {
                "fragments": [],
                "text": "Proceedings of the 1989 ACM/IEEE Conference on Supercomputing (Supercomputing '89)"
            },
            "year": 1989
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1773260"
                        ],
                        "name": "Jason Ansel",
                        "slug": "Jason-Ansel",
                        "structuredName": {
                            "firstName": "Jason",
                            "lastName": "Ansel",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jason Ansel"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145683292"
                        ],
                        "name": "S. Kamil",
                        "slug": "S.-Kamil",
                        "structuredName": {
                            "firstName": "Shoaib",
                            "lastName": "Kamil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Kamil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1803567"
                        ],
                        "name": "K. Veeramachaneni",
                        "slug": "K.-Veeramachaneni",
                        "structuredName": {
                            "firstName": "Kalyan",
                            "lastName": "Veeramachaneni",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Veeramachaneni"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1867647"
                        ],
                        "name": "Jeffrey Bosboom",
                        "slug": "Jeffrey-Bosboom",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Bosboom",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jeffrey Bosboom"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398192342"
                        ],
                        "name": "Una-May O\u2019Reilly",
                        "slug": "Una-May-O\u2019Reilly",
                        "structuredName": {
                            "firstName": "Una-May",
                            "lastName": "O\u2019Reilly",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Una-May O\u2019Reilly"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 67,
                                "start": 64
                            }
                        ],
                        "text": "This approach is no longer maintained or available with Halide ([3], section 4."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 27,
                                "start": 24
                            }
                        ],
                        "text": "\u2022 We used the OpenTuner [3] framework and the associated Halide autotuner to generate schedules for all the benchmarks, by running the autotuner for 12 hours on each application."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 83,
                                "start": 80
                            }
                        ],
                        "text": "A more recent approach for autotuning Halide programs is based on the OpenTuner [3] framework."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 10489926,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "1ccaac0fdcc5ab37a45d0cc616feeaa67a3d4ca1",
            "isKey": true,
            "numCitedBy": 425,
            "numCiting": 45,
            "paperAbstract": {
                "fragments": [],
                "text": "Program autotuning has been shown to achieve better or more portable performance in a number of domains. However, autotuners themselves are rarely portable between projects, for a number of reasons: using a domain-informed search space representation is critical to achieving good results; search spaces can be intractably large and require advanced machine learning techniques; and the landscape of search spaces can vary greatly between different problems, sometimes requiring domain specific search techniques to explore efficiently. This paper introduces OpenTuner, a new open source framework for building domain-specific multi-objective program autotuners. OpenTuner supports fully-customizable configuration representations, an extensible technique representation to allow for domain-specific techniques, and an easy to use interface for communicating with the program to be autotuned. A key capability inside OpenTuner is the use of ensembles of disparate search techniques simultaneously; techniques that perform well will dynamically be allocated a larger proportion of tests. We demonstrate the efficacy and generality of OpenTuner by building autotuners for 7 distinct projects and 16 total benchmarks, showing speedups over prior techniques of these projects of up to 2.8\u03c7 with little programmer effort."
            },
            "slug": "OpenTuner:-An-extensible-framework-for-program-Ansel-Kamil",
            "title": {
                "fragments": [],
                "text": "OpenTuner: An extensible framework for program autotuning"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "The efficacy and generality of OpenTuner are demonstrated by building autotuners for 7 distinct projects and 16 total benchmarks, showing speedups over prior techniques of these projects of up to 2.8\u03c7 with little programmer effort."
            },
            "venue": {
                "fragments": [],
                "text": "2014 23rd International Conference on Parallel Architecture and Compilation (PACT)"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1718457"
                        ],
                        "name": "William Thies",
                        "slug": "William-Thies",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Thies",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William Thies"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1739385"
                        ],
                        "name": "M. Karczmarek",
                        "slug": "M.-Karczmarek",
                        "structuredName": {
                            "firstName": "Michal",
                            "lastName": "Karczmarek",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Karczmarek"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 5108408,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "553fdbe4c82296cc0a2db2731f252fbb434fe22d",
            "isKey": false,
            "numCitedBy": 1259,
            "numCiting": 64,
            "paperAbstract": {
                "fragments": [],
                "text": "We characterize high-performance streaming applications as a new and distinct domain of programs that is becoming increasingly important. The StreamIt language provides novel high-level representations to improve programmer productivity and program robustness within the streaming domain. At the same time, the StreamIt compiler aims to improve the performance of streaming applications via stream-specific analyses and optimizations. In this paper, we motivate, describe and justify the language features of StreamIt, which include: a structured model of streams, a messaging system for control, a re-initialization mechanism, and a natural textual syntax."
            },
            "slug": "StreamIt:-A-Language-for-Streaming-Applications-Thies-Karczmarek",
            "title": {
                "fragments": [],
                "text": "StreamIt: A Language for Streaming Applications"
            },
            "tldr": {
                "abstractSimilarityScore": 52,
                "text": "The StreamIt language provides novel high-level representations to improve programmer productivity and program robustness within the streaming domain and the StreamIt compiler aims to improve the performance of streaming applications via stream-specific analyses and optimizations."
            },
            "venue": {
                "fragments": [],
                "text": "CC"
            },
            "year": 2002
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1967685"
                        ],
                        "name": "Jiawen Chen",
                        "slug": "Jiawen-Chen",
                        "structuredName": {
                            "firstName": "Jiawen",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jiawen Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 23,
                                "start": 15
                            }
                        ],
                        "text": "Bilateral Grid [11, 34] is a structure used for computing a fast approximation of the bilateral filter."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 23,
                                "start": 19
                            }
                        ],
                        "text": "63\u00d7 Bilateral Grid [11] 7 43 2560\u00d7 1536 89."
                    },
                    "intents": []
                }
            ],
            "corpusId": 13028666,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "4ef0a1200a1d9e69a291184d5c4c7cffc562135f",
            "isKey": false,
            "numCitedBy": 312,
            "numCiting": 31,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a new data structure---the bilateral grid, that enables fast edge-aware image processing. By working in the bilateral grid, algorithms such as bilateral filtering, edge-aware painting, and local histogram equalization become simple manipulations that are both local and independent. We parallelize our algorithms on modern GPUs to achieve real-time frame rates on high-definition video. We demonstrate our method on a variety of applications such as image editing, transfer of photographic look, and contrast enhancement of medical images."
            },
            "slug": "Real-time-edge-aware-image-processing-with-the-grid-Chen-Paris",
            "title": {
                "fragments": [],
                "text": "Real-time edge-aware image processing with the bilateral grid"
            },
            "tldr": {
                "abstractSimilarityScore": 69,
                "text": "A new data structure---the bilateral grid, that enables fast edge-aware image processing that parallelize the algorithms on modern GPUs to achieve real-time frame rates on high-definition video."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Graph."
            },
            "year": 2007
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2148928685"
                        ],
                        "name": "Xing Zhou",
                        "slug": "Xing-Zhou",
                        "structuredName": {
                            "firstName": "Xing",
                            "lastName": "Zhou",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xing Zhou"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32481677"
                        ],
                        "name": "J. Giacalone",
                        "slug": "J.-Giacalone",
                        "structuredName": {
                            "firstName": "Jean",
                            "lastName": "Giacalone",
                            "middleNames": [
                                "Pierre"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Giacalone"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3106639"
                        ],
                        "name": "M. Garzar\u00e1n",
                        "slug": "M.-Garzar\u00e1n",
                        "structuredName": {
                            "firstName": "Mar\u00eda",
                            "lastName": "Garzar\u00e1n",
                            "middleNames": [
                                "Jes\u00fas"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Garzar\u00e1n"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2094177"
                        ],
                        "name": "R. Kuhn",
                        "slug": "R.-Kuhn",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Kuhn",
                            "middleNames": [
                                "H."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Kuhn"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2072724094"
                        ],
                        "name": "Yang Ni",
                        "slug": "Yang-Ni",
                        "structuredName": {
                            "firstName": "Yang",
                            "lastName": "Ni",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yang Ni"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1729097"
                        ],
                        "name": "D. Padua",
                        "slug": "D.-Padua",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Padua",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Padua"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 18
                            }
                        ],
                        "text": "Overlapped tiling [27, 29, 46] is attractive in this context due to the dismissal of dependence between neighboring tiles \u2013 this greatly simplifies scratchpad allocation, indexing, and management."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 11902048,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "52d0aff3e4407302dd49123a8f87151bf94fdb52",
            "isKey": false,
            "numCitedBy": 65,
            "numCiting": 31,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper introduces hierarchical overlapped tiling, a transformation that applies loop tiling and fusion to conventional loops. Overlapped tiling is a useful transformation to reduce communication overhead, but it may also generate a significant amount of redundant computation. Hierarchical overlapped tiling performs overlapped tiling hierarchically to balance communication overhead and redundant computation, and thus has the potential to provide better performance.\n In this paper, we describe the hierarchical overlapped tiling optimization and its implementation in an OpenCL compiler. We also evaluate the effectiveness of this optimization using 8 programs that implement different forms of stencil computation. Our results show that hierarchical overlapped tiling achieves an average 37% speedup over traditional tiling on a 32-core workstation."
            },
            "slug": "Hierarchical-overlapped-tiling-Zhou-Giacalone",
            "title": {
                "fragments": [],
                "text": "Hierarchical overlapped tiling"
            },
            "tldr": {
                "abstractSimilarityScore": 67,
                "text": "Hierarchical overlapped tiling is introduced, a transformation that applies loop tiling and fusion to conventional loops and its implementation in an OpenCL compiler is described and evaluated."
            },
            "venue": {
                "fragments": [],
                "text": "CGO '12"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1979640"
                        ],
                        "name": "S. Hasinoff",
                        "slug": "S.-Hasinoff",
                        "structuredName": {
                            "firstName": "Samuel",
                            "lastName": "Hasinoff",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Hasinoff"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1690538"
                        ],
                        "name": "J. Kautz",
                        "slug": "J.-Kautz",
                        "structuredName": {
                            "firstName": "Jan",
                            "lastName": "Kautz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Kautz"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 117,
                                "start": 101
                            }
                        ],
                        "text": "The H-tuned schedule is provided by us along the lines of the tuned schedule available for the Local Laplacian Filter benchmark."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 23
                            }
                        ],
                        "text": "Local Laplacian Filter [4, 33] enhances the local contrast in an image."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 174,
                                "start": 158
                            }
                        ],
                        "text": "Performance of the PolyMage optimized code is slightly better than H-tuned, and matches that of an expert tuned version labeled \u2018FCam\u2019 [1] in Figure 10e.\nLocal Laplacian Filter [4, 33] enhances the local contrast in an image."
                    },
                    "intents": []
                }
            ],
            "corpusId": 1570311,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f91afeda3f233c8f48fdb84120aecf4b1e45ad55",
            "isKey": false,
            "numCitedBy": 231,
            "numCiting": 40,
            "paperAbstract": {
                "fragments": [],
                "text": "The Laplacian pyramid is ubiquitous for decomposing images into multiple scales and is widely used for image analysis. However, because it is constructed with spatially invariant Gaussian kernels, the Laplacian pyramid is widely believed as being unable to represent edges well and as being ill-suited for edge-aware operations such as edge-preserving smoothing and tone mapping. To tackle these tasks, a wealth of alternative techniques and representations have been proposed, e.g., anisotropic diffusion, neighborhood filtering, and specialized wavelet bases. While these methods have demonstrated successful results, they come at the price of additional complexity, often accompanied by higher computational cost or the need to post-process the generated results. In this paper, we show state-of-the-art edge-aware processing using standard Laplacian pyramids. We characterize edges with a simple threshold on pixel values that allows us to differentiate large-scale edges from small-scale details. Building upon this result, we propose a set of image filters to achieve edge-preserving smoothing, detail enhancement, tone mapping, and inverse tone mapping. The advantage of our approach is its simplicity and flexibility, relying only on simple point-wise nonlinearities and small Gaussian convolutions; no optimization or post-processing is required. As we demonstrate, our method produces consistently high-quality results, without degrading edges or introducing halos."
            },
            "slug": "Local-Laplacian-filters:-edge-aware-image-with-a-Paris-Hasinoff",
            "title": {
                "fragments": [],
                "text": "Local Laplacian filters: edge-aware image processing with a Laplacian pyramid"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This paper shows state-of-the-art edge-aware processing using standard Laplacian pyramids, and proposes a set of image filters to achieve edge-preserving smoothing, detail enhancement, tone mapping, and inverse tone mapping."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Graph."
            },
            "year": 2011
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1697800"
                        ],
                        "name": "D. Wonnacott",
                        "slug": "D.-Wonnacott",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Wonnacott",
                            "middleNames": [
                                "G."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Wonnacott"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 170,
                                "start": 159
                            }
                        ],
                        "text": "Stencil optimization efforts have extensively focused on improving locality and parallelism for time-iterated stencil computations, resulting in parallelogram [8, 43, 44], diamond [5], split [22], and hybrid hexagonal [21] tiling techniques."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 45,
                                "start": 38
                            }
                        ],
                        "text": "Among these techniques, parallelogram [8, 44], split [26], overlapped [27, 29], diamond [5], and hexagonal [21] tiling use the polyhedral model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 9949169,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "7969b69830eb03614c33cf300353d04aa681c560",
            "isKey": false,
            "numCitedBy": 130,
            "numCiting": 26,
            "paperAbstract": {
                "fragments": [],
                "text": "Time skewing is a compile-time optimization that can provide arbitrarily high cache hit rates for a class of iterative calculations, given a sufficient number of time steps and sufficient cache memory. Thus, it can eliminate processor idle time caused by inadequate main memory bandwidth. In this article, we give a generalization of time skewing for multiprocessor architectures, and discuss time skewing for multilevel caches. Our generalization for multiprocessors lets us eliminate processor idle time caused by any combination of inadequate main memory bandwidth, limited network bandwidth, and high network latency, given a sufficiently large problem and sufficient cache. As in the uniprocessor case, the cache requirement grows with the machine balance rather than the problem size. Our techniques for using multilevel caches reduce the LI cache requirement, which would otherwise be unacceptably high for some architectures when using arrays of high dimension."
            },
            "slug": "Using-time-skewing-to-eliminate-idle-time-due-to-Wonnacott",
            "title": {
                "fragments": [],
                "text": "Using time skewing to eliminate idle time due to memory bandwidth and network limitations"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "A generalization of time skewing for multiprocessor architectures is given, and techniques for using multilevel caches reduce the LI cache requirement, which would otherwise be unacceptably high for some architectures when using arrays of high dimension."
            },
            "venue": {
                "fragments": [],
                "text": "Proceedings 14th International Parallel and Distributed Processing Symposium. IPDPS 2000"
            },
            "year": 2000
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40309692"
                        ],
                        "name": "C. G. Harris",
                        "slug": "C.-G.-Harris",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Harris",
                            "middleNames": [
                                "G."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. G. Harris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40365651"
                        ],
                        "name": "M. Stephens",
                        "slug": "M.-Stephens",
                        "structuredName": {
                            "firstName": "M.",
                            "lastName": "Stephens",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Stephens"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 49,
                                "start": 45
                            }
                        ],
                        "text": "The specification of Harris corner detection [25] algorithm in our PolyMage DSL is shown in Figure 1."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 22,
                                "start": 18
                            }
                        ],
                        "text": "89\u00d7 Harris Corner [25] 11 43 6400\u00d7 6400 233."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 28,
                                "start": 24
                            }
                        ],
                        "text": "Harris Corner Detection [25] is a widely used method to detect interest points in an image."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 1694378,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6818668fb895d95861a2eb9673ddc3a41e27b3b3",
            "isKey": true,
            "numCitedBy": 14160,
            "numCiting": 9,
            "paperAbstract": {
                "fragments": [],
                "text": "The problem we are addressing in Alvey Project MMI149 is that of using computer vision to understand the unconstrained 3D world, in which the viewed scenes will in general contain too wide a diversity of objects for topdown recognition techniques to work. For example, we desire to obtain an understanding of natural scenes, containing roads, buildings, trees, bushes, etc., as typified by the two frames from a sequence illustrated in Figure 1. The solution to this problem that we are pursuing is to use a computer vision system based upon motion analysis of a monocular image sequence from a mobile camera. By extraction and tracking of image features, representations of the 3D analogues of these features can be constructed."
            },
            "slug": "A-Combined-Corner-and-Edge-Detector-Harris-Stephens",
            "title": {
                "fragments": [],
                "text": "A Combined Corner and Edge Detector"
            },
            "tldr": {
                "abstractSimilarityScore": 100,
                "text": "The problem the authors are addressing in Alvey Project MMI149 is that of using computer vision to understand the unconstrained 3D world, in which the viewed scenes will in general contain too wide a diversity of objects for topdown recognition techniques to work."
            },
            "venue": {
                "fragments": [],
                "text": "Alvey Vision Conference"
            },
            "year": 1988
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1832462"
                        ],
                        "name": "F. Crow",
                        "slug": "F.-Crow",
                        "structuredName": {
                            "firstName": "Franklin",
                            "lastName": "Crow",
                            "middleNames": [
                                "C."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Crow"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 2210332,
            "fieldsOfStudy": [
                "Environmental Science"
            ],
            "id": "8b22e1751f75be137b7b210981baccc1b9ab9222",
            "isKey": false,
            "numCitedBy": 1472,
            "numCiting": 11,
            "paperAbstract": {
                "fragments": [],
                "text": "Texture-map computations can be made tractable through use of precalculated tables which allow computational costs independent of the texture density. The first example of this technique, the \u201cmip\u201d map, uses a set of tables containing successively lower-resolution representations filtered down from the discrete texture function. An alternative method using a single table of values representing the integral over the texture function rather than the function itself may yield superior results at similar cost. The necessary algorithms to support the new technique are explained. Finally, the cost and performance of the new technique is compared to previous techniques."
            },
            "slug": "Summed-area-tables-for-texture-mapping-Crow",
            "title": {
                "fragments": [],
                "text": "Summed-area tables for texture mapping"
            },
            "tldr": {
                "abstractSimilarityScore": 82,
                "text": "Texture-map computations can be made tractable through use of precalculated tables which allow computational costs independent of the texture density, and the cost and performance of the new technique is compared to previous techniques."
            },
            "venue": {
                "fragments": [],
                "text": "SIGGRAPH"
            },
            "year": 1984
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144198209"
                        ],
                        "name": "Jingling Xue",
                        "slug": "Jingling-Xue",
                        "structuredName": {
                            "firstName": "Jingling",
                            "lastName": "Xue",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jingling Xue"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 168,
                                "start": 161
                            }
                        ],
                        "text": "With traditional tiling where both the lower and the upper bounding faces are parallel to each other and given by a single hyperplane, \u03c6, the tiling constraints [2, 45] are given by:"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 26924725,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9711f277bc6159c963dbeb24c0ed447df85d88d5",
            "isKey": false,
            "numCitedBy": 230,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": "List of Figures. List of Tables. Preface. Acknowledgments. Part I: Mathematic Background and Loop Transformation. 1. Mathematical Background. 2. Nonsingular Transformations and Permutability. Part II: Tiling as a Loop Transformation. 3. Rectangular Tiling. 4. Parallelepiped Tiling. Part III: Tiling for Distributed-Memory Machines. 5. SPMD Code Generation. 6. Communication-Minimal Tiling. 7. Time-Minimal Tiling. Bibliography. Index."
            },
            "slug": "Loop-Tiling-for-Parallelism-Xue",
            "title": {
                "fragments": [],
                "text": "Loop Tiling for Parallelism"
            },
            "tldr": {
                "abstractSimilarityScore": 52,
                "text": "This chapter discusses tiling for Distributed-Memory Machines, which has applications in SPMD Code Generation and Nonsingular Transformations and Permutability, and tiling as a Loop Transformation."
            },
            "venue": {
                "fragments": [],
                "text": "Kluwer International Series in Engineering and Computer Science"
            },
            "year": 2000
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2302358"
                        ],
                        "name": "P. Burt",
                        "slug": "P.-Burt",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Burt",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Burt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145358192"
                        ],
                        "name": "E. Adelson",
                        "slug": "E.-Adelson",
                        "structuredName": {
                            "firstName": "Edward",
                            "lastName": "Adelson",
                            "middleNames": [
                                "H."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Adelson"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 316610,
            "fieldsOfStudy": [
                "Environmental Science",
                "Mathematics"
            ],
            "id": "54f6217c2ab0031a935b2ed682dbd189012c6e0b",
            "isKey": false,
            "numCitedBy": 1206,
            "numCiting": 18,
            "paperAbstract": {
                "fragments": [],
                "text": "We define a multiresolution spline technique for combining two or more images into a larger image mosaic. In this procedure, the images to be splined are first decomposed into a set of band-pass filtered component images. Next, the component images in each spatial frequency hand are assembled into a corresponding bandpass mosaic. In this step, component images are joined using a weighted average within a transition zone which is proportional in size to the wave lengths represented in the band. Finally, these band-pass mosaic images are summed to obtain the desired image mosaic. In this way, the spline is matched to the scale of features within the images themselves. When coarse features occur near borders, these are blended gradually over a relatively large distance without blurring or otherwise degrading finer image details in the neighborhood of th e border."
            },
            "slug": "A-multiresolution-spline-with-application-to-image-Burt-Adelson",
            "title": {
                "fragments": [],
                "text": "A multiresolution spline with application to image mosaics"
            },
            "tldr": {
                "abstractSimilarityScore": 57,
                "text": "A multiresolution spline technique for combining two or more images into a larger image mosaic is defined and coarse features occur near borders are blended gradually over a relatively large distance without blurring or otherwise degrading finer image details in the neighborhood of th e border."
            },
            "venue": {
                "fragments": [],
                "text": "TOGS"
            },
            "year": 1983
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46784982"
                        ],
                        "name": "S. Paris",
                        "slug": "S.-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2796589"
                        ],
                        "name": "P. Kornprobst",
                        "slug": "P.-Kornprobst",
                        "structuredName": {
                            "firstName": "Pierre",
                            "lastName": "Kornprobst",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Kornprobst"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2914934"
                        ],
                        "name": "J. Tumblin",
                        "slug": "J.-Tumblin",
                        "structuredName": {
                            "firstName": "Jack",
                            "lastName": "Tumblin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Tumblin"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 64469565,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d68141f4b1cc0e5efa0e8439039704b7decb9841",
            "isKey": false,
            "numCitedBy": 125,
            "numCiting": 3,
            "paperAbstract": {
                "fragments": [],
                "text": "Bilateral filtering is one of the most popular image processing techniques. The bilateral filter is a nonlinear process that can blur an image while respecting strong edges. Its ability to decompose an image into different scales without causing haloes after modification has made it ubiquitous in computational photography applications such as tone mapping, style transfer, relighting, and denoising. Bilateral Filtering: Theory and Applications provides a graphical, intuitive introduction to bilateral filtering, a practical guide for efficient implementation, an overview of its numerous applications, as well as mathematical analysis. This broad and detailed overview covers theoretical and practical issues that will be useful to researchers and software developers."
            },
            "slug": "Bilateral-Filtering-Paris-Kornprobst",
            "title": {
                "fragments": [],
                "text": "Bilateral Filtering"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "A graphical, intuitive introduction to bilateral filtering, a practical guide for efficient implementation, an overview of its numerous applications, as well as mathematical analysis."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2009
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "98302096"
                        ],
                        "name": "Peter Kulchyski",
                        "slug": "Peter-Kulchyski",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Kulchyski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Peter Kulchyski"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 219728810,
            "fieldsOfStudy": [],
            "id": "dfbfcd288ed9b37106564bf6dc95041f6d33b6b2",
            "isKey": false,
            "numCitedBy": 3499,
            "numCiting": 165,
            "paperAbstract": {
                "fragments": [],
                "text": "Let A be a set of positive integers. Let us denote by p(A, n) the number of partitions of n with parts in A. While the study of the parity of the classical partition function p(N, n) (where N is the set of positive integers) is a deep and di cult problem, it is easy to construct a set A for which p(A, n) is even for n large enough : as explained in a paper of I.Z. Ruzsa, A. S\u00e1rk\u00f6zy and J.-L. Nicolas published in 1998 in the Journal of Number Theory , if B is a subset of {1, 2, . . . , N}, there is a unique set A = A0(B, N) such that A \u2229 {1, 2, . . . , N} = B and p(A, n) is even for n > N . In this paper we recall some properties of the sets A0(B, N), we describe the factorization into primes of the elements of the set A0({1, 2, 3}, 3), and prove that the number of elements of this set up to x is asymptotically equivalent to c x (log x)3/4 , where c = 0.937 . . .. R\u00e9sum\u00e9. Si A est un ensemble d'entiers positifs, nous noterons p(A, n) le nombre de partitions de n dont les parts sont dans A. L'\u00e9tude de la parit\u00e9 de la fonction usuelle de partition p(N, n) (o\u00f9 N est l'ensemble des entiers 1Research partially supported by French-Tunisian exchange program, C.M.C.U. n 99/F 1507 and by CNRS, Institut Girard Desargues, UMR 5028. positifs) est un probl\u00e8me profond et di cile ; mais il est facile de construire un ensemble A tel que le nombre p(A, n) soit pair pour tout n assez grand : dans un article paru au Journal of Number Theory en 1998, I.Z. Ruzsa, A. S\u00e1rk\u00f6zy et J.-L. Nicolas montrent que si B est un sous-ensemble de {1, 2, . . . , N}, il existe un seul ensemble A = A0(B, N) tel que A \u2229 {1, 2, . . . , N} = B et p(A, n) est pair pour n > N . Dans cet article, nous rappelons quelques propri\u00e9t\u00e9s des ensembles A = A0(B, N), nous d\u00e9crivons la d\u00e9composition en facteurs premiers des \u00e9l\u00e9ments de A0({1, 2, 3}, 3) et nous montrons que le nombre des \u00e9l\u00e9ments de cet ensemble inf\u00e9rieurs \u00e0 x est \u00e9quivalent \u00e0 c x (log x)3/4 , o\u00f9 c = 0.937 . . .."
            },
            "slug": "and-Kulchyski",
            "title": {
                "fragments": [],
                "text": "and"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3050922"
                        ],
                        "name": "Corinne Ancourt",
                        "slug": "Corinne-Ancourt",
                        "structuredName": {
                            "firstName": "Corinne",
                            "lastName": "Ancourt",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Corinne Ancourt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2912411"
                        ],
                        "name": "F. Irigoin",
                        "slug": "F.-Irigoin",
                        "structuredName": {
                            "firstName": "Fran\u00e7ois",
                            "lastName": "Irigoin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Irigoin"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 168,
                                "start": 161
                            }
                        ],
                        "text": "With traditional tiling where both the lower and the upper bounding faces are parallel to each other and given by a single hyperplane, \u03c6, the tiling constraints [2, 45] are given by:"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 1469859,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6f4f362af709c2890db6c6f920d0b565c91b4521",
            "isKey": false,
            "numCitedBy": 376,
            "numCiting": 32,
            "paperAbstract": {
                "fragments": [],
                "text": "HAL is a multi-disciplinary open access archive for the deposit and dissemination of scientific research documents, whether they are published or not. The documents may come from teaching and research institutions in France or abroad, or from public or private research centers. L\u2019archive ouverte pluridisciplinaire HAL, est destin\u00e9e au d\u00e9p\u00f4t et \u00e0 la diffusion de documents scientifiques de niveau recherche, publi\u00e9s ou non, \u00e9manant des \u00e9tablissements d\u2019enseignement et de recherche fran\u00e7ais ou \u00e9trangers, des laboratoires publics ou priv\u00e9s. Scanning polyhedra with DO loops Corinne Ancourt, Fran\u00e7ois Irigoin"
            },
            "slug": "Scanning-polyhedra-with-DO-loops-Ancourt-Irigoin",
            "title": {
                "fragments": [],
                "text": "Scanning polyhedra with DO loops"
            },
            "tldr": {
                "abstractSimilarityScore": 90,
                "text": "HAL is a multi-disciplinary open access archive for the deposit and dissemination of scientific research documents, whether they are published or not, for teaching and research institutions in France or abroad, or from public or private research centers."
            },
            "venue": {
                "fragments": [],
                "text": "PPOPP '91"
            },
            "year": 1991
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "Categories and Subject Descriptors D.3.4 [Programming Languages]: Processors \u2013 compilers, optimization, code generation\nKeywords Domain-specific language; image processing; polyhedral optimization; locality; parallelism; tiling; multicores; vectorization"
                    },
                    "intents": []
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Apple Core Image programming guide"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "Categories and Subject Descriptors D.3.4 [Programming Languages]: Processors \u2013 compilers, optimization, code generation\nKeywords Domain-specific language; image processing; polyhedral optimization; locality; parallelism; tiling; multicores; vectorization"
                    },
                    "intents": []
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "OpenCV: Open Source Computer Vision"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "Categories and Subject Descriptors D.3.4 [Programming Languages]: Processors \u2013 compilers, optimization, code generation\nKeywords Domain-specific language; image processing; polyhedral optimization; locality; parallelism; tiling; multicores; vectorization"
                    },
                    "intents": []
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "The CImg Library: C++ Template Image Processing Toolkit"
            },
            "venue": {
                "fragments": [],
                "text": "The CImg Library: C++ Template Image Processing Toolkit"
            }
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1998690705"
                        ],
                        "name": "AncourtCorinne",
                        "slug": "AncourtCorinne",
                        "structuredName": {
                            "firstName": "",
                            "lastName": "AncourtCorinne",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "AncourtCorinne"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1643864487"
                        ],
                        "name": "IrigoinFran\u00e7ois",
                        "slug": "IrigoinFran\u00e7ois",
                        "structuredName": {
                            "firstName": "",
                            "lastName": "IrigoinFran\u00e7ois",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "IrigoinFran\u00e7ois"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 223188979,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "136cd716d5de1e307c8f6daf4e1ed606147eb41d",
            "isKey": false,
            "numCitedBy": 6,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "Scanning-polyhedra-with-DO-loops-AncourtCorinne-IrigoinFran\u00e7ois",
            "title": {
                "fragments": [],
                "text": "Scanning polyhedra with DO loops"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1991
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1706327"
                        ],
                        "name": "Arvind K. Sujeeth",
                        "slug": "Arvind-K.-Sujeeth",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Sujeeth",
                            "middleNames": [
                                "K."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Arvind K. Sujeeth"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144806284"
                        ],
                        "name": "Kevin J. Brown",
                        "slug": "Kevin-J.-Brown",
                        "structuredName": {
                            "firstName": "Kevin",
                            "lastName": "Brown",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kevin J. Brown"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34946720"
                        ],
                        "name": "HyoukJoong Lee",
                        "slug": "HyoukJoong-Lee",
                        "structuredName": {
                            "firstName": "HyoukJoong",
                            "lastName": "Lee",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "HyoukJoong Lee"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1712987"
                        ],
                        "name": "Tiark Rompf",
                        "slug": "Tiark-Rompf",
                        "structuredName": {
                            "firstName": "Tiark",
                            "lastName": "Rompf",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tiark Rompf"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1694512"
                        ],
                        "name": "H. Chafi",
                        "slug": "H.-Chafi",
                        "structuredName": {
                            "firstName": "Hassan",
                            "lastName": "Chafi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Chafi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1795826"
                        ],
                        "name": "Martin Odersky",
                        "slug": "Martin-Odersky",
                        "structuredName": {
                            "firstName": "Martin",
                            "lastName": "Odersky",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Martin Odersky"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1746638"
                        ],
                        "name": "K. Olukotun",
                        "slug": "K.-Olukotun",
                        "structuredName": {
                            "firstName": "Kunle",
                            "lastName": "Olukotun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Olukotun"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 87,
                                "start": 75
                            }
                        ],
                        "text": "Such an approach has been used successfully in the context of several DSLs [15, 28, 39]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 8944267,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "25635a854dc2055a0339235bba7b863c7c6df31a",
            "isKey": false,
            "numCitedBy": 169,
            "numCiting": 49,
            "paperAbstract": {
                "fragments": [],
                "text": "Developing high-performance software is a difficult task that requires the use of low-level, architecture-specific programming models (e.g., OpenMP for CMPs, CUDA for GPUs, MPI for clusters). It is typically not possible to write a single application that can run efficiently in different environments, leading to multiple versions and increased complexity. Domain-Specific Languages (DSLs) are a promising avenue to enable programmers to use high-level abstractions and still achieve good performance on a variety of hardware. This is possible because DSLs have higher-level semantics and restrictions than general-purpose languages, so DSL compilers can perform higher-level optimization and translation. However, the cost of developing performance-oriented DSLs is a substantial roadblock to their development and adoption. In this article, we present an overview of the Delite compiler framework and the DSLs that have been developed with it. Delite simplifies the process of DSL development by providing common components, like parallel patterns, optimizations, and code generators, that can be reused in DSL implementations. Delite DSLs are embedded in Scala, a general-purpose programming language, but use metaprogramming to construct an Intermediate Representation (IR) of user programs and compile to multiple languages (including Cpp, CUDA, and OpenCL). DSL programs are automatically parallelized and different parts of the application can run simultaneously on CPUs and GPUs. We present Delite DSLs for machine learning, data querying, graph analysis, and scientific computing and show that they all achieve performance competitive to or exceeding Cpp code."
            },
            "slug": "Delite:-A-Compiler-Architecture-for-Embedded-Sujeeth-Brown",
            "title": {
                "fragments": [],
                "text": "Delite: A Compiler Architecture for Performance-Oriented Embedded Domain-Specific Languages"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "An overview of the Delite compiler framework and DSLs that have been developed with it is presented and it is shown that they all achieve performance competitive to or exceeding Cpp code."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Embed. Comput. Syst."
            },
            "year": 2014
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 78,
                                "start": 67
                            }
                        ],
                        "text": "Polyhedral compilation frameworks, since the works of Bastoul [6], Cohen et al [13, 17], and Hall et al. [24, 41] have taken a decoupled view of computation (as a set of iteration domains) and schedules (as multi-dimensional affine functions)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 87,
                                "start": 79
                            }
                        ],
                        "text": "Polyhedral compilation frameworks, since the works of Bastoul [6], Cohen et al [13, 17], and Hall et al."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Semiautomatic composition of loop transformations"
            },
            "venue": {
                "fragments": [],
                "text": "International Journal of Parallel Programming,"
            },
            "year": 2006
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 23,
                                "start": 15
                            }
                        ],
                        "text": "Bilateral Grid [11, 34] is a structure used for computing a fast approximation of the bilateral filter."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Bilateral filtering: Theory and applications"
            },
            "venue": {
                "fragments": [],
                "text": "Foundations and Trends R  \u00a9 in Computer Graphics and Vision,"
            },
            "year": 2009
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Meth - ods and apparatus for joint parallelism and locality optimization in source code compilation , June 3 2010"
            },
            "venue": {
                "fragments": [],
                "text": "WO Patent App . PCT / US"
            },
            "year": 2009
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 72,
                                "start": 61
                            }
                        ],
                        "text": "Among existing fusion heuristics in the polyhedral framework [7, 30, 31], there is none suitable for image processing pipelines."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Methods and apparatus for joint parallelism and locality optimization in source code compilation"
            },
            "venue": {
                "fragments": [],
                "text": "WO Patent App"
            },
            "year": 2010
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Halide git version. https://github.com/halide/Halide Commit: 8a9a0f7153a6701b6d76a706dc08bbd12ba41396"
            },
            "venue": {
                "fragments": [],
                "text": "Halide git version. https://github.com/halide/Halide Commit: 8a9a0f7153a6701b6d76a706dc08bbd12ba41396"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Halide git version"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Bilateral filtering: Theory and applications. Foundations and Trends R in Computer Graphics and Vision"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2009
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 170,
                                "start": 159
                            }
                        ],
                        "text": "Stencil optimization efforts have extensively focused on improving locality and parallelism for time-iterated stencil computations, resulting in parallelogram [8, 43, 44], diamond [5], split [22], and hybrid hexagonal [21] tiling techniques."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "More iteration space tiling. In International conference for High Performance Computing, Networking, Storage, and Analysis, pages"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1989
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": ","
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        }
    ],
    "meta_info": {
        "citationIntent": "all",
        "citationIntentCount": {
            "background": 20,
            "methodology": 19
        },
        "citationType": "citedPapers",
        "pageNumber": 1,
        "requestedPageSize": 10,
        "sort": "relevance",
        "totalCitations": 53,
        "totalPages": 6
    },
    "page_url": "https://www.semanticscholar.org/paper/PolyMage:-Automatic-Optimization-for-Image-Mullapudi-Vasista/0b9aaee517e0cabb274f5d7cfb01d8f58e51d76e?sort=total-citations"
}