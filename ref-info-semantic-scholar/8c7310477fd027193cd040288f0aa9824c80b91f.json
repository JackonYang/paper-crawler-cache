{
    "links": [
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1708011"
                        ],
                        "name": "Armin Gr\u00f6\u00dflinger",
                        "slug": "Armin-Gr\u00f6\u00dflinger",
                        "structuredName": {
                            "firstName": "Armin",
                            "lastName": "Gr\u00f6\u00dflinger",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Armin Gr\u00f6\u00dflinger"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1714483"
                        ],
                        "name": "C. Lengauer",
                        "slug": "C.-Lengauer",
                        "structuredName": {
                            "firstName": "Christian",
                            "lastName": "Lengauer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Lengauer"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 49,
                                "start": 44
                            }
                        ],
                        "text": "Fullyautomatic polyhedral compilers such as Polly [22] and Pluto [8] improve productivity, but do not obtain the desired level of performance since their search techniques consider only a subset of the necessary optimizations and rely on less accurate machine models, leading the compiler to make suboptimal decisions."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 90,
                                "start": 85
                            }
                        ],
                        "text": "For example, the Pluto [8] automatic scheduling algorithm (used in Pluto, PENCIL and Polly) tries to minimize the distance between producer and consumer statements while maximizing outermost parallelism, but it does not consider data layout, redundant computations, or the complexity of the control of the generated code."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 54,
                                "start": 50
                            }
                        ],
                        "text": "Fullyautomatic polyhedral compilers such as Polly [23] and Pluto [9] improve productivity, but do not obtain the desired level of performance since their search techniques consider only a"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 113,
                                "start": 108
                            }
                        ],
                        "text": "a) Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [8], Polly [22], Tensor Comprehensions [46], and PolyMage [34] are fully automatic."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 136,
                                "start": 132
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 115,
                                "start": 111
                            }
                        ],
                        "text": "Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [9], Polly [23], Tensor Comprehensions [47], and PolyMage [35] are fully automatic."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 123,
                                "start": 118
                            }
                        ],
                        "text": "Some of them are designed for specific domains (such as Tensor Comprehensions and PolyMage), while Pluto, PENCIL, and Polly are more general."
                    },
                    "intents": []
                }
            ],
            "corpusId": 18533155,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3d64988b882541afa8f03f912229fbba49c82e74",
            "isKey": true,
            "numCitedBy": 290,
            "numCiting": 35,
            "paperAbstract": {
                "fragments": [],
                "text": "The polyhedral model for loop parallelization has proved to be an effective tool for advanced optimization and automatic parallelization of programs in higher-level languages. Yet, to integrate such optimizations seamlessly into production compilers, they must be performed on the compiler's internal, low-level, intermediate representation (IR). With Polly, we present an infrastructure for polyhedral optimizations on such an IR. We describe the detection of program parts amenable to a polyhedral optimization (so-called static control parts), their translation to a Z-polyhedral representation, optimizations on this representation and the generation of optimized IR code. Furthermore, we define an interface for connecting external optimizers and present a novel way of using the parallelism they introduce to generate SIMD and OpenMP code. To evaluate Polly, we compile the PolyBench 2.0 benchmarks fully automatically with PLuTo as external optimizer and parallelizer. We can report on significant speedups."
            },
            "slug": "Polly-Performing-Polyhedral-Optimizations-on-a-Grosser-Gr\u00f6\u00dflinger",
            "title": {
                "fragments": [],
                "text": "Polly - Performing Polyhedral Optimizations on a Low-Level Intermediate Representation"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "Polly is presented, an infrastructure for polyhedral optimizations on the compiler's internal, low-level, intermediate representation (IR) and an interface for connecting external optimizers and a novel way of using the parallelism they introduce to generate SIMD and OpenMP code is presented."
            },
            "venue": {
                "fragments": [],
                "text": "Parallel Process. Lett."
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1763408"
                        ],
                        "name": "Albert Hartono",
                        "slug": "Albert-Hartono",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Hartono",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Hartono"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145981817"
                        ],
                        "name": "J. Ramanujam",
                        "slug": "J.-Ramanujam",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Ramanujam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ramanujam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 7086982,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f0f4757aa2f923a349e8357e73850a78e9b80fee",
            "isKey": false,
            "numCitedBy": 860,
            "numCiting": 71,
            "paperAbstract": {
                "fragments": [],
                "text": "We present the design and implementation of an automatic polyhedral source-to-source transformation framework that can optimize regular programs (sequences of possibly imperfectly nested loops) for parallelism and locality simultaneously. Through this work, we show the practicality of analytical model-driven automatic transformation in the polyhedral model -- far beyond what is possible by current production compilers. Unlike previous works, our approach is an end-to-end fully automatic one driven by an integer linear optimization framework that takes an explicit view of finding good ways of tiling for parallelism and locality using affine transformations. The framework has been implemented into a tool to automatically generate OpenMP parallel code from C program sections. Experimental results from the tool show very high speedups for local and parallel execution on multi-cores over state-of-the-art compiler frameworks from the research community as well as the best native production compilers. The system also enables the easy use of powerful empirical/iterative optimization for general arbitrarily nested loop sequences."
            },
            "slug": "A-practical-automatic-polyhedral-parallelizer-and-Bondhugula-Hartono",
            "title": {
                "fragments": [],
                "text": "A practical automatic polyhedral parallelizer and locality optimizer"
            },
            "tldr": {
                "abstractSimilarityScore": 60,
                "text": "An automatic polyhedral source-to-source transformation framework that can optimize regular programs for parallelism and locality simultaneously simultaneously and is implemented into a tool to automatically generate OpenMP parallel code from C program sections."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '08"
            },
            "year": 2008
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2978162"
                        ],
                        "name": "Ulysse Beaugnon",
                        "slug": "Ulysse-Beaugnon",
                        "structuredName": {
                            "firstName": "Ulysse",
                            "lastName": "Beaugnon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ulysse Beaugnon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152835390"
                        ],
                        "name": "Michael Kruse",
                        "slug": "Michael-Kruse",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Kruse",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michael Kruse"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144122184"
                        ],
                        "name": "Chandan Reddy",
                        "slug": "Chandan-Reddy",
                        "structuredName": {
                            "firstName": "Chandan",
                            "lastName": "Reddy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chandan Reddy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34781062"
                        ],
                        "name": "A. Betts",
                        "slug": "A.-Betts",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Betts",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Betts"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1734519"
                        ],
                        "name": "A. Donaldson",
                        "slug": "A.-Donaldson",
                        "structuredName": {
                            "firstName": "Alastair",
                            "lastName": "Donaldson",
                            "middleNames": [
                                "F."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Donaldson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2303821"
                        ],
                        "name": "J. Ketema",
                        "slug": "J.-Ketema",
                        "structuredName": {
                            "firstName": "Jeroen",
                            "lastName": "Ketema",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ketema"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1796386"
                        ],
                        "name": "J. Absar",
                        "slug": "J.-Absar",
                        "structuredName": {
                            "firstName": "Javed",
                            "lastName": "Absar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Absar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1807282"
                        ],
                        "name": "S. V. Haastregt",
                        "slug": "S.-V.-Haastregt",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Haastregt",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. V. Haastregt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145510407"
                        ],
                        "name": "Alexey Kravets",
                        "slug": "Alexey-Kravets",
                        "structuredName": {
                            "firstName": "Alexey",
                            "lastName": "Kravets",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexey Kravets"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1777324"
                        ],
                        "name": "Anton Lokhmotov",
                        "slug": "Anton-Lokhmotov",
                        "structuredName": {
                            "firstName": "Anton",
                            "lastName": "Lokhmotov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anton Lokhmotov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2061545111"
                        ],
                        "name": "R. David",
                        "slug": "R.-David",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "David",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. David"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1988507"
                        ],
                        "name": "Elnar Hajiyev",
                        "slug": "Elnar-Hajiyev",
                        "structuredName": {
                            "firstName": "Elnar",
                            "lastName": "Hajiyev",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Elnar Hajiyev"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 95,
                                "start": 89
                            }
                        ],
                        "text": "Such a trade-off is not captured by the Pluto automatic scheduling algorithm used\nwithin PENCIL."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 118,
                                "start": 112
                            }
                        ],
                        "text": "For the other kernels, both TIRAMISU and Halide apply vectorization and unrolling on the innermost loops, while PENCIL does not since the multicore code generator of PENCIL does not implement these two optimizations."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 148,
                                "start": 142
                            }
                        ],
                        "text": "We compare TIRAMISU with two other compilers: Halide [39], an industrial-quality DSL for image processing that has a scheduling language, and PENCIL [3], a state-of-the-art fully automatic polyhedral compiler."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 37,
                                "start": 28
                            }
                        ],
                        "text": "floor((M-2)/32)) 6 shared bx[3,32,34]; 7 // Tiling with redundancy 8 GPUThread for(i1 in 0."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 21
                            }
                        ],
                        "text": "floor((M-2)/32)) 4 bx[32,34,3]; 5 // Tiling with redundancy 6 for(i1 in 0."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 18,
                                "start": 12
                            }
                        ],
                        "text": "Compared to PENCIL, the speedup in conv2D and gaussian is due to the fact that PENCIL generates unnecessarily complicated control flow within the CUDA kernel, which leads to thread divergence. c) Distributed: We assume the data are already distributed across the nodes by rows."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 80,
                                "start": 74
                            }
                        ],
                        "text": "For example, the Pluto [8] automatic scheduling algorithm (used in Pluto, PENCIL and Polly) tries to minimize the distance between producer and consumer statements while maximizing outermost parallelism, but it does not consider data layout, redundant computations, or the complexity of the control of the generated code."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 72,
                                "start": 66
                            }
                        ],
                        "text": "For warpAffine, both TIRAMISU and Halide have a high speedup over PENCIL because the unique loop nest in this benchmark has 25 statements, and vectorizing the innermost loop transforms all of these statements to their vector equivalent while unrolling increases register reuse and instruction level parallelism on the 24 cores of the test machine. b) GPU: For the GPU backend, the reported times are the total execution times (data copy and kernel execution)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 86,
                                "start": 80
                            }
                        ],
                        "text": "a) Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [8], Polly [22], Tensor Comprehensions [46], and PolyMage [34] are fully automatic."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 152,
                                "start": 149
                            }
                        ],
                        "text": "We compare TIRAMISU with two other compilers: Halide [40], an industrial-quality DSL for image processing that has a scheduling language, and PENCIL [3], a state-of-the-art fully automatic polyhedral compiler."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 78,
                                "start": 72
                            }
                        ],
                        "text": "For the single-node multicore and GPU we compare TIRAMISU to Halide and PENCIL."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 113,
                                "start": 107
                            }
                        ],
                        "text": "The efficiency of these techniques was demonstrated by Benabderrahmane et al. [6] and was confirmed in the PENCIL compiler [4]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 6,
                                "start": 0
                            }
                        ],
                        "text": "PENCIL decides to interchange the two innermost loop levels in order to enable the fusion of the two successive loop nests."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 26,
                                "start": 20
                            }
                        ],
                        "text": "The slowdown of the PENCIL compiler in gaussian is due to a suboptimal decision made by PENCIL."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 92,
                                "start": 89
                            }
                        ],
                        "text": "Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [9], Polly [23], Tensor Comprehensions [47], and PolyMage [35] are fully automatic."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 112,
                                "start": 106
                            }
                        ],
                        "text": "Some of them are designed for specific domains (such as Tensor Comprehensions and PolyMage), while Pluto, PENCIL, and Polly are more general."
                    },
                    "intents": []
                }
            ],
            "corpusId": 16354348,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "e61e896ee96c8d6ae13c34c9d66e8ee879489f75",
            "isKey": false,
            "numCitedBy": 90,
            "numCiting": 39,
            "paperAbstract": {
                "fragments": [],
                "text": "Programming accelerators such as GPUs with low-level APIs and languages such as OpenCL and CUDA is difficult, error-prone, and not performance-portable. Automatic parallelization and domain specific languages (DSLs) have been proposed to hide complexity and regain performance portability. We present PENCIL, a rigorously-defined subset of GNU C99-enriched with additional language constructs-that enables compilers to exploit parallelism and produce highly optimized code when targeting accelerators. PENCIL aims to serve both as a portable implementation language for libraries, and as a target language for DSL compilers. We implemented a PENCIL-to-OpenCL backend using a state-of-the-art polyhedral compiler. The polyhedral compiler, extended to handle data-dependent control flow and non-affine array accesses, generates optimized OpenCL code. To demonstrate the potential and performance portability of PENCIL and the PENCIL-to-OpenCL compiler, we consider a number of image processing kernels, a set of benchmarks from the Rodinia and SHOC suites, and DSL embedding scenarios for linear algebra (BLAS) and signal processing radar applications (SpearDE), and present experimental results for four GPU platforms: AMD Radeon HD 5670 and R9 285, NVIDIA GTX 470, and ARM Mali-T604."
            },
            "slug": "PENCIL:-A-Platform-Neutral-Compute-Intermediate-for-Baghdadi-Beaugnon",
            "title": {
                "fragments": [],
                "text": "PENCIL: A Platform-Neutral Compute Intermediate Language for Accelerator Programming"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "PENCIL, a rigorously-defined subset of GNU C99-enriched with additional language constructs-that enables compilers to exploit parallelism and produce highly optimized code when targeting accelerators, is presented."
            },
            "venue": {
                "fragments": [],
                "text": "2015 International Conference on Parallel Architecture and Compilation (PACT)"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1769333"
                        ],
                        "name": "C. Bastoul",
                        "slug": "C.-Bastoul",
                        "structuredName": {
                            "firstName": "C\u00e9dric",
                            "lastName": "Bastoul",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Bastoul"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 49,
                                "start": 44
                            }
                        ],
                        "text": "TIRAMISU relies on an implementation of the Cloog [5] code generation algorithm provided by the ISL library [47]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 53,
                                "start": 50
                            }
                        ],
                        "text": "TIRAMISU relies on an implementation of the Cloog [6] code generation algorithm provided by the ISL library [48]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 225,
                                "start": 222
                            }
                        ],
                        "text": "Generating code from the set of computations in Layer IV amounts to generating nested loops that visit each computation in the set, once and only once, while following the lexicographical ordering between the computations [6], [28], [39]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 7971227,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d2f48fb9fd31390c56609f00510accf5c56f9f9b",
            "isKey": false,
            "numCitedBy": 518,
            "numCiting": 41,
            "paperAbstract": {
                "fragments": [],
                "text": "Many advances in automatic parallelization and optimization have been achieved through the polyhedral model. It has been extensively shown that this computational model provides convenient abstractions to reason about and apply program transformations. Nevertheless, the complexity of code generation has long been a deterrent for using polyhedral representation in optimizing compilers. First, code generators have a hard time coping with generated code size and control overhead that may spoil theoretical benefits achieved by the transformations. Second, this step is usually time consuming, hampering the integration of the polyhedral framework in production compilers or feedback-directed, iterative optimization schemes. Moreover, current code generation algorithms only cover a restrictive set of possible transformation functions. This paper discusses a general transformation framework able to deal with nonunimodular, noninvertible, nonintegral or even nonuniform functions. It presents several improvements to a state-of-the-art code generation algorithm. Two directions are explored: generated code size and code generator efficiency. Experimental evidence proves the ability of the improved method to handle real-life problems."
            },
            "slug": "Code-generation-in-the-polyhedral-model-is-easier-Bastoul",
            "title": {
                "fragments": [],
                "text": "Code generation in the polyhedral model is easier than you think"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "A general transformation framework able to deal with nonunimodular, noninvertible, nonintegral or even nonuniform functions is discussed and several improvements to a state-of-the-art code generation algorithm are presented."
            },
            "venue": {
                "fragments": [],
                "text": "Proceedings. 13th International Conference on Parallel Architecture and Compilation Techniques, 2004. PACT 2004."
            },
            "year": 2004
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1801789"
                        ],
                        "name": "M. Levoy",
                        "slug": "M.-Levoy",
                        "structuredName": {
                            "firstName": "Marc",
                            "lastName": "Levoy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Levoy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 150,
                                "start": 146
                            }
                        ],
                        "text": "The use of a scheduling language has been shown effective for generating efficient code by multiple compilers including CHiLL, AlphaZ, and Halide [40], [41]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 145,
                                "start": 120
                            }
                        ],
                        "text": "The use of a scheduling language has been shown effective for generating efficient code by multiple compilers including CHiLL, AlphaZ, and Halide [39], [40]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 11,
                                "start": 7
                            }
                        ],
                        "text": "Halide [40] is an image processing DSL with a scheduling language that uses intervals to represent iteration spaces instead of the polyhedral model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 57,
                                "start": 53
                            }
                        ],
                        "text": "We compare TIRAMISU with two other compilers: Halide [40], an industrial-quality DSL for image processing that has a scheduling language, and PENCIL [3], a state-of-the-art fully automatic polyhedral compiler."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 9001340,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3e06546182d5a36796a0f48e70151bf1d38e094d",
            "isKey": false,
            "numCitedBy": 247,
            "numCiting": 51,
            "paperAbstract": {
                "fragments": [],
                "text": "Using existing programming tools, writing high-performance image processing code requires sacrificing readability, portability, and modularity. We argue that this is a consequence of conflating what computations define the algorithm, with decisions about storage and the order of computation. We refer to these latter two concerns as the schedule, including choices of tiling, fusion, recomputation vs. storage, vectorization, and parallelism. We propose a representation for feed-forward imaging pipelines that separates the algorithm from its schedule, enabling high-performance without sacrificing code clarity. This decoupling simplifies the algorithm specification: images and intermediate buffers become functions over an infinite integer domain, with no explicit storage or boundary conditions. Imaging pipelines are compositions of functions. Programmers separately specify scheduling strategies for the various functions composing the algorithm, which allows them to efficiently explore different optimizations without changing the algorithmic code. We demonstrate the power of this representation by expressing a range of recent image processing applications in an embedded domain specific language called Halide, and compiling them for ARM, x86, and GPUs. Our compiler targets SIMD units, multiple cores, and complex memory hierarchies. We demonstrate that it can handle algorithms such as a camera raw pipeline, the bilateral grid, fast local Laplacian filtering, and image segmentation. The algorithms expressed in our language are both shorter and faster than state-of-the-art implementations."
            },
            "slug": "Decoupling-algorithms-from-schedules-for-easy-of-Ragan-Kelley-Adams",
            "title": {
                "fragments": [],
                "text": "Decoupling algorithms from schedules for easy optimization of image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This work proposes a representation for feed-forward imaging pipelines that separates the algorithm from its schedule, enabling high-performance without sacrificing code clarity, and demonstrates the power of this representation by expressing a range of recent image processing applications in an embedded domain specific language called Halide and compiling them for ARM, x86, and GPUs."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Graph."
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2109525543"
                        ],
                        "name": "Chun Chen",
                        "slug": "Chun-Chen",
                        "structuredName": {
                            "firstName": "Chun",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chun Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772362"
                        ],
                        "name": "Jacqueline Chame",
                        "slug": "Jacqueline-Chame",
                        "structuredName": {
                            "firstName": "Jacqueline",
                            "lastName": "Chame",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jacqueline Chame"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143896454"
                        ],
                        "name": "Mary W. Hall",
                        "slug": "Mary-W.-Hall",
                        "structuredName": {
                            "firstName": "Mary",
                            "lastName": "Hall",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mary W. Hall"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 371,
                                "start": 366
                            }
                        ],
                        "text": "Instead of being fully automatic, TIRAMISU relies on the user to provide scheduling commands to control choices in the generated code (synchronous/asynchronous communication, the granularity of communication, buffer sizes, when to send and receive, cost of communication versus re-computation, etc.).\nb) Polyhedral compilers with a scheduling language: AlphaZ [51], CHiLL [10], [24] and URUK [19] are polyhedral frameworks developed to allow users to express high-level transformations using scheduling commands."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 63,
                                "start": 59
                            }
                        ],
                        "text": "Other polyhedral frameworks, such as AlphaZ [52] and CHiLL [11], eschew full automation and instead expose a scheduling language that enables users to productively explore the space of possible transformations."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 58,
                                "start": 53
                            }
                        ],
                        "text": "Other polyhedral frameworks, such as AlphaZ [51] and CHiLL [10], eschew full automation and instead expose a ar X iv :1\n80 4."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 23,
                                "start": 19
                            }
                        ],
                        "text": "AlphaZ [52], CHiLL [11], [25] and URUK [20] are polyhedral frameworks developed to allow users to express high-level transformations using scheduling commands."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 125,
                                "start": 120
                            }
                        ],
                        "text": "The use of a scheduling language has been shown effective for generating efficient code by multiple compilers including CHiLL, AlphaZ, and Halide [39], [40]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 15619135,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6a4620589f63f3385707d2d590f7b7dc8ee4d74f",
            "isKey": true,
            "numCitedBy": 198,
            "numCiting": 32,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper describes a general and robust loop transformation framework that enables compilers to generate efficient code on complex loop nests. Despite two decades of prior research on loop optimization, performance of compiler-generated code often falls short of manually optimized versions, even for some well-studied BLAS kernels. There are two primary reasons for this. First, today\u2019s compilers employ fixed transformation strategies, making it difficult to adapt to different optimization requirements for different application codes. Second, code transformations are treated in isolation, not taking into account the interactions between different transformations. This paper addresses such limitations in a unified framework that supports a broad collection of transformations, (permutation, tiling, unroll-and-jam, data copying, iteration space splitting, fusion, distribution and others), which go beyond existing polyhedral transformation models. This framework is a key element of a compiler we are developing which performs empirical optimization to evaluate a collection of alternative optimized variants of a code segment. A script interface to code generation and empirical search permits transformation parameters to be adjusted independently and tested; alternative scripts are used to represent different code variants. By applying this framework to example codes, we show performance results on automaticallygenerated code for the Pentium M and MIPS R10000 that are comparable to the best hand-tuned codes, and significantly better (up to a 14x speedup) than the native compilers."
            },
            "slug": "CHiLL-:-A-Framework-for-Composing-High-Level-Loop-Chen-Chame",
            "title": {
                "fragments": [],
                "text": "CHiLL : A Framework for Composing High-Level Loop Transformations"
            },
            "tldr": {
                "abstractSimilarityScore": 62,
                "text": "A general and robust loop transformation framework that enables compilers to generate efficient code on complex loop nests and shows performance results on automaticallygenerated code for the Pentium M and MIPS R10000 that are comparable to the best hand-tuned codes, and significantly better than the native compilers."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2007
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3105526"
                        ],
                        "name": "Tyler Denniston",
                        "slug": "Tyler-Denniston",
                        "structuredName": {
                            "firstName": "Tyler",
                            "lastName": "Denniston",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tyler Denniston"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145683292"
                        ],
                        "name": "S. Kamil",
                        "slug": "S.-Kamil",
                        "structuredName": {
                            "firstName": "Shoaib",
                            "lastName": "Kamil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Kamil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 27,
                                "start": 23
                            }
                        ],
                        "text": "why distributed Halide [16] over-approximates the amount of data to communicate (send and receive) when generating distributed code."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 71,
                                "start": 67
                            }
                        ],
                        "text": "For the distributed architecture, we compare to distributed Halide [16]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 13899492,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "886b7dcdc41055d2196c2d44db9490a87b1da55b",
            "isKey": false,
            "numCitedBy": 26,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Many image processing tasks are naturally expressed as a pipeline of small computational kernels known as stencils. Halide is a popular domain-specific language and compiler designed to implement image processing algorithms. Halide uses simple language constructs to express what to compute and a separate scheduling co-language for expressing when and where to perform the computation. This approach has demonstrated performance comparable to or better than hand-optimized code. Until now, however, Halide has been restricted to parallel shared memory execution, limiting its performance for memory-bandwidth-bound pipelines or large-scale image processing tasks. We present an extension to Halide to support distributed-memory parallel execution of complex stencil pipelines. These extensions compose with the existing scheduling constructs in Halide, allowing expression of complex computation and communication strategies. Existing Halide applications can be distributed with minimal changes, allowing programmers to explore the tradeoff between recomputation and communication with little effort. Approximately 10 new of lines code are needed even for a 200 line, 99 stage application. On nine image processing benchmarks, our extensions give up to a 1.4\u00d7 speedup on a single node over regular multithreaded execution with the same number of cores, by mitigating the effects of non-uniform memory access. The distributed benchmarks achieve up to 18\u00d7 speedup on a 16 node testing machine and up to 57\u00d7 speedup on 64 nodes of the NERSC Cori supercomputer."
            },
            "slug": "Distributed-Halide-Denniston-Kamil",
            "title": {
                "fragments": [],
                "text": "Distributed Halide"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This work presents an extension to Halide to support distributed-memory parallel execution of complex stencil pipelines, allowing expression of complex computation and communication strategies."
            },
            "venue": {
                "fragments": [],
                "text": "PPoPP"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47368718"
                        ],
                        "name": "Ravi Teja Mullapudi",
                        "slug": "Ravi-Teja-Mullapudi",
                        "structuredName": {
                            "firstName": "Ravi",
                            "lastName": "Mullapudi",
                            "middleNames": [
                                "Teja"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ravi Teja Mullapudi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2032633"
                        ],
                        "name": "Vinay Vasista",
                        "slug": "Vinay-Vasista",
                        "structuredName": {
                            "firstName": "Vinay",
                            "lastName": "Vasista",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vinay Vasista"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 90,
                                "start": 82
                            }
                        ],
                        "text": "Some of them are designed for specific domains (such as Tensor Comprehensions and PolyMage), while Pluto, PENCIL, and Polly are more general."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 160,
                                "start": 152
                            }
                        ],
                        "text": "a) Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [8], Polly [22], Tensor Comprehensions [46], and PolyMage [34] are fully automatic."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 162,
                                "start": 158
                            }
                        ],
                        "text": "Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [9], Polly [23], Tensor Comprehensions [47], and PolyMage [35] are fully automatic."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 16016961,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0b9aaee517e0cabb274f5d7cfb01d8f58e51d76e",
            "isKey": false,
            "numCitedBy": 175,
            "numCiting": 53,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents the design and implementation of PolyMage, a domain-specific language and compiler for image processing pipelines. An image processing pipeline can be viewed as a graph of interconnected stages which process images successively. Each stage typically performs one of point-wise, stencil, reduction or data-dependent operations on image pixels. Individual stages in a pipeline typically exhibit abundant data parallelism that can be exploited with relative ease. However, the stages also require high memory bandwidth preventing effective utilization of parallelism available on modern architectures. For applications that demand high performance, the traditional options are to use optimized libraries like OpenCV or to optimize manually. While using libraries precludes optimization across library routines, manual optimization accounting for both parallelism and locality is very tedious. The focus of our system, PolyMage, is on automatically generating high-performance implementations of image processing pipelines expressed in a high-level declarative language. Our optimization approach primarily relies on the transformation and code generation capabilities of the polyhedral compiler framework. To the best of our knowledge, this is the first model-driven compiler for image processing pipelines that performs complex fusion, tiling, and storage optimization automatically. Experimental results on a modern multicore system show that the performance achieved by our automatic approach is up to 1.81x better than that achieved through manual tuning in Halide, a state-of-the-art language and compiler for image processing pipelines. For a camera raw image processing pipeline, our performance is comparable to that of a hand-tuned implementation."
            },
            "slug": "PolyMage:-Automatic-Optimization-for-Image-Mullapudi-Vasista",
            "title": {
                "fragments": [],
                "text": "PolyMage: Automatic Optimization for Image Processing Pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "This is the first model-driven compiler for image processing pipelines that performs complex fusion, tiling, and storage optimization automatically and is up to 1.81x better than that achieved through manual tuning in Halide, a state-of-the-art language and compiler forimage processing pipelines."
            },
            "venue": {
                "fragments": [],
                "text": "ASPLOS"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2496412"
                        ],
                        "name": "Connelly Barnes",
                        "slug": "Connelly-Barnes",
                        "structuredName": {
                            "firstName": "Connelly",
                            "lastName": "Barnes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Connelly Barnes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 156,
                                "start": 152
                            }
                        ],
                        "text": "The use of a scheduling language has been shown effective for generating efficient code by multiple compilers including CHiLL, AlphaZ, and Halide [40], [41]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 5885207,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "4d23db55e6671a82c95dacec33b2967a4b8b677d",
            "isKey": false,
            "numCitedBy": 878,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Image processing pipelines combine the challenges of stencil computations and stream programs. They are composed of large graphs of different stencil stages, as well as complex reductions, and stages with global or data-dependent access patterns. Because of their complex structure, the performance difference between a naive implementation of a pipeline and an optimized one is often an order of magnitude. Efficient implementations require optimization of both parallelism and locality, but due to the nature of stencils, there is a fundamental tension between parallelism, locality, and introducing redundant recomputation of shared values. We present a systematic model of the tradeoff space fundamental to stencil pipelines, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule. Combining this compiler with stochastic search over the space of schedules enables terse, composable programs to achieve state-of-the-art performance on a wide range of real image processing pipelines, and across different hardware architectures, including multicores with SIMD, and heterogeneous CPU+GPU execution. From simple Halide programs written in a few hours, we demonstrate performance up to 5x faster than hand-tuned C, intrinsics, and CUDA implementations optimized by experts over weeks or months, for image processing applications beyond the reach of past automatic compilers."
            },
            "slug": "Halide:-a-language-and-compiler-for-optimizing-and-Ragan-Kelley-Barnes",
            "title": {
                "fragments": [],
                "text": "Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A systematic model of the tradeoff space fundamental to stencil pipelines is presented, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule are presented."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2506136"
                        ],
                        "name": "Sylvain Girbal",
                        "slug": "Sylvain-Girbal",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Girbal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Girbal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1769333"
                        ],
                        "name": "C. Bastoul",
                        "slug": "C.-Bastoul",
                        "structuredName": {
                            "firstName": "C\u00e9dric",
                            "lastName": "Bastoul",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Bastoul"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1702824"
                        ],
                        "name": "David Parello",
                        "slug": "David-Parello",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Parello",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David Parello"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "18182536"
                        ],
                        "name": "Marc Sigler",
                        "slug": "Marc-Sigler",
                        "structuredName": {
                            "firstName": "Marc",
                            "lastName": "Sigler",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Marc Sigler"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1731764"
                        ],
                        "name": "O. Temam",
                        "slug": "O.-Temam",
                        "structuredName": {
                            "firstName": "Olivier",
                            "lastName": "Temam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Temam"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 43,
                                "start": 39
                            }
                        ],
                        "text": "AlphaZ [52], CHiLL [11], [25] and URUK [20] are polyhedral frameworks developed to allow users to express high-level transformations using scheduling commands."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 391,
                                "start": 387
                            }
                        ],
                        "text": "Instead of being fully automatic, TIRAMISU relies on the user to provide scheduling commands to control choices in the generated code (synchronous/asynchronous communication, the granularity of communication, buffer sizes, when to send and receive, cost of communication versus re-computation, etc.).\nb) Polyhedral compilers with a scheduling language: AlphaZ [51], CHiLL [10], [24] and URUK [19] are polyhedral frameworks developed to allow users to express high-level transformations using scheduling commands."
                    },
                    "intents": []
                }
            ],
            "corpusId": 8182159,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cc1c1b1eb6e9672d1b2813ad763f701494d8fcee",
            "isKey": false,
            "numCitedBy": 240,
            "numCiting": 123,
            "paperAbstract": {
                "fragments": [],
                "text": "Modern compilers are responsible for translating the idealistic operational semantics of the source program into a form that makes efficient use of a highly complex heterogeneous machine. Since optimization problems are associated with huge and unstructured search spaces, this combinational task is poorly achieved in general, resulting in weak scalability and disappointing sustained performance. We address this challenge by working on the program representation itself, using a semi-automatic optimization approach to demonstrate that current compilers offen suffer from unnecessary constraints and intricacies that can be avoided in a semantically richer transformation framework. Technically, the purpose of this paper is threefold: (1) to show that syntactic code representations close to the operational semantics lead to rigid phase ordering and cumbersome expression of architecture-aware loop transformations, (2) to illustrate how complex transformation sequences may be needed to achieve significant performance benefits, (3) to facilitate the automatic search for program transformation sequences, improving on classical polyhedral representations to better support operation research strategies in a simpler, structured search space. The proposed framework relies on a unified polyhedral representation of loops and statements, using normalization rules to allow flexible and expressive transformation sequencing. Thisrepresentation allows to extend the scalability of polyhedral dependence analysis, and to delay the (automatic) legality checks until the end of a transformation sequence. Our work leverages on algorithmic advances in polyhedral code generation and has been implemented in a modern research compiler."
            },
            "slug": "Semi-Automatic-Composition-of-Loop-Transformations-Girbal-Vasilache",
            "title": {
                "fragments": [],
                "text": "Semi-Automatic Composition of Loop Transformations for Deep Parallelism and Memory Hierarchies"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "This work leverages on algorithmic advances in polyhedral code generation and has been implemented in a modern research compiler, using a semi-automatic optimization approach to demonstrate that current compilers suffer from unnecessary constraints and intricacies that can be avoided in a semantically richer transformation framework."
            },
            "venue": {
                "fragments": [],
                "text": "International Journal of Parallel Programming"
            },
            "year": 2006
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48648812"
                        ],
                        "name": "Mohamed-Walid Benabderrahmane",
                        "slug": "Mohamed-Walid-Benabderrahmane",
                        "structuredName": {
                            "firstName": "Mohamed-Walid",
                            "lastName": "Benabderrahmane",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mohamed-Walid Benabderrahmane"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793611"
                        ],
                        "name": "L. Pouchet",
                        "slug": "L.-Pouchet",
                        "structuredName": {
                            "firstName": "Louis-No\u00ebl",
                            "lastName": "Pouchet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Pouchet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1769333"
                        ],
                        "name": "C. Bastoul",
                        "slug": "C.-Bastoul",
                        "structuredName": {
                            "firstName": "C\u00e9dric",
                            "lastName": "Bastoul",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Bastoul"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 3,
                                "start": 0
                            }
                        ],
                        "text": "[7] and was confirmed in the PENCIL compiler [4]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 8032464,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "a4672941d77499591c31ac8bd64d6039dfb8b0e1",
            "isKey": false,
            "numCitedBy": 217,
            "numCiting": 44,
            "paperAbstract": {
                "fragments": [],
                "text": "The polyhedral model is a powerful framework for automatic optimization and parallelization. It is based on an algebraic representation of programs, allowing to construct and search for complex sequences of optimizations. This model is now mature and reaches production compilers. The main limitation of the polyhedral model is known to be its restriction to statically predictable, loop-based program parts. This paper removes this limitation, allowing to operate on general data-dependent control-flow. We embed control and exit predicates as first-class citizens of the algebraic representation, from program analysis to code generation. Complementing previous (partial) attempts in this direction, our work concentrates on extending the code generation step and does not compromise the expressiveness of the model. We present experimental evidence that our extension is relevant for program optimization and parallelization, showing performance improvements on benchmarks that were thought to be out of reach of the polyhedral model."
            },
            "slug": "The-Polyhedral-Model-Is-More-Widely-Applicable-Than-Benabderrahmane-Pouchet",
            "title": {
                "fragments": [],
                "text": "The Polyhedral Model Is More Widely Applicable Than You Think"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "This work concentrates on extending the code generation step and does not compromise the expressiveness of the model, presenting experimental evidence that the extension is relevant for program optimization and parallelization, showing performance improvements on benchmarks that were thought to be out of reach of the polyhedral model."
            },
            "venue": {
                "fragments": [],
                "text": "CC"
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144913523"
                        ],
                        "name": "Alexander Collins",
                        "slug": "Alexander-Collins",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Collins",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander Collins"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2401609"
                        ],
                        "name": "Dominik Grewe",
                        "slug": "Dominik-Grewe",
                        "structuredName": {
                            "firstName": "Dominik",
                            "lastName": "Grewe",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dominik Grewe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50654241"
                        ],
                        "name": "Vinod Grover",
                        "slug": "Vinod-Grover",
                        "structuredName": {
                            "firstName": "Vinod",
                            "lastName": "Grover",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vinod Grover"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2108109511"
                        ],
                        "name": "Sean Lee",
                        "slug": "Sean-Lee",
                        "structuredName": {
                            "firstName": "Sean",
                            "lastName": "Lee",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sean Lee"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2925096"
                        ],
                        "name": "Adriana Susnea",
                        "slug": "Adriana-Susnea",
                        "structuredName": {
                            "firstName": "Adriana",
                            "lastName": "Susnea",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Adriana Susnea"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 9,
                                "start": 5
                            }
                        ],
                        "text": "NOVA [13] and Lift [43] are IRs for DSL compilers."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 4,
                                "start": 0
                            }
                        ],
                        "text": "NOVA [12] and Lift [42] are IRs for DSL compilers."
                    },
                    "intents": []
                }
            ],
            "corpusId": 6748967,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "93158db5c7d31159395e59b36e8a7b36816d4923",
            "isKey": false,
            "numCitedBy": 51,
            "numCiting": 30,
            "paperAbstract": {
                "fragments": [],
                "text": "Functional languages provide a solid foundation on which complex optimization passes can be designed to exploit parallelism available in the underlying system. Their mathematical foundations enable high-level optimizations that would be impossible in traditional imperative languages. This makes them uniquely suited for generation of efficient target code for parallel systems, such as multiple Central Processing Units (CPUs) or highly data-parallel Graphics Processing Units (GPUs). Such systems are becoming the mainstream for scientific and commodity desktop computing. Writing performance portable code for such systems using low-level languages requires significant effort from a human expert. This paper presents NOVA, a functional language and compiler for multi-core CPUs and GPUs. The NOVA language is a polymorphic, statically-typed functional language with a suite of higher-order functions which are used to express parallelism. These include map, reduce and scan. The NOVA compiler is a light-weight, yet powerful, optimizing compiler. It generates code for a variety of target platforms that achieve performance comparable to competing languages and tools, including hand-optimized code. The NOVA compiler is stand-alone and can be easily used as a target for higher-level or domain specific languages or embedded in other applications. We evaluate NOVA against two competing approaches: the Thrust library and hand-written CUDA C. NOVA achieves comparable performance to these approaches across a range of benchmarks. NOVA-generated code also scales linearly with the number of processor cores across all compute-bound benchmarks."
            },
            "slug": "NOVA:-A-Functional-Language-for-Data-Parallelism-Collins-Grewe",
            "title": {
                "fragments": [],
                "text": "NOVA: A Functional Language for Data Parallelism"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "The NOVA language is a polymorphic, statically-typed functional language with a suite of higher-order functions which are used to express parallelism, and the NOVA compiler is a light-weight, yet powerful, optimizing compiler."
            },
            "venue": {
                "fragments": [],
                "text": "ARRAY@PLDI"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2020735"
                        ],
                        "name": "Fabien Quiller\u00e9",
                        "slug": "Fabien-Quiller\u00e9",
                        "structuredName": {
                            "firstName": "Fabien",
                            "lastName": "Quiller\u00e9",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fabien Quiller\u00e9"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1747659"
                        ],
                        "name": "S. Rajopadhye",
                        "slug": "S.-Rajopadhye",
                        "structuredName": {
                            "firstName": "Sanjay",
                            "lastName": "Rajopadhye",
                            "middleNames": [
                                "V."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Rajopadhye"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 203,
                                "start": 199
                            }
                        ],
                        "text": "This simple assumption allows TIRAMISU to avoid the need to rely on a large body of research that focuses on data-layout transformations to allow scheduling [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 152,
                                "start": 148
                            }
                        ],
                        "text": "Applying these datalayout transformations and the elimination of memory-based dependencies is challenging [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 237,
                                "start": 233
                            }
                        ],
                        "text": "Generating code from the set of computations in Layer IV amounts to generating nested loops that visit each computation in the set, once and only once, while following the lexicographical ordering between the computations [6], [28], [39]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 248,
                                "start": 244
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 17541827,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6acc40233bc71d9f5f31ade4fa9209d8c67af9be",
            "isKey": true,
            "numCitedBy": 107,
            "numCiting": 42,
            "paperAbstract": {
                "fragments": [],
                "text": "The polyhedral model provides a single unified foundation for systolic array synthesis and automatic parallelization of loop programs. We investigate the problem of memory reuse when compiling Alpha (a functional language based on this model). Direct compilation would require unacceptably large memory (for example O(n3) for matrix multiplication). Researchers have previously addressed the problem of memory reuse, and the analysis that this entails for projective memory allocations. This paper addresses, for a given schedule, the choice of the projections so as to minimize the volume of the residual memory. We prove tight bounds on the number of linearly independent projection vectors. Our method is constructive, yielding an optimal memory allocation. We extend the method to modular functions, and deal with the subsequent problems of code generation. Our ideas are illustrated on a number of examples generated by the current version of the Alpha compiler."
            },
            "slug": "Optimizing-memory-usage-in-the-polyhedral-model-Quiller\u00e9-Rajopadhye",
            "title": {
                "fragments": [],
                "text": "Optimizing memory usage in the polyhedral model"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This paper addresses, for a given schedule, the choice of the projections so as to minimize the volume of the residual memory, and proves tight bounds on the number of linearly independent projection vectors."
            },
            "venue": {
                "fragments": [],
                "text": "TOPL"
            },
            "year": 2000
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1795890"
                        ],
                        "name": "Michel Steuwer",
                        "slug": "Michel-Steuwer",
                        "structuredName": {
                            "firstName": "Michel",
                            "lastName": "Steuwer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michel Steuwer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2539451"
                        ],
                        "name": "Toomas Remmelg",
                        "slug": "Toomas-Remmelg",
                        "structuredName": {
                            "firstName": "Toomas",
                            "lastName": "Remmelg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Toomas Remmelg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3224333"
                        ],
                        "name": "Christophe Dubach",
                        "slug": "Christophe-Dubach",
                        "structuredName": {
                            "firstName": "Christophe",
                            "lastName": "Dubach",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christophe Dubach"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 7490888,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "aa3553beb4bfa0793a4bed05704e35412342800e",
            "isKey": false,
            "numCitedBy": 132,
            "numCiting": 21,
            "paperAbstract": {
                "fragments": [],
                "text": "Parallel patterns (e.g., map, reduce) have gained traction as an abstraction for targeting parallel accelerators and are a promising answer to the performance portability problem. However, compiling high-level programs into efficient low-level parallel code is challenging. Current approaches start from a high-level parallel IR and proceed to emit GPU code directly in one big step. Fixed strategies are used to optimize and map parallelism exploiting properties of a particular GPU generation leading to performance portability issues. We introduce the LIFT IR, a new data-parallel IR which encodes OpenCL-specific constructs as functional patterns. Our prior work has shown that this functional nature simplifies the exploration of optimizations and mapping of parallelism from portable high-level programs using rewrite-rules. This paper describes how LIFT IR programs are compiled into efficient OpenCL code. This is non-trivial as many performance sensitive details such as memory allocation, array accesses or synchronization are not explicitly represented in the LIFT IR. We present techniques which overcome this challenge by exploiting the pattern's high-level semantics. Our evaluation shows that the LIFT IR is flexible enough to express GPU programs with complex optimizations achieving performance on par with manually optimized code."
            },
            "slug": "LIFT:-A-functional-data-parallel-IR-for-GPU-code-Steuwer-Remmelg",
            "title": {
                "fragments": [],
                "text": "LIFT: A functional data-parallel IR for high-performance GPU code generation"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This paper describes how LIFT IR programs are compiled into efficient OpenCL code, a new data-parallel IR which encodes OpenCL-specific constructs as functional patterns which is flexible enough to express GPU programs with complex optimizations achieving performance on par with manually optimized code."
            },
            "venue": {
                "fragments": [],
                "text": "2017 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 3,
                                "start": 0
                            }
                        ],
                        "text": "[8] address the problem of automatic code generation for distributed systems."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 18699675,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "754b7668bda19339ad60d56c0edb0149aab96baa",
            "isKey": false,
            "numCitedBy": 63,
            "numCiting": 39,
            "paperAbstract": {
                "fragments": [],
                "text": "We present new techniques for compilation of arbitrarily nested loops with affine dependences for distributed-memory parallel architectures. Our framework is implemented as a source-level transformer that uses the polyhedral model, and generates parallel code with communication expressed with the Message Passing Interface (MPI) library. Compared to all previous approaches, ours is a significant advance either (1) with respect to the generality of input code handled, or (2) efficiency of communication code, or both. We provide experimental results on a cluster of multicores demonstrating its effectiveness. In some cases, code we generate outperforms manually parallelized codes, and in another case is within 25% of it. To the best of our knowledge, this is the first work reporting end-to-end fully automatic distributed-memory parallelization and code generation for input programs and transformation techniques as general as those we allow."
            },
            "slug": "Compiling-affine-loop-nests-for-distributed-memory-Bondhugula",
            "title": {
                "fragments": [],
                "text": "Compiling affine loop nests for distributed-memory parallel architectures"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "To the best of the knowledge, this is the first work reporting end-to-end fully automatic distributed-memory parallelization and code generation for input programs and transformation techniques as general as those the authors allow."
            },
            "venue": {
                "fragments": [],
                "text": "2013 SC - International Conference for High Performance Computing, Networking, Storage and Analysis (SC)"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1694512"
                        ],
                        "name": "H. Chafi",
                        "slug": "H.-Chafi",
                        "structuredName": {
                            "firstName": "Hassan",
                            "lastName": "Chafi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Chafi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1706327"
                        ],
                        "name": "Arvind K. Sujeeth",
                        "slug": "Arvind-K.-Sujeeth",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Sujeeth",
                            "middleNames": [
                                "K."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Arvind K. Sujeeth"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144806284"
                        ],
                        "name": "Kevin J. Brown",
                        "slug": "Kevin-J.-Brown",
                        "structuredName": {
                            "firstName": "Kevin",
                            "lastName": "Brown",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kevin J. Brown"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34946720"
                        ],
                        "name": "HyoukJoong Lee",
                        "slug": "HyoukJoong-Lee",
                        "structuredName": {
                            "firstName": "HyoukJoong",
                            "lastName": "Lee",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "HyoukJoong Lee"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2920004"
                        ],
                        "name": "Anand R. Atreya",
                        "slug": "Anand-R.-Atreya",
                        "structuredName": {
                            "firstName": "Anand",
                            "lastName": "Atreya",
                            "middleNames": [
                                "R."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anand R. Atreya"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1746638"
                        ],
                        "name": "K. Olukotun",
                        "slug": "K.-Olukotun",
                        "structuredName": {
                            "firstName": "Kunle",
                            "lastName": "Olukotun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Olukotun"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 28,
                                "start": 24
                            }
                        ],
                        "text": "Other Compilers: Delite [10] is a generic framework for building DSL compilers."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 154,
                                "start": 137
                            }
                        ],
                        "text": "GraphIt [52] is another compiler that has a scheduling language but that is mainly designed for the area of graph applications.\nd) Other Compilers: Delite [9] is a generic framework for building DSL compilers."
                    },
                    "intents": []
                }
            ],
            "corpusId": 8342773,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "fdf5855c9ccffbcfb2b2380879fd743be47a1ccf",
            "isKey": false,
            "numCitedBy": 168,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Exploiting heterogeneous parallel hardware currently requires mapping application code to multiple disparate programming models. Unfortunately, general-purpose programming models available today can yield high performance but are too low-level to be accessible to the average programmer. We propose leveraging domain-specific languages (DSLs) to map high-level application code to heterogeneous devices. To demonstrate the potential of this approach we present OptiML, a DSL for machine learning. OptiML programs are implicitly parallel and can achieve high performance on heterogeneous hardware with no modification required to the source code. For such a DSL-based approach to be tractable at large scales, better tools are required for DSL authors to simplify language creation and parallelization. To address this concern, we introduce Delite, a system designed specifically for DSLs that is both a framework for creating an implicitly parallel DSL as well as a dynamic runtime providing automated targeting to heterogeneous parallel hardware. We show that OptiML running on Delite achieves single-threaded, parallel, and GPU performance superior to explicitly parallelized MATLAB code in nearly all cases."
            },
            "slug": "A-domain-specific-approach-to-heterogeneous-Chafi-Sujeeth",
            "title": {
                "fragments": [],
                "text": "A domain-specific approach to heterogeneous parallelism"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "Delite is introduced, a system designed specifically for DSLs that is both a framework for creating an implicitly parallel DSL as well as a dynamic runtime providing automated targeting to heterogeneous parallel hardware."
            },
            "venue": {
                "fragments": [],
                "text": "PPoPP '11"
            },
            "year": 2011
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143896454"
                        ],
                        "name": "Mary W. Hall",
                        "slug": "Mary-W.-Hall",
                        "structuredName": {
                            "firstName": "Mary",
                            "lastName": "Hall",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mary W. Hall"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772362"
                        ],
                        "name": "Jacqueline Chame",
                        "slug": "Jacqueline-Chame",
                        "structuredName": {
                            "firstName": "Jacqueline",
                            "lastName": "Chame",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jacqueline Chame"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2109525543"
                        ],
                        "name": "Chun Chen",
                        "slug": "Chun-Chen",
                        "structuredName": {
                            "firstName": "Chun",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chun Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2111108147"
                        ],
                        "name": "Jaewook Shin",
                        "slug": "Jaewook-Shin",
                        "structuredName": {
                            "firstName": "Jaewook",
                            "lastName": "Shin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jaewook Shin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40335288"
                        ],
                        "name": "Gabe Rudy",
                        "slug": "Gabe-Rudy",
                        "structuredName": {
                            "firstName": "Gabe",
                            "lastName": "Rudy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gabe Rudy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "31568526"
                        ],
                        "name": "M. Khan",
                        "slug": "M.-Khan",
                        "structuredName": {
                            "firstName": "Malik",
                            "lastName": "Khan",
                            "middleNames": [
                                "Murtaza"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Khan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 29,
                                "start": 25
                            }
                        ],
                        "text": "AlphaZ [52], CHiLL [11], [25] and URUK [20] are polyhedral frameworks developed to allow users to express high-level transformations using scheduling commands."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 17524405,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3ab39b6f60e163a4a609410f320555ddc20b3976",
            "isKey": false,
            "numCitedBy": 108,
            "numCiting": 52,
            "paperAbstract": {
                "fragments": [],
                "text": "In this paper, we describe transformation recipes, which provide a high-level interface to the code transformation and code generation capability of a compiler. These recipes can be generated by compiler decision algorithms or savvy software developers. This interface is part of an auto-tuning framework that explores a set of different implementations of the same computation and automatically selects the best-performing implementation. Along with the original computation, a transformation recipe specifies a range of implementations of the computation resulting from composing a set of high-level code transformations. In our system, an underlying polyhedral framework coupled with transformation algorithms takes this set of transformations, composes them and automatically generates correct code. We first describe an abstract interface for transformation recipes, which we propose to facilitate interoperability with other transformation frameworks. We then focus on the specific transformation recipe interface used in our compiler and present performance results on its application to kernel and library tuning and tuning of key computations in high-end applications. We also show how this framework can be used to generate and auto-tune parallel OpenMP or CUDA code from a high-level specification."
            },
            "slug": "Loop-Transformation-Recipes-for-Code-Generation-and-Hall-Chame",
            "title": {
                "fragments": [],
                "text": "Loop Transformation Recipes for Code Generation and Auto-Tuning"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "An abstract interface for transformation recipes is described, which is proposed to facilitate interoperability with other transformation frameworks and present performance results on its application to kernel and library tuning and tuning of key computations in high-end applications."
            },
            "venue": {
                "fragments": [],
                "text": "LCPC"
            },
            "year": 2009
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793611"
                        ],
                        "name": "L. Pouchet",
                        "slug": "L.-Pouchet",
                        "structuredName": {
                            "firstName": "Louis-No\u00ebl",
                            "lastName": "Pouchet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Pouchet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1769333"
                        ],
                        "name": "C. Bastoul",
                        "slug": "C.-Bastoul",
                        "structuredName": {
                            "firstName": "C\u00e9dric",
                            "lastName": "Bastoul",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Bastoul"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145981817"
                        ],
                        "name": "J. Ramanujam",
                        "slug": "J.-Ramanujam",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Ramanujam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ramanujam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 148,
                                "start": 144
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 13949046,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "493c0286a097005b626f8f978c6f475d3f05ca43",
            "isKey": false,
            "numCitedBy": 126,
            "numCiting": 65,
            "paperAbstract": {
                "fragments": [],
                "text": "High-level loop transformations are a key instrument in mapping computational kernels to effectively exploit the resources in modern processor architectures. Nevertheless, selecting required compositions of loop transformations to achieve this remains a significantly challenging task; current compilers may be off by orders of magnitude in performance compared to hand-optimized programs. To address this fundamental challenge, we first present a convex characterization of all distinct, semantics-preserving, multidimensional affine transformations. We then bring together algebraic, algorithmic, and performance analysis results to design a tractable optimization algorithm over this highly expressive space. Our framework has been implemented and validated experimentally on a representative set of benchmarks running on state-of-the-art multi-core platforms."
            },
            "slug": "Loop-transformations:-convexity,-pruning-and-Pouchet-Bondhugula",
            "title": {
                "fragments": [],
                "text": "Loop transformations: convexity, pruning and optimization"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "This work first presents a convex characterization of all distinct, semantics-preserving, multidimensional affine transformations, then brings together algebraic, algorithmic, and performance analysis results to design a tractable optimization algorithm over this highly expressive space."
            },
            "venue": {
                "fragments": [],
                "text": "POPL '11"
            },
            "year": 2011
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39682108"
                        ],
                        "name": "M. Lam",
                        "slug": "M.-Lam",
                        "structuredName": {
                            "firstName": "Monica",
                            "lastName": "Lam",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Lam"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "[1] and Bondhugula et al."
                    },
                    "intents": []
                }
            ],
            "corpusId": 481335,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "280fba9ae63772c2185e214e3fd68c4204d5a8e6",
            "isKey": false,
            "numCitedBy": 266,
            "numCiting": 32,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents several algorithms to solve code generation and optimization problems specific to machines with distributed address spaces. Given a description of how the computation is to be partitioned across the processors in a machine, our algorithms produce an SPMD (single program multiple data) program to be run on each processor. Our compiler generated the necessary receive and send instructions, optimizes the communication by eliminating redundant communication and aggregating small messages into large messages, allocates space locally on each processor, and translates global data addresses to local addresses.\nOur techniques are based on an exact data-flow analysis on individual array element accesses. Unlike data dependence analysis, this analysis determines if two dynamic instances refer to the same value, and not just to the same location. Using this information, our compiler can handle more flexible data decompositions and find more opportunities for communication optimization than systems based on data dependence analysis.\nOur technique is based on a uniform framework, where data decompositions, computation decompositions and the data flow information are all represented as systems of linear inequalities. We show that the problems of communication code generation, local memory management, message aggregation and redundant data communication elimination can all be solved by projecting polyhedra represented by sets of inequalities onto lower dimensional spaces."
            },
            "slug": "Communication-optimization-and-code-generation-for-Amarasinghe-Lam",
            "title": {
                "fragments": [],
                "text": "Communication optimization and code generation for distributed memory machines"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "It is shown that the problems of communication code generation, local memory management, message aggregation and redundant data communication elimination can all be solved by projecting polyhedra represented by sets of inequalities onto lower dimensional spaces."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '93"
            },
            "year": 1993
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2759686"
                        ],
                        "name": "K. Trifunovic",
                        "slug": "K.-Trifunovic",
                        "structuredName": {
                            "firstName": "Konrad",
                            "lastName": "Trifunovic",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Trifunovic"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3090307"
                        ],
                        "name": "D. Edelsohn",
                        "slug": "D.-Edelsohn",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Edelsohn",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Edelsohn"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2146311947"
                        ],
                        "name": "Feng Li",
                        "slug": "Feng-Li",
                        "structuredName": {
                            "firstName": "Feng",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Feng Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "69537490"
                        ],
                        "name": "H. Jagasia",
                        "slug": "H.-Jagasia",
                        "structuredName": {
                            "firstName": "Harsha",
                            "lastName": "Jagasia",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Jagasia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2292387"
                        ],
                        "name": "Razya Ladelsky",
                        "slug": "Razya-Ladelsky",
                        "structuredName": {
                            "firstName": "Razya",
                            "lastName": "Ladelsky",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Razya Ladelsky"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1977944"
                        ],
                        "name": "Sebastian Pop",
                        "slug": "Sebastian-Pop",
                        "structuredName": {
                            "firstName": "Sebastian",
                            "lastName": "Pop",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sebastian Pop"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38070142"
                        ],
                        "name": "J. Sj\u00f6din",
                        "slug": "J.-Sj\u00f6din",
                        "structuredName": {
                            "firstName": "Jan",
                            "lastName": "Sj\u00f6din",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Sj\u00f6din"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2542986"
                        ],
                        "name": "Ramakrishna Upadrasta",
                        "slug": "Ramakrishna-Upadrasta",
                        "structuredName": {
                            "firstName": "Ramakrishna",
                            "lastName": "Upadrasta",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ramakrishna Upadrasta"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 130,
                                "start": 126
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 17792525,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "04afd9817df2900a02f915203e01657b56a957cd",
            "isKey": false,
            "numCitedBy": 82,
            "numCiting": 41,
            "paperAbstract": {
                "fragments": [],
                "text": "Modern compilers are responsible for adapting the semantics of source programs into a form that makes ecient use of a highly complex, hetero- geneous machine. This adaptation amounts to solve an optimization problem in a huge and unstructured search space, while predicting the performance outcome of complex sequences of program transformations. The polyhedral model of com- pilation is aimed at these challenges. Its geometrical, non-inductive semantics enables the construction of better-structured optimization problems and pre- cise analytical models. Recent work demonstrated the scalability of the main polyhedral algorithms to real-world programs. Its integration into production compilers is under way, pioneered by the graphite branch of the GNU Compiler Collection (GCC). Two years after the eective beginning of the project, this paper reports on original questions and innovative solutions that arose during the design and implementation of graphite."
            },
            "slug": "GRAPHITE-Two-Years-After-First-Lessons-Learned-From-Trifunovic-Cohen",
            "title": {
                "fragments": [],
                "text": "GRAPHITE Two Years After First Lessons Learned From Real-World Polyhedral Compilation"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "This paper reports on original questions and innovative solutions that arose during the design and implementation of graphite, pioneered by the graphite branch of the GNU Compiler Collection (GCC)."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 19,
                                "start": 16
                            }
                        ],
                        "text": "We also use the ISL library notation for sets and maps throughout the paper."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 75,
                                "start": 71
                            }
                        ],
                        "text": "More details and formal definitions for these concepts are provided in [48], [2], [37]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 86,
                                "start": 82
                            }
                        ],
                        "text": "All sets and maps in TIRAMISU are implemented using the Integer Set Library (ISL) [48]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 112,
                                "start": 108
                            }
                        ],
                        "text": "TIRAMISU relies on an implementation of the Cloog [6] code generation algorithm provided by the ISL library [48]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 99,
                                "start": 96
                            }
                        ],
                        "text": "TIRAMISU relies on an implementation of the Cloog [5] code generation algorithm provided by the ISL library [47]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 80,
                                "start": 77
                            }
                        ],
                        "text": "All sets and maps in TIRAMISU are implemented using the Integer Set Library (ISL) [47]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 9220965,
            "fieldsOfStudy": [
                "Art"
            ],
            "id": "1c5b15587e4034c97610b2017697ad1ea663a8fa",
            "isKey": true,
            "numCitedBy": 351,
            "numCiting": 19,
            "paperAbstract": {
                "fragments": [],
                "text": "In compiler research, polytopes and related mathematical objects have been successfully used for several decades to represent and manipulate computer programs in an approach that has become known as the polyhedral model. The key insight is that the kernels of many compute-intensive applications are composed of loops with bounds that are affine combinations of symbolic constants and outer loop iterators. The iterations of a loop nest can then be represented as the integer points in a (parametric) polytope and manipulated as a whole, rather than as individual iterations. A similar reasoning holds for the elements of an array and for mappings between loop iterations and array elements."
            },
            "slug": "isl:-An-Integer-Set-Library-for-the-Polyhedral-Verdoolaege",
            "title": {
                "fragments": [],
                "text": "isl: An Integer Set Library for the Polyhedral Model"
            },
            "tldr": {
                "abstractSimilarityScore": 100,
                "text": "In compiler research, polytopes and related mathematical objects have been successfully used for several decades to represent and manipulate computer programs in an approach that has become known as the polyhedral model."
            },
            "venue": {
                "fragments": [],
                "text": "ICMS"
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "11860259"
                        ],
                        "name": "Yunming Zhang",
                        "slug": "Yunming-Zhang",
                        "structuredName": {
                            "firstName": "Yunming",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yunming Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46235335"
                        ],
                        "name": "Mengjiao Yang",
                        "slug": "Mengjiao-Yang",
                        "structuredName": {
                            "firstName": "Mengjiao",
                            "lastName": "Yang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mengjiao Yang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145683292"
                        ],
                        "name": "S. Kamil",
                        "slug": "S.-Kamil",
                        "structuredName": {
                            "firstName": "Shoaib",
                            "lastName": "Kamil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Kamil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2045944"
                        ],
                        "name": "Julian Shun",
                        "slug": "Julian-Shun",
                        "structuredName": {
                            "firstName": "Julian",
                            "lastName": "Shun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Julian Shun"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 12,
                                "start": 8
                            }
                        ],
                        "text": "GraphIt [53] is another compiler that has a scheduling language but that is mainly designed for the area of graph applications."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 53088127,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "2f0f52bcac2d2de4e41ee4f6d721643689ce5a18",
            "isKey": false,
            "numCitedBy": 93,
            "numCiting": 86,
            "paperAbstract": {
                "fragments": [],
                "text": "The performance bottlenecks of graph applications depend not only on the algorithm and the underlying hardware, but also on the size and structure of the input graph. As a result, programmers must try different combinations of a large set of techniques, which make tradeoffs among locality, work-efficiency, and parallelism, to develop the best implementation for a specific algorithm and type of graph. Existing graph frameworks and domain specific languages (DSLs) lack flexibility, supporting only a limited set of optimizations. This paper introduces GraphIt, a new DSL for graph computations that generates fast implementations for algorithms with different performance characteristics running on graphs with different sizes and structures. GraphIt separates what is computed (algorithm) from how it is computed (schedule). Programmers specify the algorithm using an algorithm language, and performance optimizations are specified using a separate scheduling language. The algorithm language simplifies expressing the algorithms, while exposing opportunities for optimizations. We formulate graph optimizations, including edge traversal direction, data layout, parallelization, cache, NUMA, and kernel fusion optimizations, as tradeoffs among locality, parallelism, and work-efficiency. The scheduling language enables programmers to easily search through this complicated tradeoff space by composing together a large set of edge traversal, vertex data layout, and program structure optimizations. The separation of algorithm and schedule also enables us to build an autotuner on top of GraphIt to automatically find high-performance schedules. The compiler uses a new scheduling representation, the graph iteration space, to model, compose, and ensure the validity of the large number of optimizations. We evaluate GraphIt\u2019s performance with seven algorithms on graphs with different structures and sizes. GraphIt outperforms the next fastest of six state-of-the-art shared-memory frameworks (Ligra, Green-Marl, GraphMat, Galois, Gemini, and Grazelle) on 24 out of 32 experiments by up to 4.8\u00d7, and is never more than 43% slower than the fastest framework on the other experiments. GraphIt also reduces the lines of code by up to an order of magnitude compared to the next fastest framework."
            },
            "slug": "GraphIt:-a-high-performance-graph-DSL-Zhang-Yang",
            "title": {
                "fragments": [],
                "text": "GraphIt: a high-performance graph DSL"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "GraphIt is introduced, a new DSL for graph computations that generates fast implementations for algorithms with different performance characteristics running on graphs with different sizes and structures and which outperforms the next fastest shared-memory frameworks on 24 out of 32 experiments."
            },
            "venue": {
                "fragments": [],
                "text": "Proc. ACM Program. Lang."
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1718457"
                        ],
                        "name": "William Thies",
                        "slug": "William-Thies",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Thies",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William Thies"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "41070781"
                        ],
                        "name": "F. Vivien",
                        "slug": "F.-Vivien",
                        "structuredName": {
                            "firstName": "Fr\u00e9d\u00e9ric",
                            "lastName": "Vivien",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Vivien"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145605446"
                        ],
                        "name": "Jeffrey Sheldon",
                        "slug": "Jeffrey-Sheldon",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Sheldon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jeffrey Sheldon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 236,
                                "start": 232
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 1197197,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "a0415d75b3d4cb52b22de2c6f1566e985ebeab07",
            "isKey": false,
            "numCitedBy": 76,
            "numCiting": 27,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a unified mathematical framework for analyzing the tradeoffs between parallelism and storage allocation within a parallelizing compiler. Using this framework, we show how to find a good storage mapping for a given schedule, a good schedule for a given storage mapping, and a good storage mapping that is valid for all legal schedules. We consider storage mappings that collapse one dimension of a multi-dimensional array, and programs that are in a single assignment form with a one-dimensional schedule. Our technique combines affine scheduling techniques with occupancy vector analysis and incorporates general affine dependences across statements and loop nests. We formulate the constraints imposed by the data dependences and storage mappings as a set of linear inequalities, and apply numerical programming techniques to efficiently solve for the shortest occupancy vector. We consider our method to be a first step towards automating a procedure that finds the optimal tradeoff between parallelism and storage space."
            },
            "slug": "A-unified-framework-for-schedule-and-storage-Thies-Vivien",
            "title": {
                "fragments": [],
                "text": "A unified framework for schedule and storage optimization"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "This work combines affine scheduling techniques with occupancy vector analysis and incorporates general affine dependences across statements and loop nests, and forms the constraints imposed by the data dependences and storage mappings as a set of linear inequalities."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '01"
            },
            "year": 2001
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1777324"
                        ],
                        "name": "Anton Lokhmotov",
                        "slug": "Anton-Lokhmotov",
                        "structuredName": {
                            "firstName": "Anton",
                            "lastName": "Lokhmotov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anton Lokhmotov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1796386"
                        ],
                        "name": "J. Absar",
                        "slug": "J.-Absar",
                        "structuredName": {
                            "firstName": "Javed",
                            "lastName": "Absar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Absar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1807282"
                        ],
                        "name": "S. V. Haastregt",
                        "slug": "S.-V.-Haastregt",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Haastregt",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. V. Haastregt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145510407"
                        ],
                        "name": "Alexey Kravets",
                        "slug": "Alexey-Kravets",
                        "structuredName": {
                            "firstName": "Alexey",
                            "lastName": "Kravets",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexey Kravets"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1734519"
                        ],
                        "name": "A. Donaldson",
                        "slug": "A.-Donaldson",
                        "structuredName": {
                            "firstName": "Alastair",
                            "lastName": "Donaldson",
                            "middleNames": [
                                "F."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Donaldson"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 95,
                                "start": 89
                            }
                        ],
                        "text": "Such a trade-off is not captured by the Pluto automatic scheduling algorithm used\nwithin PENCIL."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 118,
                                "start": 112
                            }
                        ],
                        "text": "For the other kernels, both TIRAMISU and Halide apply vectorization and unrolling on the innermost loops, while PENCIL does not since the multicore code generator of PENCIL does not implement these two optimizations."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 48,
                                "start": 45
                            }
                        ],
                        "text": "[7] and was confirmed in the PENCIL compiler [4]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 148,
                                "start": 142
                            }
                        ],
                        "text": "We compare TIRAMISU with two other compilers: Halide [39], an industrial-quality DSL for image processing that has a scheduling language, and PENCIL [3], a state-of-the-art fully automatic polyhedral compiler."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 18,
                                "start": 12
                            }
                        ],
                        "text": "Compared to PENCIL, the speedup in conv2D and gaussian is due to the fact that PENCIL generates unnecessarily complicated control flow within the CUDA kernel, which leads to thread divergence. c) Distributed: We assume the data are already distributed across the nodes by rows."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 80,
                                "start": 74
                            }
                        ],
                        "text": "For example, the Pluto [8] automatic scheduling algorithm (used in Pluto, PENCIL and Polly) tries to minimize the distance between producer and consumer statements while maximizing outermost parallelism, but it does not consider data layout, redundant computations, or the complexity of the control of the generated code."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 72,
                                "start": 66
                            }
                        ],
                        "text": "For warpAffine, both TIRAMISU and Halide have a high speedup over PENCIL because the unique loop nest in this benchmark has 25 statements, and vectorizing the innermost loop transforms all of these statements to their vector equivalent while unrolling increases register reuse and instruction level parallelism on the 24 cores of the test machine. b) GPU: For the GPU backend, the reported times are the total execution times (data copy and kernel execution)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 86,
                                "start": 80
                            }
                        ],
                        "text": "a) Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [8], Polly [22], Tensor Comprehensions [46], and PolyMage [34] are fully automatic."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 78,
                                "start": 72
                            }
                        ],
                        "text": "For the single-node multicore and GPU we compare TIRAMISU to Halide and PENCIL."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 113,
                                "start": 107
                            }
                        ],
                        "text": "The efficiency of these techniques was demonstrated by Benabderrahmane et al. [6] and was confirmed in the PENCIL compiler [4]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 6,
                                "start": 0
                            }
                        ],
                        "text": "PENCIL decides to interchange the two innermost loop levels in order to enable the fusion of the two successive loop nests."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 26,
                                "start": 20
                            }
                        ],
                        "text": "The slowdown of the PENCIL compiler in gaussian is due to a suboptimal decision made by PENCIL."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 87,
                                "start": 84
                            }
                        ],
                        "text": "Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [9], Polly [23], Tensor Comprehensions [47], and PolyMage [35] are fully automatic."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 112,
                                "start": 106
                            }
                        ],
                        "text": "Some of them are designed for specific domains (such as Tensor Comprehensions and PolyMage), while Pluto, PENCIL, and Polly are more general."
                    },
                    "intents": []
                }
            ],
            "corpusId": 62457279,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b4e609a85eaf676338a2741ac8a618e51f57f968",
            "isKey": false,
            "numCitedBy": 11,
            "numCiting": 16,
            "paperAbstract": {
                "fragments": [],
                "text": "Programming accelerators such as GPUs with low-level APIs and languages such as OpenCL and CUDA is difficult, error prone, and not performance-portable. Automatic parallelization and domain specific languages (DSLs) have been proposed to hide this complexity and to regain some performance portability. We present PENCIL, a rigorously-defined subset of GNU C99 with specific programming rules and few extensions. Adherence to this subset and the use of these extensions enable compilers to exploit parallelism and to better optimize code when targeting accelerators. We intend PENCIL both as a portable implementation language to facilitate the acceleration of applications, \nand as a tractable target language for DSL compilers."
            },
            "slug": "PENCIL-Language-Specification-Baghdadi-Cohen",
            "title": {
                "fragments": [],
                "text": "PENCIL Language Specification"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "PENCIL is presented, a rigorously-defined subset of GNU C99 with specific programming rules and few extensions that enable compilers to exploit parallelism and to better optimize code when targeting accelerators."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49030677"
                        ],
                        "name": "Qing Yi",
                        "slug": "Qing-Yi",
                        "structuredName": {
                            "firstName": "Qing",
                            "lastName": "Yi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qing Yi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145929881"
                        ],
                        "name": "K. Seymour",
                        "slug": "K.-Seymour",
                        "structuredName": {
                            "firstName": "Keith",
                            "lastName": "Seymour",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Seymour"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1770276"
                        ],
                        "name": "Haihang You",
                        "slug": "Haihang-You",
                        "structuredName": {
                            "firstName": "Haihang",
                            "lastName": "You",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Haihang You"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1771649"
                        ],
                        "name": "R. Vuduc",
                        "slug": "R.-Vuduc",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Vuduc",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Vuduc"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34895614"
                        ],
                        "name": "D. Quinlan",
                        "slug": "D.-Quinlan",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Quinlan",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Quinlan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 9,
                                "start": 5
                            }
                        ],
                        "text": "POET [51] is a system that uses an XML-based description of code and transformation behavior to parametrize loop transformations."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 156,
                                "start": 152
                            }
                        ],
                        "text": "Since TVM is also a non-polyhedral compiler, the differences between Halide and TIRAMISU that are due to the use of polyhedral model also apply to TVM.\nPOET [50] is a system that uses an XML-based description of code and transformation behavior to parametrize loop transformations."
                    },
                    "intents": []
                }
            ],
            "corpusId": 22974,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0cfafec1c6a6d524e095fc2480eb8c0a1d0f9c5b",
            "isKey": false,
            "numCitedBy": 124,
            "numCiting": 31,
            "paperAbstract": {
                "fragments": [],
                "text": "The excessive complexity of both machine architectures and applications have made it difficult for compilers to statically model and predict application behavior. This observation motivates the recent interest in performance tuning using empirical techniques. We present a new embedded scripting language, POET (parameterized optimization for empirical tuning), for parameterizing complex code transformations so that they can be empirically tuned. The POET language aims to significantly improve the generality, flexibility, and efficiency of existing empirical tuning systems. We have used the language to parameterize and to empirically tune three loop optimizations - interchange, blocking, and unrolling - for two linear algebra kernels. We show experimentally that the time required to tune these optimizations using POET, which does not require any program analysis, is significantly shorter than that when using a full compiler-based source-code optimizer which performs sophisticated program analysis and optimizations."
            },
            "slug": "POET:-Parameterized-Optimizations-for-Empirical-Yi-Seymour",
            "title": {
                "fragments": [],
                "text": "POET: Parameterized Optimizations for Empirical Tuning"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "The POET language aims to significantly improve the generality, flexibility, and efficiency of existing empirical tuning systems by parameterizing complex code transformations so that they can be empirically tuned."
            },
            "venue": {
                "fragments": [],
                "text": "2007 IEEE International Parallel and Distributed Processing Symposium"
            },
            "year": 2007
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1883512"
                        ],
                        "name": "Justin Holewinski",
                        "slug": "Justin-Holewinski",
                        "structuredName": {
                            "firstName": "Justin",
                            "lastName": "Holewinski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Justin Holewinski"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 188,
                                "start": 184
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 14200644,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "618fa1c14e3c6008eb047002311d21cae412eebc",
            "isKey": false,
            "numCitedBy": 107,
            "numCiting": 30,
            "paperAbstract": {
                "fragments": [],
                "text": "Time-tiling is necessary for the efficient execution of iterative stencil computations. Classical hyper-rectangular tiles cannot be used due to the combination of backward and forward dependences along space dimensions. Existing techniques trade temporal data reuse for inefficiencies in other areas, such as load imbalance, redundant computations, or increased control flow overhead, therefore making it challenging for use with GPUs.\n We propose a time-tiling method for iterative stencil computations on GPUs. Our method does not involve redundant computations. It favors coalesced global-memory accesses, data reuse in local/shared-memory or cache, avoidance of thread divergence, and concurrency, combining hexagonal tile shapes along the time and one spatial dimension with classical tiling along the other spatial dimensions. Hexagonal tiles expose multi-level parallelism as well as data reuse. Experimental results demonstrate significant performance improvements over existing stencil compilers."
            },
            "slug": "Hybrid-Hexagonal/Classical-Tiling-for-GPUs-Grosser-Cohen",
            "title": {
                "fragments": [],
                "text": "Hybrid Hexagonal/Classical Tiling for GPUs"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "A time-tiling method for iterative stencil computations on GPUs that favors coalesced global-memory accesses, data reuse in local/shared-memory or cache, avoidance of thread divergence, and concurrency, combining hexagonal tile shapes along the time and one spatial dimension with classical tiling along the other spatial dimensions is proposed."
            },
            "venue": {
                "fragments": [],
                "text": "CGO '14"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1913774"
                        ],
                        "name": "Tianqi Chen",
                        "slug": "Tianqi-Chen",
                        "structuredName": {
                            "firstName": "Tianqi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianqi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47108160"
                        ],
                        "name": "T. Moreau",
                        "slug": "T.-Moreau",
                        "structuredName": {
                            "firstName": "Thierry",
                            "lastName": "Moreau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Moreau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1732910"
                        ],
                        "name": "Ziheng Jiang",
                        "slug": "Ziheng-Jiang",
                        "structuredName": {
                            "firstName": "Ziheng",
                            "lastName": "Jiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ziheng Jiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3050154"
                        ],
                        "name": "Haichen Shen",
                        "slug": "Haichen-Shen",
                        "structuredName": {
                            "firstName": "Haichen",
                            "lastName": "Shen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Haichen Shen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2621619"
                        ],
                        "name": "Eddie Q. Yan",
                        "slug": "Eddie-Q.-Yan",
                        "structuredName": {
                            "firstName": "Eddie",
                            "lastName": "Yan",
                            "middleNames": [
                                "Q."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eddie Q. Yan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2185540"
                        ],
                        "name": "Leyuan Wang",
                        "slug": "Leyuan-Wang",
                        "structuredName": {
                            "firstName": "Leyuan",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Leyuan Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49994783"
                        ],
                        "name": "Yuwei Hu",
                        "slug": "Yuwei-Hu",
                        "structuredName": {
                            "firstName": "Yuwei",
                            "lastName": "Hu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yuwei Hu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1717411"
                        ],
                        "name": "L. Ceze",
                        "slug": "L.-Ceze",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Ceze",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Ceze"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1730156"
                        ],
                        "name": "Carlos Guestrin",
                        "slug": "Carlos-Guestrin",
                        "structuredName": {
                            "firstName": "Carlos",
                            "lastName": "Guestrin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Carlos Guestrin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144695691"
                        ],
                        "name": "A. Krishnamurthy",
                        "slug": "A.-Krishnamurthy",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Krishnamurthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Krishnamurthy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 9,
                                "start": 6
                            }
                        ],
                        "text": "Since TVM is also a non-polyhedral compiler, the differences between Halide and TIRAMISU that are due to the use of polyhedral model also apply to TVM.\nPOET [50] is a system that uses an XML-based description of code and transformation behavior to parametrize loop transformations."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 8,
                                "start": 4
                            }
                        ],
                        "text": "TVM [12] is another system that shares many similarities with Halide."
                    },
                    "intents": [
                        {
                            "id": "result"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 3,
                                "start": 0
                            }
                        ],
                        "text": "TVM [11] is another system that shares many similarities with Halide."
                    },
                    "intents": []
                }
            ],
            "corpusId": 3296374,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ec3071fb918ad69ec80df1ca9cf1fdeb386a9603",
            "isKey": false,
            "numCitedBy": 140,
            "numCiting": 50,
            "paperAbstract": {
                "fragments": [],
                "text": "Scalable frameworks, such as TensorFlow, MXNet, Caffe, and PyTorch drive the current popularity and utility of deep learning. However, these frameworks are optimized for a narrow range of server-class GPUs and deploying workloads to other platforms such as mobile phones, embedded devices, and specialized accelerators (e.g., FPGAs, ASICs) requires laborious manual effort. We propose TVM, an end-to-end optimization stack that exposes graph-level and operator-level optimizations to provide performance portability to deep learning workloads across diverse hardware back-ends. We discuss the optimization challenges specific to deep learning that TVM solves: high-level operator fusion, low-level memory reuse across threads, mapping to arbitrary hardware primitives, and memory latency hiding. Experimental results demonstrate that TVM delivers performance across hardware back-ends that are competitive with state-of-the-art libraries for low-power CPU and server-class GPUs. We also demonstrate TVM's ability to target new hardware accelerator back-ends by targeting an FPGA-based generic deep learning accelerator. The compiler infrastructure is open sourced."
            },
            "slug": "TVM:-End-to-End-Optimization-Stack-for-Deep-Chen-Moreau",
            "title": {
                "fragments": [],
                "text": "TVM: End-to-End Optimization Stack for Deep Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "TVM is proposed, an end-to-end optimization stack that exposes graph-level and operator-level optimizations to provide performance portability to deep learning workloads across diverse hardware back-ends and discusses the optimization challenges specific toDeep learning that TVM solves."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143673589"
                        ],
                        "name": "Tomofumi Yuki",
                        "slug": "Tomofumi-Yuki",
                        "structuredName": {
                            "firstName": "Tomofumi",
                            "lastName": "Yuki",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tomofumi Yuki"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2061294868"
                        ],
                        "name": "Gautam Gupta",
                        "slug": "Gautam-Gupta",
                        "structuredName": {
                            "firstName": "Gautam",
                            "lastName": "Gupta",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gautam Gupta"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2209910"
                        ],
                        "name": "DaeGon Kim",
                        "slug": "DaeGon-Kim",
                        "structuredName": {
                            "firstName": "DaeGon",
                            "lastName": "Kim",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "DaeGon Kim"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2130631252"
                        ],
                        "name": "Tanveer Pathan",
                        "slug": "Tanveer-Pathan",
                        "structuredName": {
                            "firstName": "Tanveer",
                            "lastName": "Pathan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tanveer Pathan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1747659"
                        ],
                        "name": "S. Rajopadhye",
                        "slug": "S.-Rajopadhye",
                        "structuredName": {
                            "firstName": "Sanjay",
                            "lastName": "Rajopadhye",
                            "middleNames": [
                                "V."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Rajopadhye"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 359,
                                "start": 353
                            }
                        ],
                        "text": "Instead of being fully automatic, TIRAMISU relies on the user to provide scheduling commands to control choices in the generated code (synchronous/asynchronous communication, the granularity of communication, buffer sizes, when to send and receive, cost of communication versus re-computation, etc.).\nb) Polyhedral compilers with a scheduling language: AlphaZ [51], CHiLL [10], [24] and URUK [19] are polyhedral frameworks developed to allow users to express high-level transformations using scheduling commands."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 48,
                                "start": 44
                            }
                        ],
                        "text": "Other polyhedral frameworks, such as AlphaZ [52] and CHiLL [11], eschew full automation and instead expose a scheduling language that enables users to productively explore the space of possible transformations."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 43,
                                "start": 37
                            }
                        ],
                        "text": "Other polyhedral frameworks, such as AlphaZ [51] and CHiLL [10], eschew full automation and instead expose a ar X iv :1\n80 4."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 11,
                                "start": 7
                            }
                        ],
                        "text": "AlphaZ [52], CHiLL [11], [25] and URUK [20] are polyhedral frameworks developed to allow users to express high-level transformations using scheduling commands."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 133,
                                "start": 127
                            }
                        ],
                        "text": "The use of a scheduling language has been shown effective for generating efficient code by multiple compilers including CHiLL, AlphaZ, and Halide [39], [40]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 9562425,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d0d07d24d29989ab0f6a1d3863cd6393e6d352e5",
            "isKey": true,
            "numCitedBy": 55,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "The polyhedral model is now a well established and effective formalism for program optimization and parallelization. However, finding optimal transformations is a long-standing open problem. It is therefore important to develop tools that, rather than following predefined optimization criteria, allow practitioners to explore different choices through script-driven or user-guided transformations. More than practitioners, such flexibility is even more important for compiler researchers and auto-tuner developers. In addition, tools must also raise the level of abstraction by representing and manipulating reductions and scans explicitly. And third, the tools must also be able to explore transformation choices that consider memory (re)-allocation."
            },
            "slug": "AlphaZ:-A-System-for-Design-Space-Exploration-in-Yuki-Gupta",
            "title": {
                "fragments": [],
                "text": "AlphaZ: A System for Design Space Exploration in the Polyhedral Model"
            },
            "tldr": {
                "abstractSimilarityScore": 77,
                "text": "The polyhedral model is now a well established and effective formalism for program optimization and parallelization, however, finding optimal transformations is a long-standing open problem and tools that allow practitioners to explore different choices through script-driven or user-guided transformations are needed."
            },
            "venue": {
                "fragments": [],
                "text": "LCPC"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144497869"
                        ],
                        "name": "S. Krishnamoorthy",
                        "slug": "S.-Krishnamoorthy",
                        "structuredName": {
                            "firstName": "Sriram",
                            "lastName": "Krishnamoorthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Krishnamoorthy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47800062"
                        ],
                        "name": "M. Baskaran",
                        "slug": "M.-Baskaran",
                        "structuredName": {
                            "firstName": "Muthu",
                            "lastName": "Baskaran",
                            "middleNames": [
                                "Manikandan"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Baskaran"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145981817"
                        ],
                        "name": "J. Ramanujam",
                        "slug": "J.-Ramanujam",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Ramanujam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ramanujam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793925"
                        ],
                        "name": "A. Rountev",
                        "slug": "A.-Rountev",
                        "structuredName": {
                            "firstName": "Atanas",
                            "lastName": "Rountev",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Rountev"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 900262,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "1bec73cbc0ffb8eb32d6da63895f5319b7409386",
            "isKey": false,
            "numCitedBy": 221,
            "numCiting": 31,
            "paperAbstract": {
                "fragments": [],
                "text": "Performance optimization of stencil computations has been widely studied in the literature, since they occur in many computationally intensive scientific and engineering applications. Compiler frameworks have also been developed that can transform sequential stencil codes for optimization of data locality and parallelism. However, loop skewing is typically required in order to tile stencil codes along the time dimension, resulting in load imbalance in pipelined parallel execution of the tiles. In this paper, we develop an approach for automatic parallelization of stencil codes, that explicitly addresses the issue of load-balanced execution of tiles. Experimental results are provided that demonstrate the effectiveness of the approach."
            },
            "slug": "Effective-automatic-parallelization-of-stencil-Krishnamoorthy-Baskaran",
            "title": {
                "fragments": [],
                "text": "Effective automatic parallelization of stencil computations"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This paper develops an approach for automatic parallelization of stencil codes, that explicitly addresses the issue of load-balanced execution of tiles, and demonstrates the effectiveness of the approach."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '07"
            },
            "year": 2007
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35057865"
                        ],
                        "name": "Sander Vocke",
                        "slug": "Sander-Vocke",
                        "structuredName": {
                            "firstName": "Sander",
                            "lastName": "Vocke",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sander Vocke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1684335"
                        ],
                        "name": "H. Corporaal",
                        "slug": "H.-Corporaal",
                        "structuredName": {
                            "firstName": "Henk",
                            "lastName": "Corporaal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Corporaal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1910734"
                        ],
                        "name": "Roel Jordans",
                        "slug": "Roel-Jordans",
                        "structuredName": {
                            "firstName": "Roel",
                            "lastName": "Jordans",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Roel Jordans"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2442002"
                        ],
                        "name": "R. Corvino",
                        "slug": "R.-Corvino",
                        "structuredName": {
                            "firstName": "Rosilde",
                            "lastName": "Corvino",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Corvino"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2177318"
                        ],
                        "name": "Rick J. M. Nas",
                        "slug": "Rick-J.-M.-Nas",
                        "structuredName": {
                            "firstName": "Rick",
                            "lastName": "Nas",
                            "middleNames": [
                                "J.",
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Rick J. M. Nas"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 4,
                                "start": 0
                            }
                        ],
                        "text": "[49] extend Halide to target DSPs, and add scheduling commands such as store_in to specify in which memory hierarchy data should be stored."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 21316753,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "213533b755b70e4754b2f11f39c766db17aa71a9",
            "isKey": false,
            "numCitedBy": 8,
            "numCiting": 39,
            "paperAbstract": {
                "fragments": [],
                "text": "Specialized Digital Signal Processors (DSPs), which can be found in a wide range of modern devices, play an important role in power-efficient, high-performance image processing. Applications including camera sensor post-processing and computer vision benefit from being (partially) mapped onto such DSPs. However, due to their specialized instruction sets and dependence on low-level code optimization, developing applications for DSPs is more time-consuming and error-prone than for general-purpose processors. Halide is a domain-specific language (DSL) that enables low-effort development of portable, high-performance imaging pipelines\u2014a combination of qualities that is hard, if not impossible, to find among DSP programming models. We propose a set of extensions and modifications to Halide to generate code for DSP C compilers, focusing specifically on diverse SIMD target instruction sets and heterogeneous scratchpad memory hierarchies. We implement said techniques for a commercial DSP found in an Intel Image Processing Unit (IPU), demonstrating that this solution can be used to achieve performance within 20% of highly tuned, manually written C code, while leading to a reduction in code complexity. By comparing performance of Halide algorithms using our solution to results on CPU and GPU targets, we confirm the value of using DSP targets with Halide."
            },
            "slug": "Extending-Halide-to-Improve-Software-Development-Vocke-Corporaal",
            "title": {
                "fragments": [],
                "text": "Extending Halide to Improve Software Development for Imaging DSPs"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This work proposes a set of extensions and modifications to Halide to generate code for DSP C compilers, focusing specifically on diverse SIMD target instruction sets and heterogeneous scratchpad memory hierarchies, and implements said techniques for a commercial DSP found in an Intel Image Processing Unit."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Archit. Code Optim."
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2222707"
                        ],
                        "name": "D. Maydan",
                        "slug": "D.-Maydan",
                        "structuredName": {
                            "firstName": "Dror",
                            "lastName": "Maydan",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Maydan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3199902"
                        ],
                        "name": "S. Amarsinghe",
                        "slug": "S.-Amarsinghe",
                        "structuredName": {
                            "firstName": "S.",
                            "lastName": "Amarsinghe",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Amarsinghe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39682108"
                        ],
                        "name": "M. Lam",
                        "slug": "M.-Lam",
                        "structuredName": {
                            "firstName": "Monica",
                            "lastName": "Lam",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Lam"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 21
                            }
                        ],
                        "text": "floor((M-2)/32)) 4 bx[32,34,3]; 5 // Tiling with redundancy 6 for(i1 in 0."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 181,
                                "start": 177
                            }
                        ],
                        "text": "Optimizing a program for different hardware architectures usually requires modifying the data layout and eliminating memory-based dependencies since they restrict optimizations [32]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 37,
                                "start": 28
                            }
                        ],
                        "text": "floor((M-2)/32)) 6 shared bx[3,32,34]; 7 // Tiling with redundancy 8 GPUThread for(i1 in 0."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 15161131,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "5672dd47c8bd9cb332f2702640e32ee4bab3260a",
            "isKey": false,
            "numCitedBy": 59,
            "numCiting": 19,
            "paperAbstract": {
                "fragments": [],
                "text": "The power of any compiler is derived from, and also limited by, its program analyzers. Finding the right abstraction for program analysis is crucial in the development of compiler technology. For the abstraction to be useful, it must include sufficient information to support the code optimizations and transformations. In addition, it must be tractable to extract the information from at least a large enough set of programs. Data dependence, distance vectors and direction vectors are important data abstractions that have been proven useful for parallelization and loop transformations, and they are applicable to a large set of programs. The parallelizing compiler research frontier is currently pushing the limits of traditional data dependence analysis. For example, evaluation of today\u2019s compiler technology suggests that reuse of data arrays in programs greatly reduces the opportunities for parallelism. Many more loops can be parallelized by privatizing the work arrays, that is, assigning a separate copy of the array to each processor. The information needed to support such an optimization is not justmemory disambiguation , that is, if two references can refer to the same location. To determine if each iteration can have its own copy of the array, we need data-flow analysison individual array elements. Another important research topic is code generation for distributed memory machines. The compiler is responsible for maintaining the coherence of data across processors. Generating efficient distributed memory code requires exact data-flow relationships between accesses to individual array locations. This paper proposes several analysis techniques that are useful for higher level optimizations. As we develop new data dependence abstractions, it is useful to relate the different abstractions in a uniform mathematical framework. We show that the various existing data dependence abstractions can be viewed as simply different approximations to the same dependence problem. For example, we say that two references are dependent as long as one dynamic pair of the instances of the two references can refer to the same location. Dependence levels, direction vectors and distance vectors provide more accurate approximations. We can define the approximations precisely using the mathematical concept of equivalence classes. Simple data dependence is a lower limit of the approximation in that all pairs of instances are said to belong to the same single equivalence class. The upper"
            },
            "slug": "Data-Dependence-and-Data-Flow-Analysis-of-Arrays-Maydan-Amarsinghe",
            "title": {
                "fragments": [],
                "text": "Data Dependence and Data-Flow Analysis of Arrays"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "This paper proposes several analysis techniques that are useful for higher level optimizations of compiler technology and shows that the various existing data dependence abstractions can be viewed as simply different approximations to the same dependence problem."
            },
            "venue": {
                "fragments": [],
                "text": "LCPC"
            },
            "year": 1992
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145637678"
                        ],
                        "name": "Manish Gupta",
                        "slug": "Manish-Gupta",
                        "structuredName": {
                            "firstName": "Manish",
                            "lastName": "Gupta",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Manish Gupta"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 161,
                                "start": 157
                            }
                        ],
                        "text": "This simple assumption allows TIRAMISU to avoid the need to rely on a large body of research that focuses on data-layout transformations to allow scheduling [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 110,
                                "start": 106
                            }
                        ],
                        "text": "Applying these datalayout transformations and the elimination of memory-based dependencies is challenging [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 17389658,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "1a5aba469c5bdf8b7f94a752e551152200cbc118",
            "isKey": false,
            "numCitedBy": 24,
            "numCiting": 21,
            "paperAbstract": {
                "fragments": [],
                "text": "Privatization of data is an important technique that has been used by compilers to parallelize loops by eliminating storage-related dependences. When a compiler partitions computations based on the ownership of data, selecting a proper mapping of privatizable data is crucial to obtaining the benefits of privatization. This paper presents a novel framework for privatizing scalar and array variables in the context of a data-driven approach to parallelization. We show that there are numerous alternatives available for mapping privatized variables and the choice of mapping can significantly affect the performance of the program. We present an algorithm that attempts to preserve parallelism and minimize communication overheads. We also introduce the concept of partial privatization of arrays that combines data partitioning and privatization, and enables efficient handling of a class of codes with multi-dimensional data distribution that was not previously possible. Finally, we show how the ideas of privatization apply to the execution of control flow statements as well. An implementation of these ideas in the pHPF prototype compiler for High Performance Fortran on the IBM SP2 machine has shown impressive results."
            },
            "slug": "On-privatization-of-variables-for-data-parallel-Gupta",
            "title": {
                "fragments": [],
                "text": "On privatization of variables for data-parallel execution"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "A novel framework for privatizing scalar and array variables in the context of a data-driven approach to parallelization is presented and it is shown that there are numerous alternatives available for mapping privatized variables and the choice of mapping can significantly affect the performance of the program."
            },
            "venue": {
                "fragments": [],
                "text": "Proceedings 11th International Parallel Processing Symposium"
            },
            "year": 1997
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1733001"
                        ],
                        "name": "A. Darte",
                        "slug": "A.-Darte",
                        "structuredName": {
                            "firstName": "Alain",
                            "lastName": "Darte",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Darte"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2270544"
                        ],
                        "name": "Guillaume Huard",
                        "slug": "Guillaume-Huard",
                        "structuredName": {
                            "firstName": "Guillaume",
                            "lastName": "Huard",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Guillaume Huard"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 209,
                                "start": 205
                            }
                        ],
                        "text": "This simple assumption allows TIRAMISU to avoid the need to rely on a large body of research that focuses on data-layout transformations to allow scheduling [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 158,
                                "start": 154
                            }
                        ],
                        "text": "Applying these datalayout transformations and the elimination of memory-based dependencies is challenging [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 254,
                                "start": 250
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 16830833,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "1e0d772580dac433b1db40457269c0e8d89989be",
            "isKey": false,
            "numCitedBy": 18,
            "numCiting": 35,
            "paperAbstract": {
                "fragments": [],
                "text": "Array contraction is an optimization that transforms array variables into scalar variables within a loop. While the opposite transformation, scalar expansion, is used for enabling parallelism (with a penalty in memory size), array contraction is used to save memory by removing temporary arrays and to increase locality. Several heuristics have already been proposed to perform array contraction through loop fusion and/or loop shifting. But until now, the complexity of the problem was unknown, and no exact approach was available (and even more, only a sufficient condition for array contraction was used). In this paper, we focus on the theoretical aspects of the problem. We prove several NP-complete results that characterize precisely its complexity and we provide an integer linear programming formulation to solve the problem exactly. Our study also proves the NP-completeness of similar problems whose complexity was not established so far."
            },
            "slug": "New-Complexity-Results-on-Array-Contraction-and-Darte-Huard",
            "title": {
                "fragments": [],
                "text": "New Complexity Results on Array Contraction and Related Problems"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This study proves several NP-complete results that characterize precisely its complexity and provides an integer linear programming formulation to solve the problem exactly, and proves the NP-completeness of similar problems whose complexity was not established so far."
            },
            "venue": {
                "fragments": [],
                "text": "J. VLSI Signal Process."
            },
            "year": 2005
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2054833547"
                        ],
                        "name": "O. Zinenko",
                        "slug": "O.-Zinenko",
                        "structuredName": {
                            "firstName": "Oleksandr",
                            "lastName": "Zinenko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Zinenko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2097631216"
                        ],
                        "name": "Theodoros Theodoridis",
                        "slug": "Theodoros-Theodoridis",
                        "structuredName": {
                            "firstName": "Theodoros",
                            "lastName": "Theodoridis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Theodoros Theodoridis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47316088"
                        ],
                        "name": "Priya Goyal",
                        "slug": "Priya-Goyal",
                        "structuredName": {
                            "firstName": "Priya",
                            "lastName": "Goyal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Priya Goyal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2375710"
                        ],
                        "name": "Zach DeVito",
                        "slug": "Zach-DeVito",
                        "structuredName": {
                            "firstName": "Zach",
                            "lastName": "DeVito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zach DeVito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "16521420"
                        ],
                        "name": "William S. Moses",
                        "slug": "William-S.-Moses",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Moses",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William S. Moses"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 77,
                                "start": 56
                            }
                        ],
                        "text": "Some of them are designed for specific domains (such as Tensor Comprehensions and PolyMage), while Pluto, PENCIL, and Polly are more general."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 141,
                                "start": 120
                            }
                        ],
                        "text": "a) Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [8], Polly [22], Tensor Comprehensions [46], and PolyMage [34] are fully automatic."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 139
                            }
                        ],
                        "text": "Polyhedral compilers with automatic scheduling: Polyhedral compilers such as PENCIL [4], [3], Pluto [9], Polly [23], Tensor Comprehensions [47], and PolyMage [35] are fully automatic."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 142,
                                "start": 138
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 44014988,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cae9d90524cccac5081666985d5d055b71697cee",
            "isKey": true,
            "numCitedBy": 284,
            "numCiting": 102,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning models with convolutional and recurrent networks are now ubiquitous and analyze massive amounts of audio, image, video, text and graph data, with applications in automatic translation, speech-to-text, scene understanding, ranking user preferences, ad placement, etc. Competing frameworks for building these networks such as TensorFlow, Chainer, CNTK, Torch/PyTorch, Caffe1/2, MXNet and Theano, explore different tradeoffs between usability and expressiveness, research or production orientation and supported hardware. They operate on a DAG of computational operators, wrapping high-performance libraries such as CUDNN (for NVIDIA GPUs) or NNPACK (for various CPUs), and automate memory allocation, synchronization, distribution. Custom operators are needed where the computation does not fit existing high-performance library calls, usually at a high engineering cost. This is frequently required when new operators are invented by researchers: such operators suffer a severe performance penalty, which limits the pace of innovation. Furthermore, even if there is an existing runtime call these frameworks can use, it often doesn't offer optimal performance for a user's particular network architecture and dataset, missing optimizations between operators as well as optimizations that can be done knowing the size and shape of data. Our contributions include (1) a language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, (2) a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, also providing optimizations such as operator fusion and specialization for specific sizes, (3) a compilation cache populated by an autotuner. [Abstract cutoff]"
            },
            "slug": "Tensor-Comprehensions:-Framework-Agnostic-Machine-Vasilache-Zinenko",
            "title": {
                "fragments": [],
                "text": "Tensor Comprehensions: Framework-Agnostic High-Performance Machine Learning Abstractions"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "A language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, and a compilation cache populated by an autotuner are contributed."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3436746"
                        ],
                        "name": "Emanuele Del Sozzo",
                        "slug": "Emanuele-Del-Sozzo",
                        "structuredName": {
                            "firstName": "Emanuele",
                            "lastName": "Sozzo",
                            "middleNames": [
                                "Del"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Emanuele Del Sozzo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1695345"
                        ],
                        "name": "M. Santambrogio",
                        "slug": "M.-Santambrogio",
                        "structuredName": {
                            "firstName": "Marco",
                            "lastName": "Santambrogio",
                            "middleNames": [
                                "Domenico"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Santambrogio"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "[15] describe an FPGA backend."
                    },
                    "intents": []
                }
            ],
            "corpusId": 51688102,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f342eb117737ae73ee380efc01d5e9e7f465a44a",
            "isKey": false,
            "numCitedBy": 13,
            "numCiting": 19,
            "paperAbstract": {
                "fragments": [],
                "text": "The major flaw of Field Programmable Gate Arrays (FPGAs) is their hard programmability and steep learning curve. Even though High-Level Synthesis (HLS) tools may alleviate this task by providing directives to optimize the hardware design, as well as supporting languages like C/C++ and OpenCL, the development of efficient designs for FPGA is still a challenging and time-consuming task. In this context, Domain Specific Languages (DSLs) represent an emerging solution to generate efficient code to target FPGAs. However, the support for these languages towards FPGA is still limited, and only few DSLs provide FPGA backends. This paper describes FROST, a unified backend for targeting FPGAs from DSLs. FROST takes as input an algorithm described in one of the supported DSLs and generates an optimized design suitable for HLS tools. To this end, FROST exposes a high-level scheduling co-language to drive many aspects of the optimization process, like the resulting architecture, the level of parallelism, and so on. We evaluated FROST on a set of image processing kernels, developed in Halide and TIRAMISU, and compared the results against a hand-tuned FPGA library. The experimental results demonstrate that FROST designs are able to match the performance of such library (exploiting the same level of parallelism), and surpass it by a factor of 10X when combining FROST and the frontends scheduling commands."
            },
            "slug": "A-Unified-Backend-for-Targeting-FPGAs-from-DSLs-Sozzo-Baghdadi",
            "title": {
                "fragments": [],
                "text": "A Unified Backend for Targeting FPGAs from DSLs"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "FROST is described, a unified backend for targeting FPGAs from DSLs that exposes a high-level scheduling co-language to drive many aspects of the optimization process, like the resulting architecture, the level of parallelism, and so on."
            },
            "venue": {
                "fragments": [],
                "text": "2018 IEEE 29th International Conference on Application-specific Systems, Architectures and Processors (ASAP)"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "10214063"
                        ],
                        "name": "M. E. Wolf",
                        "slug": "M.-E.-Wolf",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Wolf",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. E. Wolf"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39682108"
                        ],
                        "name": "M. Lam",
                        "slug": "M.-Lam",
                        "structuredName": {
                            "firstName": "Monica",
                            "lastName": "Lam",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Lam"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 119,
                                "start": 115
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 39618367,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "5d80427dd880159b32cb3a84942ed132debd1df3",
            "isKey": false,
            "numCitedBy": 749,
            "numCiting": 18,
            "paperAbstract": {
                "fragments": [],
                "text": "An approach to transformations for general loops in which dependence vectors represent precedence constraints on the iterations of a loop is presented. Therefore, dependences extracted from a loop nest must be lexicographically positive. This leads to a simple test for legality of compound transformations: any code transformation that leaves the dependences lexicographically positive is legal. The loop transformation theory is applied to the problem of maximizing the degree of coarse- or fine-grain parallelism in a loop nest. It is shown that the maximum degree of parallelism can be achieved by transforming the loops into a nest of coarsest fully permutable loop nests and wavefronting the fully permutable nests. The canonical form of coarsest fully permutable nests can be transformed mechanically to yield maximum degrees of coarse- and/or fine-grain parallelism. The efficient heuristics can find the maximum degrees of parallelism for loops whose nesting level is less than five. >"
            },
            "slug": "A-Loop-Transformation-Theory-and-an-Algorithm-to-Wolf-Lam",
            "title": {
                "fragments": [],
                "text": "A Loop Transformation Theory and an Algorithm to Maximize Parallelism"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "The loop transformation theory is applied to the problem of maximizing the degree of coarse- or fine-grain parallelism in a loop nest and it is shown that the maximum degree of parallelism can be achieved by transforming the loops into a nest of coarsest fullypermutable loop nests and wavefronting the fully permutable nests."
            },
            "venue": {
                "fragments": [],
                "text": "IEEE Trans. Parallel Distributed Syst."
            },
            "year": 1991
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1838186"
                        ],
                        "name": "P. Feautrier",
                        "slug": "P.-Feautrier",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Feautrier",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Feautrier"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 179,
                                "start": 175
                            }
                        ],
                        "text": "This simple assumption allows TIRAMISU to avoid the need to rely on a large body of research that focuses on data-layout transformations to allow scheduling [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 128,
                                "start": 124
                            }
                        ],
                        "text": "Applying these datalayout transformations and the elimination of memory-based dependencies is challenging [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 230,
                                "start": 226
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 1902814,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cd0cbf0ed87ec9947b301a0b48fe60e0d5051cb7",
            "isKey": false,
            "numCitedBy": 111,
            "numCiting": 26,
            "paperAbstract": {
                "fragments": [],
                "text": "A common problem in restructuring programs for vector or parallel execution is the suppression of false dependencies which originate in the reuse of the same memory cell for unrelated values. The method is simple and well understood in the case of scalars. This paper gives the general solution for the case of arrays. The expansion is done in two steps: first, modify all definitions of the offending array in order to obtain the single assignment property. Then, reconstruct the original data flow by adapting all uses of the array. This is done with the help of a new algorithm for solving parametric integer programs. The technique is quite general and may be used for other purposes, including program checking, collecting array predicates, etc\u2026"
            },
            "slug": "Array-expansion-Feautrier",
            "title": {
                "fragments": [],
                "text": "Array expansion"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "The general solution for the case of arrays of false dependencies is given, which is to modify all definitions of the offending array in order to obtain the single assignment property."
            },
            "venue": {
                "fragments": [],
                "text": "ICS '88"
            },
            "year": 1988
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1838186"
                        ],
                        "name": "P. Feautrier",
                        "slug": "P.-Feautrier",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Feautrier",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Feautrier"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 110,
                                "start": 106
                            }
                        ],
                        "text": "TIRAMISU does not have this restriction since it checks transformation legality using dependence analysis [19]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 5738544,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "7cd685371e267a499ded869a934a4cffed591aec",
            "isKey": false,
            "numCitedBy": 454,
            "numCiting": 52,
            "paperAbstract": {
                "fragments": [],
                "text": "Given a program written in a simple imperative language (assignment statements,for loops, affine indices and loop limits), this paper presents an algorithm for analyzing the patterns along which values flow as the execution proceeds. For each array or scalar reference, the result is the name and iteration vector of the source statement as a function of the iteration vector of the referencing statement. The paper discusses several applications of the method: conversion of a program to a set of recurrence equations, array and scalar expansion, program verification and parallel program construction."
            },
            "slug": "Dataflow-analysis-of-array-and-scalar-references-Feautrier",
            "title": {
                "fragments": [],
                "text": "Dataflow analysis of array and scalar references"
            },
            "tldr": {
                "abstractSimilarityScore": 52,
                "text": "This paper presents an algorithm for analyzing the patterns along which values flow as the execution proceeds, and discusses several applications of the method: conversion of a program to a set of recurrence equations, array and scalar expansion, program verification and parallel program construction."
            },
            "venue": {
                "fragments": [],
                "text": "International Journal of Parallel Programming"
            },
            "year": 2005
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2222707"
                        ],
                        "name": "D. Maydan",
                        "slug": "D.-Maydan",
                        "structuredName": {
                            "firstName": "Dror",
                            "lastName": "Maydan",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Maydan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39682108"
                        ],
                        "name": "M. Lam",
                        "slug": "M.-Lam",
                        "structuredName": {
                            "firstName": "Monica",
                            "lastName": "Lam",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Lam"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 11827796,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "62839543df336a080d65437ac82faf409f484421",
            "isKey": false,
            "numCitedBy": 205,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "Data-flow analysis of scalar variables and data dependence analysis on array elements are two important program analyses used in optimizing and parallelizing compilers. Traditional data-flow analysis models accesses of array elements simply as accesses to the entire array, and is inadequate for parallelizing loops in array-based programs. On the other hand, data dependence analysis differentiates between different array elements but is flow-insensitive.\nThis paper studies the combination of these two analyses\u2014data-flow analyses\u2014data-flow analysis of accesses to individual array elements. The problem of finding precise array dataflow information in the domain of loop nests where the loop bounds and array indices are affine functions of loop indices was first formulated by Feautrier. Feautrier's algorithm, based on parametric integer programming techniques, is general but inefficient. This paper presents an efficient algorithm that can find the same precise information for many of the programs found in practice. In this paper, we argue that data-flow analysis of individual array elements is necessary for effective automatic parallelization. In particular, we demonstrate the use of array data-flow analysis in an important optimization known as array privatization.\nBy demonstrating that array data-flow analysis can be computed efficiently and by showing the importance of the optimizations enabled by the analysis, this paper suggests that array data-flow analysis may become just as important in future optimizing and parallelizing compilers as data-flow and data dependence analysis are in today's compilers."
            },
            "slug": "Array-data-flow-analysis-and-its-use-in-array-Maydan-Amarasinghe",
            "title": {
                "fragments": [],
                "text": "Array-data flow analysis and its use in array privatization"
            },
            "tldr": {
                "abstractSimilarityScore": 50,
                "text": "It is argued that data-flow analysis of individual array elements is necessary for effective automatic parallelization and suggested that array data-flows analysis may become just as important in future optimizing and parallelizing compilers as data- flow and data dependence analysis are in today's compilers."
            },
            "venue": {
                "fragments": [],
                "text": "POPL '93"
            },
            "year": 1993
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "6466048"
                        ],
                        "name": "Endong Wang",
                        "slug": "Endong-Wang",
                        "structuredName": {
                            "firstName": "Endong",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Endong Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143904664"
                        ],
                        "name": "Qing Zhang",
                        "slug": "Qing-Zhang",
                        "structuredName": {
                            "firstName": "Qing",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qing Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057609515"
                        ],
                        "name": "Shen Bo",
                        "slug": "Shen-Bo",
                        "structuredName": {
                            "firstName": "Shen",
                            "lastName": "Bo",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shen Bo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46266136"
                        ],
                        "name": "Guangyong Zhang",
                        "slug": "Guangyong-Zhang",
                        "structuredName": {
                            "firstName": "Guangyong",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Guangyong Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47062728"
                        ],
                        "name": "X. Lu",
                        "slug": "X.-Lu",
                        "structuredName": {
                            "firstName": "Xiaowei",
                            "lastName": "Lu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "X. Lu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50528396"
                        ],
                        "name": "Qing Wu",
                        "slug": "Qing-Wu",
                        "structuredName": {
                            "firstName": "Qing",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qing Wu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50852421"
                        ],
                        "name": "Yajuan Wang",
                        "slug": "Yajuan-Wang",
                        "structuredName": {
                            "firstName": "Yajuan",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yajuan Wang"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 118195276,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "83cee2606be3ceda59ef28fe1a9f179cd4e1144d",
            "isKey": false,
            "numCitedBy": 414,
            "numCiting": 37,
            "paperAbstract": {
                "fragments": [],
                "text": "In order to achieve optimal performance on multi-core and multi-processor systems, we need to fully use the features of parallelism and manage the memory hierarchical characters efficiently. The performance of sequential codes relies on the instruction-level and register-level SIMD parallelism, and also on high-speed cache-blocking functions. Threading applications need advanced planning to achieve satisfactory load balancing."
            },
            "slug": "Intel-Math-Kernel-Library-Wang-Zhang",
            "title": {
                "fragments": [],
                "text": "Intel Math Kernel Library"
            },
            "tldr": {
                "abstractSimilarityScore": 90,
                "text": "In order to achieve optimal performance on multi-core and multi-processor systems, the features of parallelism and manage the memory hierarchical characters efficiently need to be used."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2237764"
                        ],
                        "name": "Vincent Lefebvre",
                        "slug": "Vincent-Lefebvre",
                        "structuredName": {
                            "firstName": "Vincent",
                            "lastName": "Lefebvre",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vincent Lefebvre"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1838186"
                        ],
                        "name": "P. Feautrier",
                        "slug": "P.-Feautrier",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Feautrier",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Feautrier"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 197,
                                "start": 193
                            }
                        ],
                        "text": "This simple assumption allows TIRAMISU to avoid the need to rely on a large body of research that focuses on data-layout transformations to allow scheduling [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 146,
                                "start": 142
                            }
                        ],
                        "text": "Applying these datalayout transformations and the elimination of memory-based dependencies is challenging [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 242,
                                "start": 238
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 32647834,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "58e276439efc66d5676c1bd391a7714e93e35ef7",
            "isKey": false,
            "numCitedBy": 115,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "Automatic-Storage-Management-for-Parallel-Programs-Lefebvre-Feautrier",
            "title": {
                "fragments": [],
                "text": "Automatic Storage Management for Parallel Programs"
            },
            "venue": {
                "fragments": [],
                "text": "Parallel Comput."
            },
            "year": 1998
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2912411"
                        ],
                        "name": "F. Irigoin",
                        "slug": "F.-Irigoin",
                        "structuredName": {
                            "firstName": "Fran\u00e7ois",
                            "lastName": "Irigoin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Irigoin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3317184"
                        ],
                        "name": "R. Triolet",
                        "slug": "R.-Triolet",
                        "structuredName": {
                            "firstName": "R\u00e9mi",
                            "lastName": "Triolet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Triolet"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 231,
                                "start": 227
                            }
                        ],
                        "text": "Generating code from the set of computations in Layer IV amounts to generating nested loops that visit each computation in the set, once and only once, while following the lexicographical ordering between the computations [6], [28], [39]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 182,
                                "start": 178
                            }
                        ],
                        "text": "Previous work using the polyhedral model has shown success in implementing complex iteration space transformations [50], [9], [45], [23], [47], [38], data locality optimizations [28], [22], and memory management optimizations [18], [44], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 2980454,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "38747b103e631e1a3800a0f4aed496d1bf8fb82f",
            "isKey": false,
            "numCitedBy": 584,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "Supercompilers must reschedule computations defined by nested DO-loops in order to make an efficient use of supercomputer features (vector units, multiple elementary processors, cache memory, etc\u2026). Many rescheduling techniques like loop interchange, loop strip-mining or rectangular partitioning have been described to speedup program execution. We present here a class of partitionings that encompasses previous techniques and provides enough flexibility to adapt code to multiprocessors with two levels of parallelism and two levels of memory."
            },
            "slug": "Supernode-partitioning-Irigoin-Triolet",
            "title": {
                "fragments": [],
                "text": "Supernode partitioning"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "A class of partitionings is presented that encompasses previous techniques and provides enough flexibility to adapt code to multiprocessors with two levels of parallelism and two level of memory."
            },
            "venue": {
                "fragments": [],
                "text": "POPL '88"
            },
            "year": 1988
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3271797"
                        ],
                        "name": "P. Tu",
                        "slug": "P.-Tu",
                        "structuredName": {
                            "firstName": "Peng",
                            "lastName": "Tu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Tu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1729097"
                        ],
                        "name": "D. Padua",
                        "slug": "D.-Padua",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Padua",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Padua"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 167,
                                "start": 163
                            }
                        ],
                        "text": "This simple assumption allows TIRAMISU to avoid the need to rely on a large body of research that focuses on data-layout transformations to allow scheduling [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 116,
                                "start": 112
                            }
                        ],
                        "text": "Applying these datalayout transformations and the elimination of memory-based dependencies is challenging [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 294133,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3ff78b91c560e66d6c6de7dfee75dfee63868fb4",
            "isKey": false,
            "numCitedBy": 100,
            "numCiting": 43,
            "paperAbstract": {
                "fragments": [],
                "text": "Array privatization is one of the most effective transformations for the exploitation of parallelism. In this paper, we present a technique for automatic array privatization. Our algorithm uses data flow analysis of array references to identify privatizable arrays intraprocedurally as well as interprocedurally. It employs static and dynamic resolution to determine the last value of a lived private array. We compare the result of automatic array privatization with that of manual array privatization and identify directions for future improvement. To enhance the effectiveness of our algorithm, we develop a goal directly technique to analysis symbolic variables in the present of conditional statements, loops and index arrays."
            },
            "slug": "Automatic-Array-Privatization-Tu-Padua",
            "title": {
                "fragments": [],
                "text": "Automatic Array Privatization"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This paper uses data flow analysis of array references to identify privatizable arrays intraprocedural as well as interprocedurally and develops a goal directly technique to analysis symbolic variables in the present of conditional statements, loops and index arrays."
            },
            "venue": {
                "fragments": [],
                "text": "Compiler Optimizations for Scalable Parallel Systems Languages"
            },
            "year": 1993
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2056396557"
                        ],
                        "name": "Kazushige Goto",
                        "slug": "Kazushige-Goto",
                        "structuredName": {
                            "firstName": "Kazushige",
                            "lastName": "Goto",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kazushige Goto"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9151878"
                        ],
                        "name": "R. V. D. Geijn",
                        "slug": "R.-V.-D.-Geijn",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Geijn",
                            "middleNames": [
                                "A.",
                                "van",
                                "de"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. V. D. Geijn"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 9359223,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "334f03c98b61090a9e956d4bfba4abdfa1c94b53",
            "isKey": false,
            "numCitedBy": 643,
            "numCiting": 40,
            "paperAbstract": {
                "fragments": [],
                "text": "We present the basic principles that underlie the high-performance implementation of the matrix-matrix multiplication that is part of the widely used GotoBLAS library. Design decisions are justified by successively refining a model of architectures with multilevel memories. A simple but effective algorithm for executing this operation results. Implementations on a broad selection of architectures are shown to achieve near-peak performance."
            },
            "slug": "Anatomy-of-high-performance-matrix-multiplication-Goto-Geijn",
            "title": {
                "fragments": [],
                "text": "Anatomy of high-performance matrix multiplication"
            },
            "tldr": {
                "abstractSimilarityScore": 93,
                "text": "The basic principles that underlie the high-performance implementation of the matrix-matrix multiplication that is part of the widely used GotoBLAS library are presented."
            },
            "venue": {
                "fragments": [],
                "text": "TOMS"
            },
            "year": 2008
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49015589"
                        ],
                        "name": "Wei Huang",
                        "slug": "Wei-Huang",
                        "structuredName": {
                            "firstName": "Wei",
                            "lastName": "Huang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wei Huang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2301717"
                        ],
                        "name": "G. Santhanaraman",
                        "slug": "G.-Santhanaraman",
                        "structuredName": {
                            "firstName": "Gopalakrishnan",
                            "lastName": "Santhanaraman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Santhanaraman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8900966"
                        ],
                        "name": "Hyun-Wook Jin",
                        "slug": "Hyun-Wook-Jin",
                        "structuredName": {
                            "firstName": "Hyun-Wook",
                            "lastName": "Jin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hyun-Wook Jin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2087258702"
                        ],
                        "name": "Qi Gao",
                        "slug": "Qi-Gao",
                        "structuredName": {
                            "firstName": "Qi",
                            "lastName": "Gao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qi Gao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1731654"
                        ],
                        "name": "D. Panda",
                        "slug": "D.-Panda",
                        "structuredName": {
                            "firstName": "Dhabaleswar",
                            "lastName": "Panda",
                            "middleNames": [
                                "K."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Panda"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 6,
                                "start": 2
                            }
                        ],
                        "text": "0 [26] implementation of MPI for the distributed tests."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 9572482,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "dbb1ee4ed87f58311d6f483fafbb5c6d5ad54e54",
            "isKey": false,
            "numCitedBy": 76,
            "numCiting": 14,
            "paperAbstract": {
                "fragments": [],
                "text": "MPICH2 provides a layered architecture for implementing MPI-2. In this paper, we provide a new design for implementing MPI-2 over InfiniBand by extending the MPICH2 ADI3 layer. Our new design aims to achieve high performance by providing a multi-communication method framework that can utilize appropriate communication channels/devices to attain optimal performance without compromising on scalability and portability. We also present the performance comparison of the new design with our previous design based on the MPICH2 RDMA channel. We show significant performance improvements in micro-benchmarks and NAS Parallel Benchmarks."
            },
            "slug": "Design-of-High-Performance-MVAPICH2:-MPI2-over-Huang-Santhanaraman",
            "title": {
                "fragments": [],
                "text": "Design of High Performance MVAPICH2: MPI2 over InfiniBand"
            },
            "tldr": {
                "abstractSimilarityScore": 76,
                "text": "This paper provides a new design for implementing MPI-2 over InfiniBand by extending the MPICH2 ADI3 layer that aims to achieve high performance by providing a multi-communication method framework that can utilize appropriate communication channels/ devices to attain optimal performance without compromising on scalability and portability."
            },
            "venue": {
                "fragments": [],
                "text": "Sixth IEEE International Symposium on Cluster Computing and the Grid (CCGRID'06)"
            },
            "year": 2006
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2109822007"
                        ],
                        "name": "Zhiyuan Li",
                        "slug": "Zhiyuan-Li",
                        "structuredName": {
                            "firstName": "Zhiyuan",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zhiyuan Li"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 173,
                                "start": 169
                            }
                        ],
                        "text": "This simple assumption allows TIRAMISU to avoid the need to rely on a large body of research that focuses on data-layout transformations to allow scheduling [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 122,
                                "start": 118
                            }
                        ],
                        "text": "Applying these datalayout transformations and the elimination of memory-based dependencies is challenging [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 6809808,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "a984e959f58fc1130f6478616a48e731c7cf7695",
            "isKey": false,
            "numCitedBy": 106,
            "numCiting": 38,
            "paperAbstract": {
                "fragments": [],
                "text": "In recent experiments, array privatization played a critical role in successful parallelization of several real programs. This paper presents compiler algorithms for the program analysis for this transformation. The paper also addresses issues in the implementation."
            },
            "slug": "Array-privatization-for-parallel-execution-of-loops-Li",
            "title": {
                "fragments": [],
                "text": "Array privatization for parallel execution of loops"
            },
            "tldr": {
                "abstractSimilarityScore": 72,
                "text": "Comp compiler algorithms for the program analysis for array privatization played a critical role in successful parallelization of several real programs."
            },
            "venue": {
                "fragments": [],
                "text": "ICS '92"
            },
            "year": 1992
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3535702"
                        ],
                        "name": "W. Detmold",
                        "slug": "W.-Detmold",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Detmold",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "W. Detmold"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2837663"
                        ],
                        "name": "K. Orginos",
                        "slug": "K.-Orginos",
                        "structuredName": {
                            "firstName": "Kostas",
                            "lastName": "Orginos",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Orginos"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 440,
                                "start": 436
                            }
                        ],
                        "text": "We evaluated TIRAMISU by implementing a set of deep learning and linear algebra benchmarks, including Conv (a direct implementation of a neural network convolution layer), VGG (a block of a VGG neural network), and sgemm (matrix multiplication used to implement convolutions), HPCG (a benchmark for multigrid preconditioned conjugate gradient, CG)(2), and Baryon (a dense tensor contraction code for constructing Baryon Building Blocks [17])."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 433,
                                "start": 411
                            }
                        ],
                        "text": "We evaluated TIRAMISU by implementing a set of deep learning and linear algebra benchmarks, including Conv (a direct implementation of a neural network convolution layer), VGG (a block of a VGG neural network), and sgemm (matrix multiplication used to implement convolutions), HPCG (a benchmark for multigrid preconditioned conjugate gradient, CG)3, and Baryon (a dense tensor contraction code for constructing Baryon Building Blocks [16])."
                    },
                    "intents": []
                }
            ],
            "corpusId": 3075153,
            "fieldsOfStudy": [
                "Physics"
            ],
            "id": "7f9bf05716f618a582fbf564bb8e0a60e10457eb",
            "isKey": false,
            "numCitedBy": 51,
            "numCiting": 45,
            "paperAbstract": {
                "fragments": [],
                "text": "We consider the problem of calculating the large number of Wick contractions necessary to compute states with the quantum numbers of many baryons in lattice QCD. We consider a constructive approach and a determinant-based approach and show that these methods allow the required contractions to be performed for certain choices of interpolating operators. Examples of correlation functions computed using these techniques are shown for the quantum numbers of the light nuclei, $^4$He, $^8$Be, $$^{12}$$C, $$^{16}$$O and $$^{28}$$Si."
            },
            "slug": "Nuclear-correlation-functions-in-lattice-QCD-Detmold-Orginos",
            "title": {
                "fragments": [],
                "text": "Nuclear correlation functions in lattice QCD"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2797033"
                        ],
                        "name": "L. Roberts",
                        "slug": "L.-Roberts",
                        "structuredName": {
                            "firstName": "Lawrence",
                            "lastName": "Roberts",
                            "middleNames": [
                                "G."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Roberts"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 134,
                                "start": 130
                            }
                        ],
                        "text": "We used the following image processing benchmarks in our evaluation: edgeDetector, a ring blur followed by Roberts edge detection [42]; cvtColor, which converts an RGB image to grayscale; conv2D, a simple 2D convolution; warpAffine, which does affine warping on an image; gaussian, which performs a gaussian blur; nb, a synthetic pipeline composed of 4 stages that computes a negative and a brightened image from the same input image; and ticket #2373, a code snippet from a bug filed against Halide."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 19309211,
            "fieldsOfStudy": [
                "Engineering"
            ],
            "id": "ab5387cf077f5b97c7dd08845c006e5c1ec89ff5",
            "isKey": false,
            "numCitedBy": 1790,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": "Thesis (Ph. D.)--Massachusetts Institute of Technology, Dept. of Electrical Engineering, 1963."
            },
            "slug": "Machine-Perception-of-Three-Dimensional-Solids-Roberts",
            "title": {
                "fragments": [],
                "text": "Machine Perception of Three-Dimensional Solids"
            },
            "tldr": {
                "abstractSimilarityScore": 100,
                "text": "Thesis (Ph. D.)--Massachusetts Institute of Technology, Dept. of Electrical Engineering, 1963."
            },
            "venue": {
                "fragments": [],
                "text": "Outstanding Dissertations in the Computer Sciences"
            },
            "year": 1963
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 185,
                                "start": 181
                            }
                        ],
                        "text": "This simple assumption allows TIRAMISU to avoid the need to rely on a large body of research that focuses on data-layout transformations to allow scheduling [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 30,
                                "start": 21
                            }
                        ],
                        "text": "floor((M-2)/32)) 4 bx[32,34,3]; 5 // Tiling with redundancy 6 for(i1 in 0."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 134,
                                "start": 130
                            }
                        ],
                        "text": "Applying these datalayout transformations and the elimination of memory-based dependencies is challenging [24], [46], [31], [18], [34], [33], [30], [39], [14]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 37,
                                "start": 28
                            }
                        ],
                        "text": "floor((M-2)/32)) 6 shared bx[3,32,34]; 7 // Tiling with redundancy 8 GPUThread for(i1 in 0."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Automatic Parallelization: An Overview of Fundamental Compiler Techniques"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1838186"
                        ],
                        "name": "P. Feautrier",
                        "slug": "P.-Feautrier",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Feautrier",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Feautrier"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1714483"
                        ],
                        "name": "C. Lengauer",
                        "slug": "C.-Lengauer",
                        "structuredName": {
                            "firstName": "Christian",
                            "lastName": "Lengauer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Lengauer"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 86,
                                "start": 82
                            }
                        ],
                        "text": "More details and formal definitions for these concepts are provided in [48], [2], [37]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 36261012,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "171b8a385ba1178496d983eb92ee5bc29ff57457",
            "isKey": false,
            "numCitedBy": 112,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "Polyhedron-Model-Feautrier-Lengauer",
            "title": {
                "fragments": [],
                "text": "Polyhedron Model"
            },
            "venue": {
                "fragments": [],
                "text": "Encyclopedia of Parallel Computing"
            },
            "year": 2011
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Amarasinghe and Monica S . Lam . Communication optimization and code generation for distributed memory machines"
            },
            "venue": {
                "fragments": [],
                "text": "SIGPLAN Not ."
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 144,
                                "start": 140
                            }
                        ],
                        "text": "This suboptimal performance is due to several reasons: first, these compilers do not implement some key optimizations such as array packing [21], register blocking, data prefetching, and asynchronous communication (which are all supported by TIRAMISU); second, they do not have a precise cost-model to decide which optimizations are profitable."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 170,
                                "start": 166
                            }
                        ],
                        "text": "Highly-tuned implementations require fusing the multiplication and addition loops, as well as applying two-level tiling, vectorization, loop unrolling, array packing [21], register blocking, and data prefetching."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Anatomy of highperformance matrix multiplication"
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Math. Softw.,"
            },
            "year": 2008
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 62,
                                "start": 59
                            }
                        ],
                        "text": "A preliminary version of this paper was published on ArXiv [5]."
                    },
                    "intents": []
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Tiramisu: A polyhedral compiler for expressing fast and portable code"
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv e-prints,"
            },
            "year": 2019
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Sven van Haastregt, Alexey Kravets, and Alastair F. Donaldson. PENCIL language specification"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2015
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Irigoin and R . Triolet . Supernode partitioning"
            },
            "venue": {
                "fragments": [],
                "text": "Cluster Computing and the Grid , 2006 . CCGRID 06 . Sixth IEEE International Symposium on , volume 1 , pages 43 \u2013 48 . IEEE"
            },
            "year": 1988
        }
    ],
    "meta_info": {
        "citationIntent": "all",
        "citationIntentCount": {
            "background": 28,
            "methodology": 28,
            "result": 1
        },
        "citationType": "citedPapers",
        "pageNumber": 1,
        "requestedPageSize": 10,
        "sort": "relevance",
        "totalCitations": 55,
        "totalPages": 6
    },
    "page_url": "https://www.semanticscholar.org/paper/Tiramisu:-A-Polyhedral-Compiler-for-Expressing-Fast-Baghdadi-Ray/8c7310477fd027193cd040288f0aa9824c80b91f?sort=total-citations"
}