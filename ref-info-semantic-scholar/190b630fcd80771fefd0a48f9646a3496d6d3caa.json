{
    "links": [
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "151076950"
                        ],
                        "name": "Karima Ma",
                        "slug": "Karima-Ma",
                        "structuredName": {
                            "firstName": "Karima",
                            "lastName": "Ma",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Karima Ma"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144413718"
                        ],
                        "name": "Luke Anderson",
                        "slug": "Luke-Anderson",
                        "structuredName": {
                            "firstName": "Luke",
                            "lastName": "Anderson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luke Anderson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1775024"
                        ],
                        "name": "Tzu-Mao Li",
                        "slug": "Tzu-Mao-Li",
                        "structuredName": {
                            "firstName": "Tzu-Mao",
                            "lastName": "Li",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tzu-Mao Li"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3282136"
                        ],
                        "name": "Micha\u00ebl Gharbi",
                        "slug": "Micha\u00ebl-Gharbi",
                        "structuredName": {
                            "firstName": "Micha\u00ebl",
                            "lastName": "Gharbi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Micha\u00ebl Gharbi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32163737"
                        ],
                        "name": "Benoit Steiner",
                        "slug": "Benoit-Steiner",
                        "structuredName": {
                            "firstName": "Benoit",
                            "lastName": "Steiner",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Benoit Steiner"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2111936975"
                        ],
                        "name": "Steven Johnson",
                        "slug": "Steven-Johnson",
                        "structuredName": {
                            "firstName": "Steven",
                            "lastName": "Johnson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Steven Johnson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2789576"
                        ],
                        "name": "Kayvon Fatahalian",
                        "slug": "Kayvon-Fatahalian",
                        "structuredName": {
                            "firstName": "Kayvon",
                            "lastName": "Fatahalian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kayvon Fatahalian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 121,
                                "start": 118
                            }
                        ],
                        "text": "It is widely used for the sequential decision-making process, such as speech recognition [43] and software scheduling [1]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 55,
                                "start": 52
                            }
                        ],
                        "text": "In the first we trained a cost model as was done in [1], except that we trained it on the fully scheduled benchmarks that we later run the search on."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 44,
                                "start": 41
                            }
                        ],
                        "text": "This was also observed by the authors in [1] when they retrained their cost model on the spe-"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 145,
                                "start": 142
                            }
                        ],
                        "text": "Therefore, automatic generation of high-performance Halide schedulings has been implemented and studied in several prior works [36] [35] [45] [1]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 162,
                                "start": 159
                            }
                        ],
                        "text": "We use the open-sourced code of Halide\u2019s beam search algorithm with the artifacts published by the original authors with the same configuration of provided in [1] with a beam size of 32 and five passes (iterations of beam search)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 99,
                                "start": 96
                            }
                        ],
                        "text": "To enumerate the possible schedules and evaluate their costs we use the same techniques used in [1]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 36,
                                "start": 33
                            }
                        ],
                        "text": "To cope with that, a recent work [1] proposed using beam search with a learned cost model to find good schedules."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 32,
                                "start": 29
                            }
                        ],
                        "text": "A beam search-based approach [1] has been recently proposed as a scheduler in Halide, which achieves state-of-the-art results."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 196834556,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f90a7bc396e205b204d5d6066a10162f84b128f9",
            "isKey": true,
            "numCitedBy": 122,
            "numCiting": 42,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a new algorithm to automatically schedule Halide programs for high-performance image processing and deep learning. We significantly improve upon the performance of previous methods, which considered a limited subset of schedules. We define a parameterization of possible schedules much larger than prior methods and use a variant of beam search to search over it. The search optimizes runtime predicted by a cost model based on a combination of new derived features and machine learning. We train the cost model by generating and featurizing hundreds of thousands of random programs and schedules. We show that this approach operates effectively with or without autotuning. It produces schedules which are on average almost twice as fast as the existing Halide autoscheduler without autotuning, or more than twice as fast with, and is the first automatic scheduling algorithm to significantly outperform human experts on average."
            },
            "slug": "Learning-to-optimize-halide-with-tree-search-and-Adams-Ma",
            "title": {
                "fragments": [],
                "text": "Learning to optimize halide with tree search and random programs"
            },
            "tldr": {
                "abstractSimilarityScore": 60,
                "text": "This work presents a new algorithm to automatically schedule Halide programs for high-performance image processing and deep learning that produces schedules which are on average almost twice as fast as the existing Halide autoscheduler without autotuning, or more than two as fast with, and is the first automatic scheduling algorithm to significantly outperform human experts on average."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Graph."
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145391991"
                        ],
                        "name": "Qijing Huang",
                        "slug": "Qijing-Huang",
                        "structuredName": {
                            "firstName": "Qijing",
                            "lastName": "Huang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qijing Huang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1411406011"
                        ],
                        "name": "Ameer Haj-Ali",
                        "slug": "Ameer-Haj-Ali",
                        "structuredName": {
                            "firstName": "Ameer",
                            "lastName": "Haj-Ali",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ameer Haj-Ali"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "16521420"
                        ],
                        "name": "William S. Moses",
                        "slug": "William-S.-Moses",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Moses",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William S. Moses"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "67295616"
                        ],
                        "name": "J. Xiang",
                        "slug": "J.-Xiang",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Xiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Xiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144467753"
                        ],
                        "name": "I. Stoica",
                        "slug": "I.-Stoica",
                        "structuredName": {
                            "firstName": "Ion",
                            "lastName": "Stoica",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "I. Stoica"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1760896"
                        ],
                        "name": "K. Asanovi\u0107",
                        "slug": "K.-Asanovi\u0107",
                        "structuredName": {
                            "firstName": "Krste",
                            "lastName": "Asanovi\u0107",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Asanovi\u0107"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1762709"
                        ],
                        "name": "J. Wawrzynek",
                        "slug": "J.-Wawrzynek",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Wawrzynek",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Wawrzynek"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 74,
                                "start": 62
                            }
                        ],
                        "text": "Heuristics mostly fall short in achieving optimal performance [16, 19, 20]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 173,
                                "start": 158
                            }
                        ],
                        "text": "Another direction can include applying deep reinforcement learning methods to solve the scheduling MDP as done in similar domains in compiler optimization in [3, 19, 20, 22]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 211677381,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9aaa11190026766bab8a5b6b7be9f50efb4d24a2",
            "isKey": false,
            "numCitedBy": 16,
            "numCiting": 43,
            "paperAbstract": {
                "fragments": [],
                "text": "The performance of the code a compiler generates depends on the order in which it applies the optimization passes. Choosing a good order--often referred to as the phase-ordering problem, is an NP-hard problem. As a result, existing solutions rely on a variety of heuristics. In this paper, we evaluate a new technique to address the phase-ordering problem: deep reinforcement learning. To this end, we implement AutoPhase: a framework that takes a program and uses deep reinforcement learning to find a sequence of compilation passes that minimizes its execution time. Without loss of generality, we construct this framework in the context of the LLVM compiler toolchain and target high-level synthesis programs. We use random forests to quantify the correlation between the effectiveness of a given pass and the program's features. This helps us reduce the search space by avoiding phase orderings that are unlikely to improve the performance of a given program. We compare the performance of AutoPhase to state-of-the-art algorithms that address the phase-ordering problem. In our evaluation, we show that AutoPhase improves circuit performance by 28% when compared to using the -O3 compiler flag, and achieves competitive results compared to the state-of-the-art solutions, while requiring fewer samples. Furthermore, unlike existing state-of-the-art solutions, our deep reinforcement learning solution shows promising result in generalizing to real benchmarks and 12,874 different randomly generated programs, after training on a hundred randomly generated programs."
            },
            "slug": "AutoPhase:-Juggling-HLS-Phase-Orderings-in-Random-Huang-Haj-Ali",
            "title": {
                "fragments": [],
                "text": "AutoPhase: Juggling HLS Phase Orderings in Random Forests with Deep Reinforcement Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "This paper implements AutoPhase: a framework that takes a program and uses deep reinforcement learning to find a sequence of compilation passes that minimizes its execution time, and shows promising result in generalizing to real benchmarks and 12,874 different randomly generated programs."
            },
            "venue": {
                "fragments": [],
                "text": "MLSys"
            },
            "year": 2020
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145317122"
                        ],
                        "name": "C. Browne",
                        "slug": "C.-Browne",
                        "structuredName": {
                            "firstName": "Cameron",
                            "lastName": "Browne",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Browne"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144473215"
                        ],
                        "name": "E. Powley",
                        "slug": "E.-Powley",
                        "structuredName": {
                            "firstName": "Edward",
                            "lastName": "Powley",
                            "middleNames": [
                                "Jack"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Powley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "33424773"
                        ],
                        "name": "D. Whitehouse",
                        "slug": "D.-Whitehouse",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Whitehouse",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Whitehouse"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145815031"
                        ],
                        "name": "S. Lucas",
                        "slug": "S.-Lucas",
                        "structuredName": {
                            "firstName": "Simon",
                            "lastName": "Lucas",
                            "middleNames": [
                                "M.",
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Lucas"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1714467"
                        ],
                        "name": "P. Cowling",
                        "slug": "P.-Cowling",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Cowling",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Cowling"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3095131"
                        ],
                        "name": "Philipp Rohlfshagen",
                        "slug": "Philipp-Rohlfshagen",
                        "structuredName": {
                            "firstName": "Philipp",
                            "lastName": "Rohlfshagen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Philipp Rohlfshagen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "31893339"
                        ],
                        "name": "Stephen Tavener",
                        "slug": "Stephen-Tavener",
                        "structuredName": {
                            "firstName": "Stephen",
                            "lastName": "Tavener",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Stephen Tavener"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2717017"
                        ],
                        "name": "Diego Perez Liebana",
                        "slug": "Diego-Perez-Liebana",
                        "structuredName": {
                            "firstName": "Diego",
                            "lastName": "Liebana",
                            "middleNames": [
                                "Perez"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Diego Perez Liebana"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2032434"
                        ],
                        "name": "Spyridon Samothrakis",
                        "slug": "Spyridon-Samothrakis",
                        "structuredName": {
                            "firstName": "Spyridon",
                            "lastName": "Samothrakis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Spyridon Samothrakis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1687610"
                        ],
                        "name": "S. Colton",
                        "slug": "S.-Colton",
                        "structuredName": {
                            "firstName": "Simon",
                            "lastName": "Colton",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Colton"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 96,
                                "start": 92
                            }
                        ],
                        "text": "To overcome these challenges we propose ProTuner, which uses Monte Carlo Tree Search (MCTS) [11]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 9316331,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "c37f1baac3c8ba30250084f067167ac3837cf6fd",
            "isKey": false,
            "numCitedBy": 2139,
            "numCiting": 277,
            "paperAbstract": {
                "fragments": [],
                "text": "Monte Carlo tree search (MCTS) is a recently proposed search method that combines the precision of tree search with the generality of random sampling. It has received considerable interest due to its spectacular success in the difficult problem of computer Go, but has also proved beneficial in a range of other domains. This paper is a survey of the literature to date, intended to provide a snapshot of the state of the art after the first five years of MCTS research. We outline the core algorithm's derivation, impart some structure on the many variations and enhancements that have been proposed, and summarize the results from the key game and nongame domains to which MCTS methods have been applied. A number of open research questions indicate that the field is ripe for future work."
            },
            "slug": "A-Survey-of-Monte-Carlo-Tree-Search-Methods-Browne-Powley",
            "title": {
                "fragments": [],
                "text": "A Survey of Monte Carlo Tree Search Methods"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A survey of the literature to date of Monte Carlo tree search, intended to provide a snapshot of the state of the art after the first five years of MCTS research, outlines the core algorithm's derivation, impart some structure on the many variations and enhancements that have been proposed, and summarizes the results from the key game and nongame domains."
            },
            "venue": {
                "fragments": [],
                "text": "IEEE Transactions on Computational Intelligence and AI in Games"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2056775119"
                        ],
                        "name": "Byung Hoon Ahn",
                        "slug": "Byung-Hoon-Ahn",
                        "structuredName": {
                            "firstName": "Byung",
                            "lastName": "Ahn",
                            "middleNames": [
                                "Hoon"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Byung Hoon Ahn"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "51930667"
                        ],
                        "name": "Prannoy Pilligundla",
                        "slug": "Prannoy-Pilligundla",
                        "structuredName": {
                            "firstName": "Prannoy",
                            "lastName": "Pilligundla",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Prannoy Pilligundla"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1696563"
                        ],
                        "name": "H. Esmaeilzadeh",
                        "slug": "H.-Esmaeilzadeh",
                        "structuredName": {
                            "firstName": "Hadi",
                            "lastName": "Esmaeilzadeh",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Esmaeilzadeh"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 3,
                                "start": 0
                            }
                        ],
                        "text": "[3] uses deep reinforcement learning to schedule deep learning pipelines and improves the performance compared to AutoTVM."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 173,
                                "start": 158
                            }
                        ],
                        "text": "Another direction can include applying deep reinforcement learning methods to solve the scheduling MDP as done in similar domains in compiler optimization in [3, 19, 20, 22]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 170078718,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0c7dc78bfc76a3d859382535d8a7d46e283f18c4",
            "isKey": false,
            "numCitedBy": 14,
            "numCiting": 68,
            "paperAbstract": {
                "fragments": [],
                "text": "Achieving faster execution with shorter compilation time can enable further diversity and innovation in neural networks. However, the current paradigm of executing neural networks either relies on hand-optimized libraries, traditional compilation heuristics, or very recently, simulated annealing and genetic algorithms. Our work takes a unique approach by formulating compiler optimizations for neural networks as a reinforcement learning problem, whose solution takes fewer steps to converge. This solution, dubbed ReLeASE, comes with a sampling algorithm that leverages clustering to focus the costly samples (real hardware measurements) on representative points, subsuming an entire subspace. Our adaptive sampling not only reduces the number of samples, but also improves the quality of samples for better exploration in shorter time. As such, experimentation with real hardware shows that reinforcement learning with adaptive sampling provides 4.45x speed up in optimization time over AutoTVM, while also improving inference time of the modern deep networks by 5.6%. Further experiments also confirm that our adaptive sampling can even improve AutoTVM's simulated annealing by 4.00x."
            },
            "slug": "Reinforcement-Learning-and-Adaptive-Sampling-for-Ahn-Pilligundla",
            "title": {
                "fragments": [],
                "text": "Reinforcement Learning and Adaptive Sampling for Optimized DNN Compilation"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "This work takes a unique approach by formulating compiler optimizations for neural networks as a reinforcement learning problem, whose solution takes fewer steps to converge, and comes with a sampling algorithm that leverages clustering to focus the costly samples on representative points, subsuming an entire subspace."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145599543"
                        ],
                        "name": "Guillaume Chaslot",
                        "slug": "Guillaume-Chaslot",
                        "structuredName": {
                            "firstName": "Guillaume",
                            "lastName": "Chaslot",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Guillaume Chaslot"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1997644"
                        ],
                        "name": "M. Winands",
                        "slug": "M.-Winands",
                        "structuredName": {
                            "firstName": "Mark",
                            "lastName": "Winands",
                            "middleNames": [
                                "H.",
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Winands"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1685622"
                        ],
                        "name": "H. J. V. Herik",
                        "slug": "H.-J.-V.-Herik",
                        "structuredName": {
                            "firstName": "H.",
                            "lastName": "Herik",
                            "middleNames": [
                                "Jaap",
                                "van",
                                "den"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. J. V. Herik"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 235,
                                "start": 231
                            }
                        ],
                        "text": "In addition to the performance benefits achieved from this parallelism, an ensemble of MCTSes is proven to outperform a single MCTS with the number of iterations equal to the combined number of iterations available in the ensemble [12]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 14562668,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3b41773cf65c4d7cde97e3b8c82295433b9a8f39",
            "isKey": false,
            "numCitedBy": 228,
            "numCiting": 12,
            "paperAbstract": {
                "fragments": [],
                "text": "Monte-Carlo Tree Search (MCTS) is a new best-first search method that started a revolution in the field of Computer Go. Parallelizing MCTS is an important way to increase the strength of any Go program. In this article, we discuss three parallelization methods for MCTS: leaf parallelization, root parallelization, and tree parallelization. To be effective tree parallelization requires two techniques: adequately handling of (1) local mutexesand (2) virtual loss. Experiments in 13\u00d713 Go reveal that in the program Mango root parallelization may lead to the best results for a specific time setting and specific program parameters. However, as soon as the selection mechanism is able to handle more adequately the balance of exploitation and exploration, tree parallelization should have attention too and could become a second choice for parallelizing MCTS. Preliminary experiments on the smaller 9\u00d79 board provide promising prospects for tree parallelization."
            },
            "slug": "Parallel-Monte-Carlo-Tree-Search-Chaslot-Winands",
            "title": {
                "fragments": [],
                "text": "Parallel Monte-Carlo Tree Search"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "Three parallelization methods for MCTS are discussed: leaf parallelization, root Parallelization, and tree parallelization."
            },
            "venue": {
                "fragments": [],
                "text": "Computers and Games"
            },
            "year": 2008
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145391991"
                        ],
                        "name": "Qijing Huang",
                        "slug": "Qijing-Huang",
                        "structuredName": {
                            "firstName": "Qijing",
                            "lastName": "Huang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qijing Huang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1411406011"
                        ],
                        "name": "Ameer Haj-Ali",
                        "slug": "Ameer-Haj-Ali",
                        "structuredName": {
                            "firstName": "Ameer",
                            "lastName": "Haj-Ali",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ameer Haj-Ali"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "16521420"
                        ],
                        "name": "William S. Moses",
                        "slug": "William-S.-Moses",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Moses",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William S. Moses"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "67295616"
                        ],
                        "name": "J. Xiang",
                        "slug": "J.-Xiang",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Xiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Xiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144467753"
                        ],
                        "name": "I. Stoica",
                        "slug": "I.-Stoica",
                        "structuredName": {
                            "firstName": "Ion",
                            "lastName": "Stoica",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "I. Stoica"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1760896"
                        ],
                        "name": "K. Asanovi\u0107",
                        "slug": "K.-Asanovi\u0107",
                        "structuredName": {
                            "firstName": "Krste",
                            "lastName": "Asanovi\u0107",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Asanovi\u0107"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1762709"
                        ],
                        "name": "J. Wawrzynek",
                        "slug": "J.-Wawrzynek",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Wawrzynek",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Wawrzynek"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 173,
                                "start": 158
                            }
                        ],
                        "text": "Another direction can include applying deep reinforcement learning methods to solve the scheduling MDP as done in similar domains in compiler optimization in [3, 19, 20, 22]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 189825040,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "e4c02d1820041d2283506a77aea8220759e3f7eb",
            "isKey": false,
            "numCitedBy": 21,
            "numCiting": 3,
            "paperAbstract": {
                "fragments": [],
                "text": "The performance of the code generated by a compiler depends on the order in which the optimization passes are applied. In high-level synthesis, the quality of the generated circuit relates directly to the code generated by the front-end compiler. Choosing a good order\u2013often referred to as the phase-ordering problem\u2013is an NP-hard problem. In this paper, we evaluate a new technique to address the phase-ordering problem: deep reinforcement learning. We implement a framework in the context of the LLVM compiler to optimize the ordering for HLS programs and compare the performance of deep reinforcement learning to state-of-the-art algorithms that address the phase-ordering problem. Overall, our framework runs one to two orders of magnitude faster than these algorithms, and achieves a 16% improvement in circuit performance over the -O3 compiler flag."
            },
            "slug": "AutoPhase:-Compiler-Phase-Ordering-for-HLS-with-Huang-Haj-Ali",
            "title": {
                "fragments": [],
                "text": "AutoPhase: Compiler Phase-Ordering for HLS with Deep Reinforcement Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "This paper implements a framework in the context of the LLVM compiler to optimize the ordering for HLS programs and compares the performance of deep reinforcement learning to state-of-the-art algorithms that address the phase-ordering problem."
            },
            "venue": {
                "fragments": [],
                "text": "2019 IEEE 27th Annual International Symposium on Field-Programmable Custom Computing Machines (FCCM)"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3288675"
                        ],
                        "name": "F. Agakov",
                        "slug": "F.-Agakov",
                        "structuredName": {
                            "firstName": "Felix",
                            "lastName": "Agakov",
                            "middleNames": [
                                "V."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Agakov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "30561807"
                        ],
                        "name": "Edwin V. Bonilla",
                        "slug": "Edwin-V.-Bonilla",
                        "structuredName": {
                            "firstName": "Edwin",
                            "lastName": "Bonilla",
                            "middleNames": [
                                "V."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Edwin V. Bonilla"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1874233"
                        ],
                        "name": "J. Cavazos",
                        "slug": "J.-Cavazos",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Cavazos",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Cavazos"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2644436"
                        ],
                        "name": "Bj\u00f6rn Franke",
                        "slug": "Bj\u00f6rn-Franke",
                        "structuredName": {
                            "firstName": "Bj\u00f6rn",
                            "lastName": "Franke",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bj\u00f6rn Franke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2043821"
                        ],
                        "name": "G. Fursin",
                        "slug": "G.-Fursin",
                        "structuredName": {
                            "firstName": "Grigori",
                            "lastName": "Fursin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Fursin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401533251"
                        ],
                        "name": "M. O\u2019Boyle",
                        "slug": "M.-O\u2019Boyle",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "O\u2019Boyle",
                            "middleNames": [
                                "F.",
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. O\u2019Boyle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153031524"
                        ],
                        "name": "J. Thomson",
                        "slug": "J.-Thomson",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Thomson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Thomson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "120284556"
                        ],
                        "name": "M. Toussaint",
                        "slug": "M.-Toussaint",
                        "structuredName": {
                            "firstName": "Marc",
                            "lastName": "Toussaint",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Toussaint"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145715698"
                        ],
                        "name": "Christopher K. I. Williams",
                        "slug": "Christopher-K.-I.-Williams",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Williams",
                            "middleNames": [
                                "K.",
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christopher K. I. Williams"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 52,
                                "start": 29
                            }
                        ],
                        "text": "This includes phase ordering [2, 17, 23, 24, 29, 46], tiling factors [42], mappings of kernels to CPUs or GPUs [15] with supervised learning, autovectorization [19,30,32,34,37\u201340,47\u201349] and the throughput of basic blocks [33]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 7891873,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "56b37f88b109fd455a389642e1747f766f1be471",
            "isKey": false,
            "numCitedBy": 440,
            "numCiting": 27,
            "paperAbstract": {
                "fragments": [],
                "text": "Iterative compiler optimization has been shown to outperform static approaches. This, however, is at the cost of large numbers of evaluations of the program. This paper develops a new methodology to reduce this number and hence speed up iterative optimization. It uses predictive modelling from the domain of machine learning to automatically focus search on those areas likely to give greatest performance. This approach is independent of search algorithm, search space or compiler infrastructure and scales gracefully with the compiler optimization space size. Off-line, a training set of programs is iteratively evaluated and the shape of the spaces and program features are modelled. These models are learnt and used to focus the iterative optimization of a new program. We evaluate two learnt models, an independent and Markov model, and evaluate their worth on two embedded platforms, the Texas Instrument C67I3 and the AMD Au1500. We show that such learnt models can speed up iterative search on large spaces by an order of magnitude. This translates into an average speedup of 1.22 on the TI C6713 and 1.27 on the AMD Au1500 in just 2 evaluations."
            },
            "slug": "Using-machine-learning-to-focus-iterative-Agakov-Bonilla",
            "title": {
                "fragments": [],
                "text": "Using machine learning to focus iterative optimization"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "A new methodology is developed that uses predictive modelling from the domain of machine learning to automatically focus search on those areas likely to give greatest performance, independent of search algorithm, search space or compiler infrastructure and scales gracefully with the compiler optimization space size."
            },
            "venue": {
                "fragments": [],
                "text": "International Symposium on Code Generation and Optimization (CGO'06)"
            },
            "year": 2006
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1399271715"
                        ],
                        "name": "Mohammed Ziaur Rahman",
                        "slug": "Mohammed-Ziaur-Rahman",
                        "structuredName": {
                            "firstName": "Mohammed Ziaur",
                            "lastName": "Rahman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mohammed Ziaur Rahman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793611"
                        ],
                        "name": "L. Pouchet",
                        "slug": "L.-Pouchet",
                        "structuredName": {
                            "firstName": "Louis-No\u00ebl",
                            "lastName": "Pouchet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Pouchet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 73,
                                "start": 69
                            }
                        ],
                        "text": "This includes phase ordering [2, 17, 23, 24, 29, 46], tiling factors [42], mappings of kernels to CPUs or GPUs [15] with supervised learning, autovectorization [19,30,32,34,37\u201340,47\u201349] and the throughput of basic blocks [33]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 12463325,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6f8fe605f909ff02fab79f7a9c8c44571d70da61",
            "isKey": false,
            "numCitedBy": 22,
            "numCiting": 37,
            "paperAbstract": {
                "fragments": [],
                "text": "Abstract. Data locality optimization plays a significant role in reducing the execution time of many loop-intensive kernels. Loop tiling at various levels is often used to effectively exploit data locality in deep memory hierarchies. The recent development of frameworks for parametric loop tiling of user code has lead to a widening of the range of applications that could benefit from auto-tuning of tile sizes. Current model-driven approaches suffer from limitations, such as the inability to accurately model the complex interplay between multiple hardware components that affect performance. Auto-tuning libraries such as ATLAS rely on extensive empirical search for tile size optimization, which has been shown to be very effective. However, the effectiveness of such approaches for arbitrary parametrically tiled user code has not been demonstrated. We consider the problem of selecting the best tile sizes for arbitrary user-defined programs, by sampling in the full space of tile sizes. We have developed a technique to build a performance predictor associated with a specific program. Our approach uses statistical machine learning to train an artificial neural network (ANN) to predict the performance distribution of execution time for scientific kernels. We show how this search strategy significantly improves over the variability of random search. Our observations and results on various kernels also show promise for the use of ANNs in predicting the runtime behavior for variations of tiling configurations."
            },
            "slug": "Neural-Network-Assisted-Tile-Size-Selection-Rahman-Pouchet",
            "title": {
                "fragments": [],
                "text": "Neural Network Assisted Tile Size Selection"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This approach uses statistical machine learning to train an artificial neural network (ANN) to predict the performance distribution of execution time for scientific kernels, and shows how this search strategy significantly improves over the variability of random search."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2206135"
                        ],
                        "name": "Amir H. Ashouri",
                        "slug": "Amir-H.-Ashouri",
                        "structuredName": {
                            "firstName": "Amir",
                            "lastName": "Ashouri",
                            "middleNames": [
                                "H."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Amir H. Ashouri"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46315768"
                        ],
                        "name": "W. Killian",
                        "slug": "W.-Killian",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Killian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "W. Killian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1874233"
                        ],
                        "name": "J. Cavazos",
                        "slug": "J.-Cavazos",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Cavazos",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Cavazos"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144570312"
                        ],
                        "name": "G. Palermo",
                        "slug": "G.-Palermo",
                        "structuredName": {
                            "firstName": "Gianluca",
                            "lastName": "Palermo",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Palermo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1784619"
                        ],
                        "name": "C. Silvano",
                        "slug": "C.-Silvano",
                        "structuredName": {
                            "firstName": "Cristina",
                            "lastName": "Silvano",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Silvano"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 87,
                                "start": 80
                            }
                        ],
                        "text": "Machine learning in compiler optimization has been proposed in many prior works [5, 51]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 4096056,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "e1d7e18915bd8991373404ea157c3599e493122f",
            "isKey": false,
            "numCitedBy": 117,
            "numCiting": 408,
            "paperAbstract": {
                "fragments": [],
                "text": "Since the mid-1990s, researchers have been trying to use machine-learning-based approaches to solve a number of different compiler optimization problems. These techniques primarily enhance the quality of the obtained results and, more importantly, make it feasible to tackle two main compiler optimization problems: optimization selection (choosing which optimizations to apply) and phase-ordering (choosing the order of applying optimizations). The compiler optimization space continues to grow due to the advancement of applications, increasing number of compiler optimizations, and new target architectures. Generic optimization passes in compilers cannot fully leverage newly introduced optimizations and, therefore, cannot keep up with the pace of increasing options. This survey summarizes and classifies the recent advances in using machine learning for the compiler optimization field, particularly on the two major problems of (1) selecting the best optimizations, and (2) the phase-ordering of optimizations. The survey highlights the approaches taken so far, the obtained results, the fine-grain classification among different approaches, and finally, the influential papers of the field."
            },
            "slug": "A-Survey-on-Compiler-Autotuning-using-Machine-Ashouri-Killian",
            "title": {
                "fragments": [],
                "text": "A Survey on Compiler Autotuning using Machine Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 48,
                "text": "This survey summarizes and classifies the recent advances in using machine learning for the compiler optimization field, particularly on the two major problems of selecting the best optimizations, and the phase-ordering of optimizations."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Comput. Surv."
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1652011517"
                        ],
                        "name": "M. Stephenson",
                        "slug": "M.-Stephenson",
                        "structuredName": {
                            "firstName": "Mark",
                            "lastName": "Stephenson",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Stephenson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "150220413"
                        ],
                        "name": "M. Martin",
                        "slug": "M.-Martin",
                        "structuredName": {
                            "firstName": "M.",
                            "lastName": "Martin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Martin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401846156"
                        ],
                        "name": "U. O'Reilly",
                        "slug": "U.-O'Reilly",
                        "structuredName": {
                            "firstName": "U-M.",
                            "lastName": "O'Reilly",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "U. O'Reilly"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 52,
                                "start": 29
                            }
                        ],
                        "text": "This includes phase ordering [2, 17, 23, 24, 29, 46], tiling factors [42], mappings of kernels to CPUs or GPUs [15] with supervised learning, autovectorization [19,30,32,34,37\u201340,47\u201349] and the throughput of basic blocks [33]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 207565232,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d4849d29b27a8e5230edafe4cd4cdda395fb24d4",
            "isKey": false,
            "numCitedBy": 300,
            "numCiting": 28,
            "paperAbstract": {
                "fragments": [],
                "text": "Compiler writers have crafted many heuristics over the years to approximately solve NP-hard problems efficiently. Finding a heuristic that performs well on a broad range of applications is a tedious and difficult process. This paper introduces Meta Optimization, a methodology for automatically fine-tuning compiler heuristics. Meta Optimization uses machine-learning techniques to automatically search the space of compiler heuristics. Our techniques reduce compiler design complexity by relieving compiler writers of the tedium of heuristic tuning. Our machine-learning system uses an evolutionary algorithm to automatically find effective compiler heuristics. We present promising experimental results. In one mode of operation Meta Optimization creates application-specific heuristics which often result in impressive speedups. For hyperblock formation, one optimization we present in this paper, we obtain an average speedup of 23% (up to 73%) for the applications in our suite. Furthermore, by evolving a compiler's heuristic over several benchmarks, we can create effective, general-purpose heuristics. The best general-purpose heuristic our system found for hyperblock formation improved performance by an average of 25% on our training set, and 9% on a completely unrelated test set. We demonstrate the efficacy of our techniques on three different optimizations in this paper: hyperblock formation, register allocation, and data prefetching."
            },
            "slug": "Meta-optimization:-improving-compiler-heuristics-Stephenson-Amarasinghe",
            "title": {
                "fragments": [],
                "text": "Meta optimization: improving compiler heuristics with machine learning"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "By evolving a compiler's heuristic over several benchmarks, Meta Optimization can create effective, general-purpose heuristics, and demonstrates the efficacy of the techniques on three different optimizations in this paper: hyperblock formation, register allocation, and data prefetching."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '03"
            },
            "year": 2003
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1411406011"
                        ],
                        "name": "Ameer Haj-Ali",
                        "slug": "Ameer-Haj-Ali",
                        "structuredName": {
                            "firstName": "Ameer",
                            "lastName": "Haj-Ali",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ameer Haj-Ali"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47699955"
                        ],
                        "name": "Nesreen Ahmed",
                        "slug": "Nesreen-Ahmed",
                        "structuredName": {
                            "firstName": "Nesreen",
                            "lastName": "Ahmed",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nesreen Ahmed"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2999876"
                        ],
                        "name": "Theodore L. Willke",
                        "slug": "Theodore-L.-Willke",
                        "structuredName": {
                            "firstName": "Theodore",
                            "lastName": "Willke",
                            "middleNames": [
                                "L."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Theodore L. Willke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1410119848"
                        ],
                        "name": "Sophia Shao",
                        "slug": "Sophia-Shao",
                        "structuredName": {
                            "firstName": "Sophia",
                            "lastName": "Shao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sophia Shao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1760896"
                        ],
                        "name": "K. Asanovi\u0107",
                        "slug": "K.-Asanovi\u0107",
                        "structuredName": {
                            "firstName": "Krste",
                            "lastName": "Asanovi\u0107",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Asanovi\u0107"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144467753"
                        ],
                        "name": "I. Stoica",
                        "slug": "I.-Stoica",
                        "structuredName": {
                            "firstName": "Ion",
                            "lastName": "Stoica",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "I. Stoica"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 74,
                                "start": 62
                            }
                        ],
                        "text": "Heuristics mostly fall short in achieving optimal performance [16, 19, 20]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 173,
                                "start": 158
                            }
                        ],
                        "text": "Another direction can include applying deep reinforcement learning methods to solve the scheduling MDP as done in similar domains in compiler optimization in [3, 19, 20, 22]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 203593784,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "938a603d320d580aab79715abd0c0dcd3093db4b",
            "isKey": false,
            "numCitedBy": 47,
            "numCiting": 67,
            "paperAbstract": {
                "fragments": [],
                "text": "One of the key challenges arising when compilers vectorize loops for today\u2019s SIMD-compatible architectures is to decide if vectorization or interleaving is beneficial. Then, the compiler has to determine the number of instructions to pack together and the interleaving level (stride). Compilers are designed today to use fixed-cost models that are based on heuristics to make vectorization decisions on loops. However, these models are unable to capture the data dependency, the computation graph, or the organization of instructions. Alternatively, software engineers often hand-write the vectorization factors of every loop. This, however, places a huge burden on them, since it requires prior experience and significantly increases the development time. In this work, we explore a novel approach for handling loop vectorization and propose an end-to-end solution using deep reinforcement learning (RL). We conjecture that deep RL can capture different instructions, dependencies, and data structures to enable learning a sophisticated model that can better predict the actual performance cost and determine the optimal vectorization factors. We develop an end-to-end framework, from code to vectorization, that integrates deep RL in the LLVM compiler. Our proposed framework takes benchmark codes as input and extracts the loop codes. These loop codes are then fed to a loop embedding generator that learns an embedding for these loops. Finally, the learned embeddings are used as input to a Deep RL agent, which dynamically determines the vectorization factors for all the loops. We further extend our framework to support random search, decision trees, supervised neural networks, and nearest-neighbor search. We evaluate our approaches against the currently used LLVM vectorizer and loop polyhedral optimization techniques. Our experiments show 1.29\u00d7\u22124.73\u00d7 performance speedup compared to baseline and only 3% worse than the brute-force search on a wide range of benchmarks."
            },
            "slug": "NeuroVectorizer:-end-to-end-vectorization-with-deep-Haj-Ali-Ahmed",
            "title": {
                "fragments": [],
                "text": "NeuroVectorizer: end-to-end vectorization with deep reinforcement learning"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "An end-to-end framework, from code to vectorization, that integrates deep RL in the LLVM compiler and conjecture that deep RL can capture different instructions, dependencies, and data structures to enable learning a sophisticated model that can better predict the actual performance cost and determine the optimal vectorization factors."
            },
            "venue": {
                "fragments": [],
                "text": "CGO"
            },
            "year": 2020
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2059804383"
                        ],
                        "name": "Chris Cummins",
                        "slug": "Chris-Cummins",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Cummins",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Cummins"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1955185"
                        ],
                        "name": "Pavlos Petoumenos",
                        "slug": "Pavlos-Petoumenos",
                        "structuredName": {
                            "firstName": "Pavlos",
                            "lastName": "Petoumenos",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pavlos Petoumenos"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "92471582"
                        ],
                        "name": "Zheng Wang",
                        "slug": "Zheng-Wang",
                        "structuredName": {
                            "firstName": "Zheng",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zheng Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2476647"
                        ],
                        "name": "H. Leather",
                        "slug": "H.-Leather",
                        "structuredName": {
                            "firstName": "Hugh",
                            "lastName": "Leather",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Leather"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 115,
                                "start": 111
                            }
                        ],
                        "text": "This includes phase ordering [2, 17, 23, 24, 29, 46], tiling factors [42], mappings of kernels to CPUs or GPUs [15] with supervised learning, autovectorization [19,30,32,34,37\u201340,47\u201349] and the throughput of basic blocks [33]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 217100774,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "c2e3b7e3e8e5de4c41447017ca5fe95123790f6e",
            "isKey": false,
            "numCitedBy": 128,
            "numCiting": 67,
            "paperAbstract": {
                "fragments": [],
                "text": "Accurate automatic optimization heuristics are necessary for dealing with thecomplexity and diversity of modern hardware and software. Machine learning is aproven technique for learning such heuristics, but its success is bound by thequality of the features used. These features must be hand crafted by developersthrough a combination of expert domain knowledge and trial and error. This makesthe quality of the final model directly dependent on the skill and availabletime of the system architect.Our work introduces a better way for building heuristics. We develop a deepneural network that learns heuristics over raw code, entirely without using codefeatures. The neural network simultaneously constructs appropriaterepresentations of the code and learns how best to optimize, removing the needfor manual feature creation. Further, we show that our neural nets can transferlearning from one optimization problem to another, improving the accuracy of newmodels, without the help of human experts.We compare the effectiveness of our automatically generated heuristics againstones with features hand-picked by experts. We examine two challenging tasks:predicting optimal mapping for heterogeneous parallelism and GPU threadcoarsening factors. In 89% of the cases, the quality of our fully automaticheuristics matches or surpasses that of state-of-the-art predictive models usinghand-crafted features, providing on average 14% and 12% more performance withno human effort expended on designing features."
            },
            "slug": "End-to-End-Deep-Learning-of-Optimization-Heuristics-Cummins-Petoumenos",
            "title": {
                "fragments": [],
                "text": "End-to-End Deep Learning of Optimization Heuristics"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A deep neural network is developed that learns heuristics over raw code, entirely without using codefeatures, and it is shown that the neural nets can transferlearning from one optimization problem to another, improving the accuracy of new models, without the help of human experts."
            },
            "venue": {
                "fragments": [],
                "text": "2017 26th International Conference on Parallel Architectures and Compilation Techniques (PACT)"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1913774"
                        ],
                        "name": "Tianqi Chen",
                        "slug": "Tianqi-Chen",
                        "structuredName": {
                            "firstName": "Tianqi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianqi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2149970173"
                        ],
                        "name": "Lianmin Zheng",
                        "slug": "Lianmin-Zheng",
                        "structuredName": {
                            "firstName": "Lianmin",
                            "lastName": "Zheng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lianmin Zheng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2621619"
                        ],
                        "name": "Eddie Q. Yan",
                        "slug": "Eddie-Q.-Yan",
                        "structuredName": {
                            "firstName": "Eddie",
                            "lastName": "Yan",
                            "middleNames": [
                                "Q."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eddie Q. Yan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1732910"
                        ],
                        "name": "Ziheng Jiang",
                        "slug": "Ziheng-Jiang",
                        "structuredName": {
                            "firstName": "Ziheng",
                            "lastName": "Jiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ziheng Jiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47108160"
                        ],
                        "name": "T. Moreau",
                        "slug": "T.-Moreau",
                        "structuredName": {
                            "firstName": "Thierry",
                            "lastName": "Moreau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Moreau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1717411"
                        ],
                        "name": "L. Ceze",
                        "slug": "L.-Ceze",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Ceze",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Ceze"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1730156"
                        ],
                        "name": "Carlos Guestrin",
                        "slug": "Carlos-Guestrin",
                        "structuredName": {
                            "firstName": "Carlos",
                            "lastName": "Guestrin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Carlos Guestrin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144695691"
                        ],
                        "name": "A. Krishnamurthy",
                        "slug": "A.-Krishnamurthy",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Krishnamurthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Krishnamurthy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 12,
                                "start": 8
                            }
                        ],
                        "text": "AutoTVM [14] uses tree-based algorithms to auto-schedule programs on TVM [13], which is an optimization stack for deep learning."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 29160233,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cb91c2f8d3cac0b655a39be318b603334eb18987",
            "isKey": false,
            "numCitedBy": 181,
            "numCiting": 46,
            "paperAbstract": {
                "fragments": [],
                "text": "We introduce a learning-based framework to optimize tensor programs for deep learning workloads. Efficient implementations of tensor operators, such as matrix multiplication and high dimensional convolution, are key enablers of effective deep learning systems. However, existing systems rely on manually optimized libraries such as cuDNN where only a narrow range of server class GPUs are well-supported. The reliance on hardware-specific operator libraries limits the applicability of high-level graph optimizations and incurs significant engineering costs when deploying to new hardware targets. We use learning to remove this engineering burden. We learn domain-specific statistical cost models to guide the search of tensor operator implementations over billions of possible program variants. We further accelerate the search by effective model transfer across workloads. Experimental results show that our framework delivers performance competitive with state-of-the-art hand-tuned libraries for low-power CPU, mobile GPU, and server-class GPU."
            },
            "slug": "Learning-to-Optimize-Tensor-Programs-Chen-Zheng",
            "title": {
                "fragments": [],
                "text": "Learning to Optimize Tensor Programs"
            },
            "tldr": {
                "abstractSimilarityScore": 57,
                "text": "A learning-based framework to optimize tensor programs for deep learning workloads that learns domain-specific statistical cost models to guide the search of tensor operator implementations over billions of possible program variants and accelerates the search by effective model transfer across workloads."
            },
            "venue": {
                "fragments": [],
                "text": "NeurIPS"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144347192"
                        ],
                        "name": "Sameer Kulkarni",
                        "slug": "Sameer-Kulkarni",
                        "structuredName": {
                            "firstName": "Sameer",
                            "lastName": "Kulkarni",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sameer Kulkarni"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1874233"
                        ],
                        "name": "J. Cavazos",
                        "slug": "J.-Cavazos",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Cavazos",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Cavazos"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 52,
                                "start": 29
                            }
                        ],
                        "text": "This includes phase ordering [2, 17, 23, 24, 29, 46], tiling factors [42], mappings of kernels to CPUs or GPUs [15] with supervised learning, autovectorization [19,30,32,34,37\u201340,47\u201349] and the throughput of basic blocks [33]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 2647577,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "7177edea5d1116fe5473c3e6ff41a48c91f402aa",
            "isKey": false,
            "numCitedBy": 110,
            "numCiting": 29,
            "paperAbstract": {
                "fragments": [],
                "text": "Today's compilers have a plethora of optimizations to choose from, and the correct choice of optimizations can have a significant impact on the performance of the code being optimized. Furthermore, choosing the correct order in which to apply those optimizations has been a long standing problem in compilation research. Each of these optimizations interacts with the code and in turn with all other optimizations in complicated ways. Traditional compilers typically apply the same set of optimization in a fixed order to all functions in a program, without regard the code being optimized.\n Understanding the interactions of optimizations is very important in determining a good solution to the phase-ordering problem. This paper develops a new approach that automatically selects good optimization orderings on a per method basis within a dynamic compiler. Our approach formulates the phase-ordering problem as a Markov process and uses a characterization of the current state of the code being optimized to creating a better solution to the phase ordering problem. Our technique uses neuro-evolution to construct an artificial neural network that is capable of predicting beneficial optimization ordering for a piece of code that is being optimized. We implemented our technique in Jikes RVM and achieved significant improvements on a set of standard Java benchmarks over a well-engineered fixed order."
            },
            "slug": "Mitigating-the-compiler-optimization-phase-ordering-Kulkarni-Cavazos",
            "title": {
                "fragments": [],
                "text": "Mitigating the compiler optimization phase-ordering problem using machine learning"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "This paper develops a new approach that automatically selects good optimization orderings on a per method basis within a dynamic compiler and uses neuro-evolution to construct an artificial neural network that is capable of predicting beneficial optimization ordering for a piece of code that is being optimized."
            },
            "venue": {
                "fragments": [],
                "text": "OOPSLA '12"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1773260"
                        ],
                        "name": "Jason Ansel",
                        "slug": "Jason-Ansel",
                        "structuredName": {
                            "firstName": "Jason",
                            "lastName": "Ansel",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jason Ansel"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145683292"
                        ],
                        "name": "S. Kamil",
                        "slug": "S.-Kamil",
                        "structuredName": {
                            "firstName": "Shoaib",
                            "lastName": "Kamil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Kamil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1803567"
                        ],
                        "name": "K. Veeramachaneni",
                        "slug": "K.-Veeramachaneni",
                        "structuredName": {
                            "firstName": "Kalyan",
                            "lastName": "Veeramachaneni",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Veeramachaneni"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1867647"
                        ],
                        "name": "Jeffrey Bosboom",
                        "slug": "Jeffrey-Bosboom",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Bosboom",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jeffrey Bosboom"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398192342"
                        ],
                        "name": "Una-May O\u2019Reilly",
                        "slug": "Una-May-O\u2019Reilly",
                        "structuredName": {
                            "firstName": "Una-May",
                            "lastName": "O\u2019Reilly",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Una-May O\u2019Reilly"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 13,
                                "start": 10
                            }
                        ],
                        "text": "OpenTuner [4] autotunes a program using an AUC-Bandit-meta-technique-directed ensemble selection of algorithms."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 10489926,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "1ccaac0fdcc5ab37a45d0cc616feeaa67a3d4ca1",
            "isKey": false,
            "numCitedBy": 425,
            "numCiting": 45,
            "paperAbstract": {
                "fragments": [],
                "text": "Program autotuning has been shown to achieve better or more portable performance in a number of domains. However, autotuners themselves are rarely portable between projects, for a number of reasons: using a domain-informed search space representation is critical to achieving good results; search spaces can be intractably large and require advanced machine learning techniques; and the landscape of search spaces can vary greatly between different problems, sometimes requiring domain specific search techniques to explore efficiently. This paper introduces OpenTuner, a new open source framework for building domain-specific multi-objective program autotuners. OpenTuner supports fully-customizable configuration representations, an extensible technique representation to allow for domain-specific techniques, and an easy to use interface for communicating with the program to be autotuned. A key capability inside OpenTuner is the use of ensembles of disparate search techniques simultaneously; techniques that perform well will dynamically be allocated a larger proportion of tests. We demonstrate the efficacy and generality of OpenTuner by building autotuners for 7 distinct projects and 16 total benchmarks, showing speedups over prior techniques of these projects of up to 2.8\u03c7 with little programmer effort."
            },
            "slug": "OpenTuner:-An-extensible-framework-for-program-Ansel-Kamil",
            "title": {
                "fragments": [],
                "text": "OpenTuner: An extensible framework for program autotuning"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "The efficacy and generality of OpenTuner are demonstrated by building autotuners for 7 distinct projects and 16 total benchmarks, showing speedups over prior techniques of these projects of up to 2.8\u03c7 with little programmer effort."
            },
            "venue": {
                "fragments": [],
                "text": "2014 23rd International Conference on Parallel Architecture and Compilation (PACT)"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2043821"
                        ],
                        "name": "G. Fursin",
                        "slug": "G.-Fursin",
                        "structuredName": {
                            "firstName": "Grigori",
                            "lastName": "Fursin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Fursin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2052818"
                        ],
                        "name": "C. Miranda",
                        "slug": "C.-Miranda",
                        "structuredName": {
                            "firstName": "Cupertino",
                            "lastName": "Miranda",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Miranda"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1731764"
                        ],
                        "name": "O. Temam",
                        "slug": "O.-Temam",
                        "structuredName": {
                            "firstName": "Olivier",
                            "lastName": "Temam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Temam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3305063"
                        ],
                        "name": "Mircea Namolaru",
                        "slug": "Mircea-Namolaru",
                        "structuredName": {
                            "firstName": "Mircea",
                            "lastName": "Namolaru",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mircea Namolaru"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1388775854"
                        ],
                        "name": "E. Yom-Tov",
                        "slug": "E.-Yom-Tov",
                        "structuredName": {
                            "firstName": "Elad",
                            "lastName": "Yom-Tov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Yom-Tov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38737579"
                        ],
                        "name": "A. Zaks",
                        "slug": "A.-Zaks",
                        "structuredName": {
                            "firstName": "Ayal",
                            "lastName": "Zaks",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Zaks"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1795886"
                        ],
                        "name": "Bilha Mendelson",
                        "slug": "Bilha-Mendelson",
                        "structuredName": {
                            "firstName": "Bilha",
                            "lastName": "Mendelson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bilha Mendelson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "30561807"
                        ],
                        "name": "Edwin V. Bonilla",
                        "slug": "Edwin-V.-Bonilla",
                        "structuredName": {
                            "firstName": "Edwin",
                            "lastName": "Bonilla",
                            "middleNames": [
                                "V."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Edwin V. Bonilla"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153031524"
                        ],
                        "name": "J. Thomson",
                        "slug": "J.-Thomson",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Thomson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Thomson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2476647"
                        ],
                        "name": "H. Leather",
                        "slug": "H.-Leather",
                        "structuredName": {
                            "firstName": "Hugh",
                            "lastName": "Leather",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Leather"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145715698"
                        ],
                        "name": "Christopher K. I. Williams",
                        "slug": "Christopher-K.-I.-Williams",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Williams",
                            "middleNames": [
                                "K.",
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christopher K. I. Williams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401533251"
                        ],
                        "name": "M. O\u2019Boyle",
                        "slug": "M.-O\u2019Boyle",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "O\u2019Boyle",
                            "middleNames": [
                                "F.",
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. O\u2019Boyle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38759952"
                        ],
                        "name": "Phil Barnard",
                        "slug": "Phil-Barnard",
                        "structuredName": {
                            "firstName": "Phil",
                            "lastName": "Barnard",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Phil Barnard"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40580165"
                        ],
                        "name": "Elton Ashton",
                        "slug": "Elton-Ashton",
                        "structuredName": {
                            "firstName": "Elton",
                            "lastName": "Ashton",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Elton Ashton"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2630186"
                        ],
                        "name": "E. Courtois",
                        "slug": "E.-Courtois",
                        "structuredName": {
                            "firstName": "Eric",
                            "lastName": "Courtois",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Courtois"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1697641"
                        ],
                        "name": "F. Bodin",
                        "slug": "F.-Bodin",
                        "structuredName": {
                            "firstName": "Fran\u00e7ois",
                            "lastName": "Bodin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Bodin"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 52,
                                "start": 29
                            }
                        ],
                        "text": "This includes phase ordering [2, 17, 23, 24, 29, 46], tiling factors [42], mappings of kernels to CPUs or GPUs [15] with supervised learning, autovectorization [19,30,32,34,37\u201340,47\u201349] and the throughput of basic blocks [33]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 12905764,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "fb6e85d35fc7b10c16d465fc71748d819672ad24",
            "isKey": false,
            "numCitedBy": 127,
            "numCiting": 42,
            "paperAbstract": {
                "fragments": [],
                "text": "Tuning hardwired compiler optimizations for rapidly evolving hardware makes porting an optimizing compiler for each new platform extremely challenging. Our radical approach is to develop a modular, extensible, self-optimizing compiler that automatically learns the best optimization heuristics based on the behavior of the platform. In this paper we describe MILEPOST 1 GCC, a machine-learning-based compiler that automatically adjusts its optimization heuristics to improve the execution time, code size, or compilation time of specific programs on different architectures. Our preliminary experimental results show that it is possible to considerably reduce execution time of the MiBench benchmark suite on a range of platforms entirely automatically."
            },
            "slug": "MILEPOST-GCC:-machine-learning-based-research-Fursin-Miranda",
            "title": {
                "fragments": [],
                "text": "MILEPOST GCC: machine learning based research compiler"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "MILEPOST 1 GCC is described, a machine-learning-based compiler that automatically adjusts its optimization heuristics to improve the execution time, code size, or compilation time of specific programs on different architectures."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2008
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35343314"
                        ],
                        "name": "Savvas Sioutas",
                        "slug": "Savvas-Sioutas",
                        "structuredName": {
                            "firstName": "Savvas",
                            "lastName": "Sioutas",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Savvas Sioutas"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "115679894"
                        ],
                        "name": "S. Stuijk",
                        "slug": "S.-Stuijk",
                        "structuredName": {
                            "firstName": "Sander",
                            "lastName": "Stuijk",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Stuijk"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1803194"
                        ],
                        "name": "Luc Waeijen",
                        "slug": "Luc-Waeijen",
                        "structuredName": {
                            "firstName": "Luc",
                            "lastName": "Waeijen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luc Waeijen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1708289"
                        ],
                        "name": "T. Basten",
                        "slug": "T.-Basten",
                        "structuredName": {
                            "firstName": "Twan",
                            "lastName": "Basten",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Basten"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1684335"
                        ],
                        "name": "H. Corporaal",
                        "slug": "H.-Corporaal",
                        "structuredName": {
                            "firstName": "Henk",
                            "lastName": "Corporaal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Corporaal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "72375537"
                        ],
                        "name": "L. Somers",
                        "slug": "L.-Somers",
                        "structuredName": {
                            "firstName": "Lou",
                            "lastName": "Somers",
                            "middleNames": [
                                "Lou"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Somers"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 141,
                                "start": 137
                            }
                        ],
                        "text": "Therefore, automatic generation of high-performance Halide schedulings has been implemented and studied in several prior works [36] [35] [45] [1]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 7,
                                "start": 0
                            }
                        ],
                        "text": "[44,45] improves the search space and uses a manual cost model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 146039845,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "40bcc85d4448d9428599fc7312a4f9a89547c6f6",
            "isKey": false,
            "numCitedBy": 10,
            "numCiting": 29,
            "paperAbstract": {
                "fragments": [],
                "text": "Efficient code generation for image processing applications continues to pose a challenge in a domain where high performance is often necessary to meet real-time constraints. The inherently complex structure found in most image-processing pipelines, the plethora of transformations that can be applied to optimize the performance of an implementation, as well as the interaction of these optimizations with locality, redundant computation and parallelism, can be indentified as the key reasons behind this issue. Recent domain-specific languages (DSL) such as the Halide DSL and compiler attempt to encourage high-level design-space exploration to facilitate the optimization process. We propose a novel optimization strategy that aims to maximize producer-consumer locality by exploiting reuse in image-processing pipelines. We implement our analysis as a tool that can be used alongside the Halide DSL to automatically generate schedules for pipelines implemented in Halide and test it on a variety of benchmarks. Experimental results on three different multi-core architectures show an average performance improvement of 40% over the Halide Auto-Scheduler and 75% over a state-of-the art approach that targets the PolyMage DSL."
            },
            "slug": "Schedule-Synthesis-for-Halide-Pipelines-through-Sioutas-Stuijk",
            "title": {
                "fragments": [],
                "text": "Schedule Synthesis for Halide Pipelines through Reuse Analysis"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "This work proposes a novel optimization strategy that aims to maximize producer-consumer locality by exploiting reuse in image-processing pipelines and implements this analysis as a tool that can be used alongside the Halide DSL to automatically generate schedules for pipelines implemented in Halide and test it on a variety of benchmarks."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Archit. Code Optim."
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3258214"
                        ],
                        "name": "Abhinav Jangda",
                        "slug": "Abhinav-Jangda",
                        "structuredName": {
                            "firstName": "Abhinav",
                            "lastName": "Jangda",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Abhinav Jangda"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 4,
                                "start": 0
                            }
                        ],
                        "text": "[26] improved this cost model, but did not expand the restricted search space."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 3427600,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b542ea3cc3fd9202e2e861fa828c57f0ede1bf07",
            "isKey": false,
            "numCitedBy": 26,
            "numCiting": 22,
            "paperAbstract": {
                "fragments": [],
                "text": "Effective models for fusion of loop nests continue to remain a challenge in both general-purpose and domain-specific language (DSL) compilers. The difficulty often arises from the combinatorial explosion of grouping choices and their interaction with parallelism and locality. This paper presents a new fusion algorithm for high-performance domain-specific compilers for image processing pipelines. The fusion algorithm is driven by dynamic programming and explores spaces of fusion possibilities not covered by previous approaches, and is driven by a cost function more concrete and precise in capturing optimization criteria than prior approaches. The fusion model is particularly tailored to the transformation and optimization sequence applied by PolyMage and Halide, two recent DSLs for image processing pipelines. Our model-driven technique when implemented in PolyMage provides significant improvements (up to 4.32X) over PolyMage's approach (which uses auto-tuning to aid its model), and over Halide's automatic approach (by up to 2.46X) on two state-of-the-art shared-memory multicore architectures."
            },
            "slug": "An-effective-fusion-and-tile-size-model-for-image-Jangda-Bondhugula",
            "title": {
                "fragments": [],
                "text": "An effective fusion and tile size model for optimizing image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "A new fusion algorithm for high-performance domain-specific compilers for image processing pipelines is presented, driven by dynamic programming and explores spaces of fusion possibilities not covered by previous approaches, and is driven by a cost function more concrete and precise in capturing optimization criteria than prior approaches."
            },
            "venue": {
                "fragments": [],
                "text": "PPoPP"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34908205"
                        ],
                        "name": "Levente Kocsis",
                        "slug": "Levente-Kocsis",
                        "structuredName": {
                            "firstName": "Levente",
                            "lastName": "Kocsis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Levente Kocsis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40868287"
                        ],
                        "name": "Csaba Szepesvari",
                        "slug": "Csaba-Szepesvari",
                        "structuredName": {
                            "firstName": "Csaba",
                            "lastName": "Szepesvari",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Csaba Szepesvari"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1754706"
                        ],
                        "name": "J. Willemson",
                        "slug": "J.-Willemson",
                        "structuredName": {
                            "firstName": "Jan",
                            "lastName": "Willemson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Willemson"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 37,
                                "start": 33
                            }
                        ],
                        "text": "We used Cp = 1 2 as suggested in [28], which showed that it works well with rewards in range [0,1] as it satisfies the Hoeffding inequality."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 9831567,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b2c20a877a891ea97179658c06a6d552b50cba6e",
            "isKey": false,
            "numCitedBy": 127,
            "numCiting": 30,
            "paperAbstract": {
                "fragments": [],
                "text": "Monte-Carlo search has been successful in many non-deterministic games, and recently in deterministic games with high branching factor. One of the drawbacks of the current approaches is that even if the iterative process would last for a very long time, the selected move does not necessarily converge to a game-theoretic optimal one. In this paper we introduce a new algorithm, UCT, which extends a bandit algorithm for Monte-Carlo search. It is proven that the probability that the algorithm selects the correct move converges to 1. Moreover it is shown empirically that the algorithm converges rather fast even in comparison with alpha-beta search. Experiments in Amazons and Clobber indicate that the UCT algorithm outperforms considerably a plain Monte-Carlo version, and it is competitive against alpha-beta based game programs."
            },
            "slug": "Improved-Monte-Carlo-Search-Kocsis-Szepesvari",
            "title": {
                "fragments": [],
                "text": "Improved Monte-Carlo Search"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "A new algorithm is introduced, UCT, which extends a bandit algorithm for Monte-Carlo search, and it is proven that the probability that the algorithm selects the correct move converges to 1."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2006
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1913774"
                        ],
                        "name": "Tianqi Chen",
                        "slug": "Tianqi-Chen",
                        "structuredName": {
                            "firstName": "Tianqi",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tianqi Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47108160"
                        ],
                        "name": "T. Moreau",
                        "slug": "T.-Moreau",
                        "structuredName": {
                            "firstName": "Thierry",
                            "lastName": "Moreau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Moreau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1732910"
                        ],
                        "name": "Ziheng Jiang",
                        "slug": "Ziheng-Jiang",
                        "structuredName": {
                            "firstName": "Ziheng",
                            "lastName": "Jiang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ziheng Jiang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3050154"
                        ],
                        "name": "Haichen Shen",
                        "slug": "Haichen-Shen",
                        "structuredName": {
                            "firstName": "Haichen",
                            "lastName": "Shen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Haichen Shen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2621619"
                        ],
                        "name": "Eddie Q. Yan",
                        "slug": "Eddie-Q.-Yan",
                        "structuredName": {
                            "firstName": "Eddie",
                            "lastName": "Yan",
                            "middleNames": [
                                "Q."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eddie Q. Yan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2185540"
                        ],
                        "name": "Leyuan Wang",
                        "slug": "Leyuan-Wang",
                        "structuredName": {
                            "firstName": "Leyuan",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Leyuan Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49994783"
                        ],
                        "name": "Yuwei Hu",
                        "slug": "Yuwei-Hu",
                        "structuredName": {
                            "firstName": "Yuwei",
                            "lastName": "Hu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yuwei Hu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1717411"
                        ],
                        "name": "L. Ceze",
                        "slug": "L.-Ceze",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Ceze",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Ceze"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1730156"
                        ],
                        "name": "Carlos Guestrin",
                        "slug": "Carlos-Guestrin",
                        "structuredName": {
                            "firstName": "Carlos",
                            "lastName": "Guestrin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Carlos Guestrin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144695691"
                        ],
                        "name": "A. Krishnamurthy",
                        "slug": "A.-Krishnamurthy",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Krishnamurthy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Krishnamurthy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 121,
                                "start": 118
                            }
                        ],
                        "text": "[3] uses deep reinforcement learning to schedule deep learning pipelines and improves the performance compared to AutoTVM."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 77,
                                "start": 73
                            }
                        ],
                        "text": "AutoTVM [14] uses tree-based algorithms to auto-schedule programs on TVM [13], which is an optimization stack for deep learning."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 3296374,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ec3071fb918ad69ec80df1ca9cf1fdeb386a9603",
            "isKey": false,
            "numCitedBy": 140,
            "numCiting": 50,
            "paperAbstract": {
                "fragments": [],
                "text": "Scalable frameworks, such as TensorFlow, MXNet, Caffe, and PyTorch drive the current popularity and utility of deep learning. However, these frameworks are optimized for a narrow range of server-class GPUs and deploying workloads to other platforms such as mobile phones, embedded devices, and specialized accelerators (e.g., FPGAs, ASICs) requires laborious manual effort. We propose TVM, an end-to-end optimization stack that exposes graph-level and operator-level optimizations to provide performance portability to deep learning workloads across diverse hardware back-ends. We discuss the optimization challenges specific to deep learning that TVM solves: high-level operator fusion, low-level memory reuse across threads, mapping to arbitrary hardware primitives, and memory latency hiding. Experimental results demonstrate that TVM delivers performance across hardware back-ends that are competitive with state-of-the-art libraries for low-power CPU and server-class GPUs. We also demonstrate TVM's ability to target new hardware accelerator back-ends by targeting an FPGA-based generic deep learning accelerator. The compiler infrastructure is open sourced."
            },
            "slug": "TVM:-End-to-End-Optimization-Stack-for-Deep-Chen-Moreau",
            "title": {
                "fragments": [],
                "text": "TVM: End-to-End Optimization Stack for Deep Learning"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "TVM is proposed, an end-to-end optimization stack that exposes graph-level and operator-level optimizations to provide performance portability to deep learning workloads across diverse hardware back-ends and discusses the optimization challenges specific toDeep learning that TVM solves."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2059804383"
                        ],
                        "name": "Chris Cummins",
                        "slug": "Chris-Cummins",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Cummins",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Cummins"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1955185"
                        ],
                        "name": "Pavlos Petoumenos",
                        "slug": "Pavlos-Petoumenos",
                        "structuredName": {
                            "firstName": "Pavlos",
                            "lastName": "Petoumenos",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pavlos Petoumenos"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Zheng Wang",
                        "slug": "Zheng-Wang",
                        "structuredName": {
                            "firstName": "Zheng",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zheng Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2476647"
                        ],
                        "name": "H. Leather",
                        "slug": "H.-Leather",
                        "structuredName": {
                            "firstName": "Hugh",
                            "lastName": "Leather",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Leather"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 74,
                                "start": 62
                            }
                        ],
                        "text": "Heuristics mostly fall short in achieving optimal performance [16, 19, 20]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 215755891,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "e4bcb45990a928ac06df4dc24dc07e16fcac9141",
            "isKey": false,
            "numCitedBy": 76,
            "numCiting": 63,
            "paperAbstract": {
                "fragments": [],
                "text": "Predictive modeling using machine learning is an effective method for building compiler heuristics, but there is a shortage of benchmarks. Typical machine learning experiments outside of the compilation field train over thousands or millions of examples. In machine learning for compilers, however, there are typically only a few dozen common benchmarks available. This limits the quality of learned models, as they have very sparse training data for what are often high-dimensional feature spaces. What is needed is a way to generate an unbounded number of training programs that finely cover the feature space. At the same time the generated programs must be similar to the types of programs that human developers actually write, otherwise the learning will target the wrong parts of the feature space. We mine open source repositories for program fragments and apply deep learning techniques to automatically construct models for how humans write programs. We sample these models to generate an unbounded number of runnable training programs. The quality of the programs is such that even human developers struggle to distinguish our generated programs from hand-written code. We use our generator for OpenCL programs, CLgen, to automatically synthesize thousands of programs and show that learning over these improves the performance of a state of the art predictive model by 1.27x. In addition, the fine covering of the feature space automatically exposes weaknesses in the feature design which are invisible with the sparse training examples from existing benchmark suites. Correcting these weaknesses further increases performance by 4.30x."
            },
            "slug": "Synthesizing-benchmarks-for-predictive-modeling-Cummins-Petoumenos",
            "title": {
                "fragments": [],
                "text": "Synthesizing benchmarks for predictive modeling"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "The authors' generator for OpenCL programs, CLgen, is used to automatically synthesize thousands of programs and it is shown that learning over these improves the performance of a state of the art predictive model by 1.27x."
            },
            "venue": {
                "fragments": [],
                "text": "2017 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "11950728"
                        ],
                        "name": "Kevin Stock",
                        "slug": "Kevin-Stock",
                        "structuredName": {
                            "firstName": "Kevin",
                            "lastName": "Stock",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kevin Stock"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793611"
                        ],
                        "name": "L. Pouchet",
                        "slug": "L.-Pouchet",
                        "structuredName": {
                            "firstName": "Louis-No\u00ebl",
                            "lastName": "Pouchet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Pouchet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 17079381,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "5c4bd6698d2ad9413bee80b51608d8b0fc0613b9",
            "isKey": false,
            "numCitedBy": 54,
            "numCiting": 42,
            "paperAbstract": {
                "fragments": [],
                "text": "Automatic vectorization is critical to enhancing performance of compute-intensive programs on modern processors. However, there is much room for improvement over the auto-vectorization capabilities of current production compilers through careful vector-code synthesis that utilizes a variety of loop transformations (e.g., unroll-and-jam, interchange, etc.).\n As the set of transformations considered is increased, the selection of the most effective combination of transformations becomes a significant challenge: Currently used cost models in vectorizing compilers are often unable to identify the best choices. In this paper, we address this problem using machine learning models to predict the performance of SIMD codes. In contrast to existing approaches that have used high-level features of the program, we develop machine learning models based on features extracted from the generated assembly code. The models are trained offline on a number of benchmarks and used at compile-time to discriminate between numerous possible vectorized variants generated from the input code.\n We demonstrate the effectiveness of the machine learning model by using it to guide automatic vectorization on a variety of tensor contraction kernels, with improvements ranging from 2\u00d7 to 8\u00d7 over Intel ICC's auto-vectorized code. We also evaluate the effectiveness of the model on a number of stencil computations and show good improvement over auto-vectorized code."
            },
            "slug": "Using-machine-learning-to-improve-automatic-Stock-Pouchet",
            "title": {
                "fragments": [],
                "text": "Using machine learning to improve automatic vectorization"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "The effectiveness of the machine learning model is demonstrated by using it to guide automatic vectorization on a variety of tensor contraction kernels, with improvements ranging from 2\u00d7 to 8\u00d7 over Intel ICC's auto-vectorized code."
            },
            "venue": {
                "fragments": [],
                "text": "TACO"
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47368718"
                        ],
                        "name": "Ravi Teja Mullapudi",
                        "slug": "Ravi-Teja-Mullapudi",
                        "structuredName": {
                            "firstName": "Ravi",
                            "lastName": "Mullapudi",
                            "middleNames": [
                                "Teja"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ravi Teja Mullapudi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2665634"
                        ],
                        "name": "Dillon Sharlet",
                        "slug": "Dillon-Sharlet",
                        "structuredName": {
                            "firstName": "Dillon",
                            "lastName": "Sharlet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dillon Sharlet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2789576"
                        ],
                        "name": "Kayvon Fatahalian",
                        "slug": "Kayvon-Fatahalian",
                        "structuredName": {
                            "firstName": "Kayvon",
                            "lastName": "Fatahalian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kayvon Fatahalian"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 113,
                                "start": 109
                            }
                        ],
                        "text": "The auto-scheduler that comes with the master Halide repo, which we compare against in Section 5 is based on [35]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 136,
                                "start": 132
                            }
                        ],
                        "text": "Therefore, automatic generation of high-performance Halide schedulings has been implemented and studied in several prior works [36] [35] [45] [1]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 14400771,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9b240a87b11d085641d6640f73cc3cc2d678e305",
            "isKey": false,
            "numCitedBy": 129,
            "numCiting": 17,
            "paperAbstract": {
                "fragments": [],
                "text": "The Halide image processing language has proven to be an effective system for authoring high-performance image processing code. Halide programmers need only provide a high-level strategy for mapping an image processing pipeline to a parallel machine (a schedule), and the Halide compiler carries out the mechanical task of generating platform-specific code that implements the schedule. Unfortunately, designing high-performance schedules for complex image processing pipelines requires substantial knowledge of modern hardware architecture and code-optimization techniques. In this paper we provide an algorithm for automatically generating high-performance schedules for Halide programs. Our solution extends the function bounds analysis already present in the Halide compiler to automatically perform locality and parallelism-enhancing global program transformations typical of those employed by expert Halide developers. The algorithm does not require costly (and often impractical) auto-tuning, and, in seconds, generates schedules for a broad set of image processing benchmarks that are performance-competitive with, and often better than, schedules manually authored by expert Halide developers on server and mobile CPUs, as well as GPUs."
            },
            "slug": "Automatically-scheduling-halide-image-processing-Mullapudi-Adams",
            "title": {
                "fragments": [],
                "text": "Automatically scheduling halide image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "An algorithm for automatically generating high-performance schedules for Halide programs that does not require costly (and often impractical) auto-tuning, and generates schedules for a broad set of image processing benchmarks that are performance-competitive with, and often better than, schedules manually authored by expert Halide developers on server and mobile CPUs, as well as GPUs."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Graph."
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "4875117"
                        ],
                        "name": "Jessica Ray",
                        "slug": "Jessica-Ray",
                        "structuredName": {
                            "firstName": "Jessica",
                            "lastName": "Ray",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jessica Ray"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40899986"
                        ],
                        "name": "Malek Ben Romdhane",
                        "slug": "Malek-Ben-Romdhane",
                        "structuredName": {
                            "firstName": "Malek",
                            "lastName": "Romdhane",
                            "middleNames": [
                                "Ben"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Malek Ben Romdhane"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3436746"
                        ],
                        "name": "Emanuele Del Sozzo",
                        "slug": "Emanuele-Del-Sozzo",
                        "structuredName": {
                            "firstName": "Emanuele",
                            "lastName": "Sozzo",
                            "middleNames": [
                                "Del"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Emanuele Del Sozzo"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060643"
                        ],
                        "name": "Abdurrahman Akkas",
                        "slug": "Abdurrahman-Akkas",
                        "structuredName": {
                            "firstName": "Abdurrahman",
                            "lastName": "Akkas",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Abdurrahman Akkas"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "11860259"
                        ],
                        "name": "Yunming Zhang",
                        "slug": "Yunming-Zhang",
                        "structuredName": {
                            "firstName": "Yunming",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yunming Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8844033"
                        ],
                        "name": "Patricia Suriana",
                        "slug": "Patricia-Suriana",
                        "structuredName": {
                            "firstName": "Patricia",
                            "lastName": "Suriana",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Patricia Suriana"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145683292"
                        ],
                        "name": "S. Kamil",
                        "slug": "S.-Kamil",
                        "structuredName": {
                            "firstName": "Shoaib",
                            "lastName": "Kamil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Kamil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 102
                            }
                        ],
                        "text": "Many compilers that use loop polyhedral analysis to perform automatic scheduling of affine loop nests [7,8,10,18,36, 50]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 56173920,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8c7310477fd027193cd040288f0aa9824c80b91f",
            "isKey": false,
            "numCitedBy": 122,
            "numCiting": 55,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper introduces Tiramisu, a polyhedral framework designed to generate high performance code for multiple platforms including multicores, GPUs, and distributed machines. Tiramisu introduces a scheduling language with novel commands to explicitly manage the complexities that arise when targeting these systems. The framework is designed for the areas of image processing, stencils, linear algebra and deep learning. Tiramisu has two main features: it relies on a flexible representation based on the polyhedral model and it has a rich scheduling language allowing fine-grained control of optimizations. Tiramisu uses a four-level intermediate representation that allows full separation between the algorithms, loop transformations, data layouts, and communication. This separation simplifies targeting multiple hardware architectures with the same algorithm. We evaluate Tiramisu by writing a set of image processing, deep learning, and linear algebra benchmarks and compare them with state-of-the-art compilers and hand-tuned libraries. We show that Tiramisu matches or outperforms existing compilers and libraries on different hardware architectures, including multicore CPUs, GPUs, and distributed machines."
            },
            "slug": "Tiramisu:-A-Polyhedral-Compiler-for-Expressing-Fast-Baghdadi-Ray",
            "title": {
                "fragments": [],
                "text": "Tiramisu: A Polyhedral Compiler for Expressing Fast and Portable Code"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "Tiramisu introduces a scheduling language with novel commands to explicitly manage the complexities that arise when targeting these systems, designed for the areas of image processing, stencils, linear algebra and deep learning."
            },
            "venue": {
                "fragments": [],
                "text": "2019 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2496412"
                        ],
                        "name": "Connelly Barnes",
                        "slug": "Connelly-Barnes",
                        "structuredName": {
                            "firstName": "Connelly",
                            "lastName": "Barnes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Connelly Barnes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 26,
                                "start": 22
                            }
                        ],
                        "text": "In the original paper [41], heuristics and genetic search over random schedule rewrites were used."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 62,
                                "start": 58
                            }
                        ],
                        "text": "To explore that, we implemented ProTuner on top of Halide [41], evaluated it, and"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 11,
                                "start": 7
                            }
                        ],
                        "text": "Halide [41] is a domain-specific language for image processing and deep learning tasks."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 103
                            }
                        ],
                        "text": "While this approach achieves promising improvements over the baseline default auto-scheduler in Halide [41], it often fails to find the optimal schedule."
                    },
                    "intents": []
                }
            ],
            "corpusId": 5885207,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d032f74b16457584f8a60ae07cfef9b617033638",
            "isKey": true,
            "numCitedBy": 878,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Image processing pipelines combine the challenges of stencil computations and stream programs. They are composed of large graphs of different stencil stages, as well as complex reductions, and stages with global or data-dependent access patterns. Because of their complex structure, the performance difference between a naive implementation of a pipeline and an optimized one is often an order of magnitude. Efficient implementations require optimization of both parallelism and locality, but due to the nature of stencils, there is a fundamental tension between parallelism, locality, and introducing redundant recomputation of shared values. We present a systematic model of the tradeoff space fundamental to stencil pipelines, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule. Combining this compiler with stochastic search over the space of schedules enables terse, composable programs to achieve state-of-the-art performance on a wide range of real image processing pipelines, and across different hardware architectures, including multicores with SIMD, and heterogeneous CPU+GPU execution. From simple Halide programs written in a few hours, we demonstrate performance up to 5x faster than hand-tuned C, intrinsics, and CUDA implementations optimized by experts over weeks or months, for image processing applications beyond the reach of past automatic compilers."
            },
            "slug": "Halide:-a-language-and-compiler-for-optimizing-and-Ragan-Kelley-Barnes",
            "title": {
                "fragments": [],
                "text": "Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A systematic model of the tradeoff space fundamental to stencil pipelines is presented, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule are presented."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI 2013"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "12230182"
                        ],
                        "name": "Zheng Wang",
                        "slug": "Zheng-Wang",
                        "structuredName": {
                            "firstName": "Zheng",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zheng Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401533251"
                        ],
                        "name": "M. O\u2019Boyle",
                        "slug": "M.-O\u2019Boyle",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "O\u2019Boyle",
                            "middleNames": [
                                "F.",
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. O\u2019Boyle"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 87,
                                "start": 80
                            }
                        ],
                        "text": "Machine learning in compiler optimization has been proposed in many prior works [5, 51]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 13662098,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6989e13df80edfc6e638e8d8502cb0739d494ca6",
            "isKey": false,
            "numCitedBy": 120,
            "numCiting": 209,
            "paperAbstract": {
                "fragments": [],
                "text": "In the last decade, machine-learning-based compilation has moved from an obscure research niche to a mainstream activity. In this paper, we describe the relationship between machine learning and compiler optimization and introduce the main concepts of features, models, training, and deployment. We then provide a comprehensive survey and provide a road map for the wide variety of different research areas. We conclude with a discussion on open issues in the area and potential research directions. This paper provides both an accessible introduction to the fast moving area of machine-learning-based compilation and a detailed bibliography of its main achievements."
            },
            "slug": "Machine-Learning-in-Compiler-Optimization-Wang-O\u2019Boyle",
            "title": {
                "fragments": [],
                "text": "Machine Learning in Compiler Optimization"
            },
            "tldr": {
                "abstractSimilarityScore": 49,
                "text": "The relationship between machine learning and compiler optimization is described and the main concepts of features, models, training, and deployment are introduced and a road map for the wide variety of different research areas is provided."
            },
            "venue": {
                "fragments": [],
                "text": "Proceedings of the IEEE"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1763408"
                        ],
                        "name": "Albert Hartono",
                        "slug": "Albert-Hartono",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Hartono",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Hartono"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145981817"
                        ],
                        "name": "J. Ramanujam",
                        "slug": "J.-Ramanujam",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Ramanujam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ramanujam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 102
                            }
                        ],
                        "text": "Many compilers that use loop polyhedral analysis to perform automatic scheduling of affine loop nests [7,8,10,18,36, 50]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 7086982,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f0f4757aa2f923a349e8357e73850a78e9b80fee",
            "isKey": false,
            "numCitedBy": 860,
            "numCiting": 71,
            "paperAbstract": {
                "fragments": [],
                "text": "We present the design and implementation of an automatic polyhedral source-to-source transformation framework that can optimize regular programs (sequences of possibly imperfectly nested loops) for parallelism and locality simultaneously. Through this work, we show the practicality of analytical model-driven automatic transformation in the polyhedral model -- far beyond what is possible by current production compilers. Unlike previous works, our approach is an end-to-end fully automatic one driven by an integer linear optimization framework that takes an explicit view of finding good ways of tiling for parallelism and locality using affine transformations. The framework has been implemented into a tool to automatically generate OpenMP parallel code from C program sections. Experimental results from the tool show very high speedups for local and parallel execution on multi-cores over state-of-the-art compiler frameworks from the research community as well as the best native production compilers. The system also enables the easy use of powerful empirical/iterative optimization for general arbitrarily nested loop sequences."
            },
            "slug": "A-practical-automatic-polyhedral-parallelizer-and-Bondhugula-Hartono",
            "title": {
                "fragments": [],
                "text": "A practical automatic polyhedral parallelizer and locality optimizer"
            },
            "tldr": {
                "abstractSimilarityScore": 60,
                "text": "An automatic polyhedral source-to-source transformation framework that can optimize regular programs for parallelism and locality simultaneously simultaneously and is implemented into a tool to automatically generate OpenMP parallel code from C program sections."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '08"
            },
            "year": 2008
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1755190"
                        ],
                        "name": "Dorit Nuzman",
                        "slug": "Dorit-Nuzman",
                        "structuredName": {
                            "firstName": "Dorit",
                            "lastName": "Nuzman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dorit Nuzman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2133878"
                        ],
                        "name": "Sergei Dyshel",
                        "slug": "Sergei-Dyshel",
                        "structuredName": {
                            "firstName": "Sergei",
                            "lastName": "Dyshel",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sergei Dyshel"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2870500"
                        ],
                        "name": "Erven Rohou",
                        "slug": "Erven-Rohou",
                        "structuredName": {
                            "firstName": "Erven",
                            "lastName": "Rohou",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Erven Rohou"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153090846"
                        ],
                        "name": "Ira Rosen",
                        "slug": "Ira-Rosen",
                        "structuredName": {
                            "firstName": "Ira",
                            "lastName": "Rosen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ira Rosen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50678208"
                        ],
                        "name": "K. Williams",
                        "slug": "K.-Williams",
                        "structuredName": {
                            "firstName": "Kevin",
                            "lastName": "Williams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Williams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1867308"
                        ],
                        "name": "D. Yuste",
                        "slug": "D.-Yuste",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Yuste",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Yuste"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38737579"
                        ],
                        "name": "A. Zaks",
                        "slug": "A.-Zaks",
                        "structuredName": {
                            "firstName": "Ayal",
                            "lastName": "Zaks",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Zaks"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 12097402,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "4a31ad65c9b5e00908e560ff7eb772b7ab4066ee",
            "isKey": false,
            "numCitedBy": 83,
            "numCiting": 32,
            "paperAbstract": {
                "fragments": [],
                "text": "Just-in-Time (JIT) compiler technology offers portability while facilitating target- and context-specific specialization. Single-Instruction-Multiple-Data (SIMD) hardware is ubiquitous and markedly diverse, but can be difficult for JIT compilers to efficiently target due to resource and budget constraints. We present our design for a synergistic auto-vectorizing compilation scheme. The scheme is composed of an aggressive, generic offline stage coupled with a lightweight, target-specific online stage. Our method leverages the optimized intermediate results provided by the first stage across disparate SIMD architectures from different vendors, having distinct characteristics ranging from different vector sizes, memory alignment and access constraints, to special computational idioms. We demonstrate the effectiveness of our design using a set of kernels that exercise innermost loop, outer loop, as well as straight-line code vectorization, all automatically extracted by the common offline compilation stage. This results in performance comparable to that provided by specialized monolithic offline compilers. Our framework is implemented using open-source tools and standards, thereby promoting interoperability and extendibility."
            },
            "slug": "Vapor-SIMD:-Auto-vectorize-once,-run-everywhere-Nuzman-Dyshel",
            "title": {
                "fragments": [],
                "text": "Vapor SIMD: Auto-vectorize once, run everywhere"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This work presents a synergistic auto-vectorizing compilation scheme that leverages the optimized intermediate results provided by the first stage across disparate SIMD architectures from different vendors, having distinct characteristics ranging from different vector sizes, memory alignment and access constraints, to special computational idioms."
            },
            "venue": {
                "fragments": [],
                "text": "International Symposium on Code Generation and Optimization (CGO 2011)"
            },
            "year": 2011
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2759686"
                        ],
                        "name": "K. Trifunovic",
                        "slug": "K.-Trifunovic",
                        "structuredName": {
                            "firstName": "Konrad",
                            "lastName": "Trifunovic",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Trifunovic"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1755190"
                        ],
                        "name": "Dorit Nuzman",
                        "slug": "Dorit-Nuzman",
                        "structuredName": {
                            "firstName": "Dorit",
                            "lastName": "Nuzman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dorit Nuzman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38737579"
                        ],
                        "name": "A. Zaks",
                        "slug": "A.-Zaks",
                        "structuredName": {
                            "firstName": "Ayal",
                            "lastName": "Zaks",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Zaks"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153090846"
                        ],
                        "name": "Ira Rosen",
                        "slug": "Ira-Rosen",
                        "structuredName": {
                            "firstName": "Ira",
                            "lastName": "Rosen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ira Rosen"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 564675,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "db9f78176b27de866704536f44824f1d3af13402",
            "isKey": false,
            "numCitedBy": 115,
            "numCiting": 28,
            "paperAbstract": {
                "fragments": [],
                "text": "Optimizing compilers strive to construct efficient executables by applying sequences of transformations. Additional transformations are constantly being devised, with various mutual interactions among them, thereby exacerbating the notoriously difficult phase-ordering problem --- that of deciding which transformations to apply and in which order. Fortunately, new infrastructures such as the polyhedral compilation framework host a variety of transformations, facilitating the efficient exploration and configuration of multiple transformation sequences. Many powerful optimizations, however, remain external to the polyhedral framework, with potential mutual interactions that need to be considered. In this paper we examine the interactions between loop transformations of the polyhedral compilation framework and subsequent vectorization optimizations targeting fine-grain SIMD data-level parallelism. Automatic vectorization involves many low-level, target-specific considerations and transformations, which currently exclude it from being part of the polyhedral framework. In order to consider potential interactions among polyhedral loop transformations and vectorization, we first model the performance impact of the different loop transformations and vectorization strategies, and then show how this cost model can be integrated seamlessly into the polyhedral representation. This predictive modelling then facilitates efficient exploration and educated decision making on how to best apply various polyhedral loop transformations while considering the subsequent effects of different vectorization schemes. Our work demonstrates the feasibility and benefit of tuning the polyhedral model in the context of vectorization. Experimental results confirm that our model has accurate predictions, providing speedups of over 2 on average over traditional innermost-loop vectorization on PowerPC970 and Cell-SPU SIMD platforms."
            },
            "slug": "Polyhedral-Model-Guided-Loop-Nest-Trifunovic-Nuzman",
            "title": {
                "fragments": [],
                "text": "Polyhedral-Model Guided Loop-Nest Auto-Vectorization"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "This paper examines the interactions between loop transformations of the polyhedral compilation framework and subsequent vectorization optimizations targeting fine-grain SIMD data-level parallelism, and demonstrates the feasibility and benefit of tuning thepolyhedral model in the context of vectorization."
            },
            "venue": {
                "fragments": [],
                "text": "2009 18th International Conference on Parallel Architectures and Compilation Techniques"
            },
            "year": 2009
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2054833547"
                        ],
                        "name": "O. Zinenko",
                        "slug": "O.-Zinenko",
                        "structuredName": {
                            "firstName": "Oleksandr",
                            "lastName": "Zinenko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Zinenko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2097631216"
                        ],
                        "name": "Theodoros Theodoridis",
                        "slug": "Theodoros-Theodoridis",
                        "structuredName": {
                            "firstName": "Theodoros",
                            "lastName": "Theodoridis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Theodoros Theodoridis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47316088"
                        ],
                        "name": "Priya Goyal",
                        "slug": "Priya-Goyal",
                        "structuredName": {
                            "firstName": "Priya",
                            "lastName": "Goyal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Priya Goyal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2375710"
                        ],
                        "name": "Zach DeVito",
                        "slug": "Zach-DeVito",
                        "structuredName": {
                            "firstName": "Zach",
                            "lastName": "DeVito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zach DeVito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "16521420"
                        ],
                        "name": "William S. Moses",
                        "slug": "William-S.-Moses",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Moses",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William S. Moses"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 102
                            }
                        ],
                        "text": "Many compilers that use loop polyhedral analysis to perform automatic scheduling of affine loop nests [7,8,10,18,36, 50]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 44014988,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cae9d90524cccac5081666985d5d055b71697cee",
            "isKey": false,
            "numCitedBy": 284,
            "numCiting": 102,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning models with convolutional and recurrent networks are now ubiquitous and analyze massive amounts of audio, image, video, text and graph data, with applications in automatic translation, speech-to-text, scene understanding, ranking user preferences, ad placement, etc. Competing frameworks for building these networks such as TensorFlow, Chainer, CNTK, Torch/PyTorch, Caffe1/2, MXNet and Theano, explore different tradeoffs between usability and expressiveness, research or production orientation and supported hardware. They operate on a DAG of computational operators, wrapping high-performance libraries such as CUDNN (for NVIDIA GPUs) or NNPACK (for various CPUs), and automate memory allocation, synchronization, distribution. Custom operators are needed where the computation does not fit existing high-performance library calls, usually at a high engineering cost. This is frequently required when new operators are invented by researchers: such operators suffer a severe performance penalty, which limits the pace of innovation. Furthermore, even if there is an existing runtime call these frameworks can use, it often doesn't offer optimal performance for a user's particular network architecture and dataset, missing optimizations between operators as well as optimizations that can be done knowing the size and shape of data. Our contributions include (1) a language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, (2) a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, also providing optimizations such as operator fusion and specialization for specific sizes, (3) a compilation cache populated by an autotuner. [Abstract cutoff]"
            },
            "slug": "Tensor-Comprehensions:-Framework-Agnostic-Machine-Vasilache-Zinenko",
            "title": {
                "fragments": [],
                "text": "Tensor Comprehensions: Framework-Agnostic High-Performance Machine Learning Abstractions"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "A language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, and a compilation cache populated by an autotuner are contributed."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35343314"
                        ],
                        "name": "Savvas Sioutas",
                        "slug": "Savvas-Sioutas",
                        "structuredName": {
                            "firstName": "Savvas",
                            "lastName": "Sioutas",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Savvas Sioutas"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "115679894"
                        ],
                        "name": "S. Stuijk",
                        "slug": "S.-Stuijk",
                        "structuredName": {
                            "firstName": "Sander",
                            "lastName": "Stuijk",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Stuijk"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1684335"
                        ],
                        "name": "H. Corporaal",
                        "slug": "H.-Corporaal",
                        "structuredName": {
                            "firstName": "Henk",
                            "lastName": "Corporaal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Corporaal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1708289"
                        ],
                        "name": "T. Basten",
                        "slug": "T.-Basten",
                        "structuredName": {
                            "firstName": "Twan",
                            "lastName": "Basten",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Basten"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1724137"
                        ],
                        "name": "L. Somers",
                        "slug": "L.-Somers",
                        "structuredName": {
                            "firstName": "Lou",
                            "lastName": "Somers",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Somers"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 7,
                                "start": 0
                            }
                        ],
                        "text": "[44,45] improves the search space and uses a manual cost model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 3337324,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ffa1f29d119d18f676832b9950d0afae863bbf5e",
            "isKey": false,
            "numCitedBy": 12,
            "numCiting": 33,
            "paperAbstract": {
                "fragments": [],
                "text": "Memory-bound applications heavily depend on the bandwidth of the system in order to achieve high performance. Improving temporal and/or spatial locality through loop transformations is a common way of mitigating this dependency. However, choosing the right combination of optimizations is not a trivial task, due to the fact that most of them alter the memory access pattern of the application and as a result interfere with the efficiency of the hardware prefetching mechanisms present in modern architectures. We propose an optimization algorithm that analytically classifies an algorithmic description of a loop nest in order to decide whether it should be optimized stressing its temporal or spatial locality, while also taking hardware prefetching into account. We implement our technique as a tool to be used with the Halide compiler and test it on a variety of benchmarks. We find an average performance improvement of over 40% compared to previous analytical models targeting the Halide language and compiler."
            },
            "slug": "Loop-transformations-leveraging-hardware-Sioutas-Stuijk",
            "title": {
                "fragments": [],
                "text": "Loop transformations leveraging hardware prefetching"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "This work proposes an optimization algorithm that analytically classifies an algorithmic description of a loop nest in order to decide whether it should be optimized stressing its temporal or spatial locality, while also taking hardware prefetching into account."
            },
            "venue": {
                "fragments": [],
                "text": "CGO"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1708011"
                        ],
                        "name": "Armin Gr\u00f6\u00dflinger",
                        "slug": "Armin-Gr\u00f6\u00dflinger",
                        "structuredName": {
                            "firstName": "Armin",
                            "lastName": "Gr\u00f6\u00dflinger",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Armin Gr\u00f6\u00dflinger"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1714483"
                        ],
                        "name": "C. Lengauer",
                        "slug": "C.-Lengauer",
                        "structuredName": {
                            "firstName": "Christian",
                            "lastName": "Lengauer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Lengauer"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 102
                            }
                        ],
                        "text": "Many compilers that use loop polyhedral analysis to perform automatic scheduling of affine loop nests [7,8,10,18,36, 50]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 18533155,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3d64988b882541afa8f03f912229fbba49c82e74",
            "isKey": false,
            "numCitedBy": 290,
            "numCiting": 35,
            "paperAbstract": {
                "fragments": [],
                "text": "The polyhedral model for loop parallelization has proved to be an effective tool for advanced optimization and automatic parallelization of programs in higher-level languages. Yet, to integrate such optimizations seamlessly into production compilers, they must be performed on the compiler's internal, low-level, intermediate representation (IR). With Polly, we present an infrastructure for polyhedral optimizations on such an IR. We describe the detection of program parts amenable to a polyhedral optimization (so-called static control parts), their translation to a Z-polyhedral representation, optimizations on this representation and the generation of optimized IR code. Furthermore, we define an interface for connecting external optimizers and present a novel way of using the parallelism they introduce to generate SIMD and OpenMP code. To evaluate Polly, we compile the PolyBench 2.0 benchmarks fully automatically with PLuTo as external optimizer and parallelizer. We can report on significant speedups."
            },
            "slug": "Polly-Performing-Polyhedral-Optimizations-on-a-Grosser-Gr\u00f6\u00dflinger",
            "title": {
                "fragments": [],
                "text": "Polly - Performing Polyhedral Optimizations on a Low-Level Intermediate Representation"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "Polly is presented, an infrastructure for polyhedral optimizations on the compiler's internal, low-level, intermediate representation (IR) and an interface for connecting external optimizers and a novel way of using the parallelism they introduce to generate SIMD and OpenMP code is presented."
            },
            "venue": {
                "fragments": [],
                "text": "Parallel Process. Lett."
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47368718"
                        ],
                        "name": "Ravi Teja Mullapudi",
                        "slug": "Ravi-Teja-Mullapudi",
                        "structuredName": {
                            "firstName": "Ravi",
                            "lastName": "Mullapudi",
                            "middleNames": [
                                "Teja"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ravi Teja Mullapudi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2032633"
                        ],
                        "name": "Vinay Vasista",
                        "slug": "Vinay-Vasista",
                        "structuredName": {
                            "firstName": "Vinay",
                            "lastName": "Vasista",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vinay Vasista"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 102
                            }
                        ],
                        "text": "Many compilers that use loop polyhedral analysis to perform automatic scheduling of affine loop nests [7,8,10,18,36, 50]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 131,
                                "start": 127
                            }
                        ],
                        "text": "Therefore, automatic generation of high-performance Halide schedulings has been implemented and studied in several prior works [36] [35] [45] [1]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 51,
                                "start": 47
                            }
                        ],
                        "text": "It is effective in scheduling simple pipelines [36]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 16016961,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0b9aaee517e0cabb274f5d7cfb01d8f58e51d76e",
            "isKey": false,
            "numCitedBy": 175,
            "numCiting": 53,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents the design and implementation of PolyMage, a domain-specific language and compiler for image processing pipelines. An image processing pipeline can be viewed as a graph of interconnected stages which process images successively. Each stage typically performs one of point-wise, stencil, reduction or data-dependent operations on image pixels. Individual stages in a pipeline typically exhibit abundant data parallelism that can be exploited with relative ease. However, the stages also require high memory bandwidth preventing effective utilization of parallelism available on modern architectures. For applications that demand high performance, the traditional options are to use optimized libraries like OpenCV or to optimize manually. While using libraries precludes optimization across library routines, manual optimization accounting for both parallelism and locality is very tedious. The focus of our system, PolyMage, is on automatically generating high-performance implementations of image processing pipelines expressed in a high-level declarative language. Our optimization approach primarily relies on the transformation and code generation capabilities of the polyhedral compiler framework. To the best of our knowledge, this is the first model-driven compiler for image processing pipelines that performs complex fusion, tiling, and storage optimization automatically. Experimental results on a modern multicore system show that the performance achieved by our automatic approach is up to 1.81x better than that achieved through manual tuning in Halide, a state-of-the-art language and compiler for image processing pipelines. For a camera raw image processing pipeline, our performance is comparable to that of a hand-tuned implementation."
            },
            "slug": "PolyMage:-Automatic-Optimization-for-Image-Mullapudi-Vasista",
            "title": {
                "fragments": [],
                "text": "PolyMage: Automatic Optimization for Image Processing Pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "This is the first model-driven compiler for image processing pipelines that performs complex fusion, tiling, and storage optimization automatically and is up to 1.81x better than that achieved through manual tuning in Halide, a state-of-the-art language and compiler forimage processing pipelines."
            },
            "venue": {
                "fragments": [],
                "text": "ASPLOS"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2589074"
                        ],
                        "name": "Vasileios Porpodas",
                        "slug": "Vasileios-Porpodas",
                        "structuredName": {
                            "firstName": "Vasileios",
                            "lastName": "Porpodas",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vasileios Porpodas"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 6997955,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d74d47c5eaa8d970fca764701a15da0b8e5d7314",
            "isKey": false,
            "numCitedBy": 10,
            "numCiting": 30,
            "paperAbstract": {
                "fragments": [],
                "text": "SIMD vectors help improve the performance of certain applications. The code gets vectorized into SIMD form either by hand, or automatically with auto-vectorizing compilers. The Superword-Level Parallelism (SLP) vectorization algorithm is a widely used algorithm for vectorizing straight-line code and is part of most industrial compilers. The algorithm attempts to pack scalar instructions into vectors starting from specific seed instructions in a bottom-up way. This approach, however, suffers from two main problems: (i) the algorithm may not reach instructions that could have been vectorized, and (ii) atomically operating on individual SLP graphs suffers from cost overestimation when consecutive SLP graphs share data. Both issues lead to missed vectorization opportunities even in simple code.In this work we propose SuperGraph-SLP (SG-SLP), an improved vectorization algorithm that overcomes these limitations of the existing algorithm. SG-SLP operates on a larger region, called the SuperGraph. This allows it to reach and successfully vectorize code that was previously unreachable. Moreover, the new region helps eliminate the inaccuracies in the cost-calculation as it allows for a more holistic view of the code. Our experiments show that SG-SLP improves the vectorization coverage and outperforms the state-of-the-art SLP across a number kernels by 36% on average, without affecting the compilation time."
            },
            "slug": "SuperGraph-SLP-Auto-Vectorization-Porpodas",
            "title": {
                "fragments": [],
                "text": "SuperGraph-SLP Auto-Vectorization"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "The experiments show that SG-SLP improves the vectorization coverage and outperforms the state-of-the-art SLP across a number kernels by 36% on average, without affecting the compilation time."
            },
            "venue": {
                "fragments": [],
                "text": "2017 26th International Conference on Parallel Architectures and Compilation Techniques (PACT)"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144543541"
                        ],
                        "name": "P. Auer",
                        "slug": "P.-Auer",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Auer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Auer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1388387856"
                        ],
                        "name": "N. Cesa-Bianchi",
                        "slug": "N.-Cesa-Bianchi",
                        "structuredName": {
                            "firstName": "Nicol\u00f2",
                            "lastName": "Cesa-Bianchi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Cesa-Bianchi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152702481"
                        ],
                        "name": "P. Fischer",
                        "slug": "P.-Fischer",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Fischer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Fischer"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 50,
                                "start": 47
                            }
                        ],
                        "text": "In this paper, the tree policy used is the UCB [6]:"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 121,
                                "start": 118
                            }
                        ],
                        "text": "Our main contributions are:\n\u2022 We propose to formulate the scheduling problem as an MDP and solve it using MCTS with the UCB."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 46,
                                "start": 43
                            }
                        ],
                        "text": "In this paper, the tree policy used is the UCB [6]:\nUCB = X\u0304 j +2Cp\n\u221a 2ln(n)\nn j (1)\nwhere n is the number of times the current parent node has been visited, n j is the number of times child j has been visited, and Cp > 0 is a constant."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 41,
                                "start": 38
                            }
                        ],
                        "text": "With the upper confidence bound (UCB) [6] the MCTS is guaranteed to converge to the optimal solution after enough iterations."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 121,
                                "start": 118
                            }
                        ],
                        "text": "We chose to use MCTS for four reasons: it is theoretically guaranteed to find the best node with sufficient time; its UCB formula balances the exploration of new states and exploitation of existing good states combined with using the expectation of future rewards which makes it more resilient to noise; its ability to look ahead before making a decision avoiding greediness; and the ability to make decisions based on costs of fully scheduled programs, which means the cost model can predict their execution time more accurately."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 60,
                                "start": 57
                            }
                        ],
                        "text": "In the later, after the node to be expanded based on the UCB formula is determined, it is expanded with a random child but the simulation is done purely greedily using the cost model."
                    },
                    "intents": []
                }
            ],
            "corpusId": 207609497,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "1e1d35136b1bf3b13ef6b53f6039f39d9ee820e3",
            "isKey": true,
            "numCitedBy": 5232,
            "numCiting": 32,
            "paperAbstract": {
                "fragments": [],
                "text": "Reinforcement learning policies face the exploration versus exploitation dilemma, i.e. the search for a balance between exploring the environment to find profitable actions while taking the empirically best action as often as possible. A popular measure of a policy's success in addressing this dilemma is the regret, that is the loss due to the fact that the globally optimal policy is not followed all the times. One of the simplest examples of the exploration/exploitation dilemma is the multi-armed bandit problem. Lai and Robbins were the first ones to show that the regret for this problem has to grow at least logarithmically in the number of plays. Since then, policies which asymptotically achieve this regret have been devised by Lai and Robbins and many others. In this work we show that the optimal logarithmic regret is also achievable uniformly over time, with simple and efficient policies, and for all reward distributions with bounded support."
            },
            "slug": "Finite-time-Analysis-of-the-Multiarmed-Bandit-Auer-Cesa-Bianchi",
            "title": {
                "fragments": [],
                "text": "Finite-time Analysis of the Multiarmed Bandit Problem"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This work shows that the optimal logarithmic regret is also achievable uniformly over time, with simple and efficient policies, and for all reward distributions with bounded support."
            },
            "venue": {
                "fragments": [],
                "text": "Machine Learning"
            },
            "year": 2004
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32532671"
                        ],
                        "name": "Charith Mendis",
                        "slug": "Charith-Mendis",
                        "structuredName": {
                            "firstName": "Charith",
                            "lastName": "Mendis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Charith Mendis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1701041"
                        ],
                        "name": "Michael Carbin",
                        "slug": "Michael-Carbin",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Carbin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michael Carbin"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 225,
                                "start": 221
                            }
                        ],
                        "text": "This includes phase ordering [2, 17, 23, 24, 29, 46], tiling factors [42], mappings of kernels to CPUs or GPUs [15] with supervised learning, autovectorization [19,30,32,34,37\u201340,47\u201349] and the throughput of basic blocks [33]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 52070027,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "e0a3db9884fee0e7b7ae7e48cd9992866fa8d300",
            "isKey": false,
            "numCitedBy": 79,
            "numCiting": 61,
            "paperAbstract": {
                "fragments": [],
                "text": "Predicting the number of clock cycles a processor takes to execute a block of assembly instructions in steady state (the throughput) is important for both compiler designers and performance engineers. Building an analytical model to do so is especially complicated in modern x86-64 Complex Instruction Set Computer (CISC) machines with sophisticated processor microarchitectures in that it is tedious, error prone, and must be performed from scratch for each processor generation. In this paper we present Ithemal, the first tool which learns to predict the throughput of a set of instructions. Ithemal uses a hierarchical LSTM--based approach to predict throughput based on the opcodes and operands of instructions in a basic block. We show that Ithemal is more accurate than state-of-the-art hand-written tools currently used in compiler backends and static machine code analyzers. In particular, our model has less than half the error of state-of-the-art analytical models (LLVM's llvm-mca and Intel's IACA). Ithemal is also able to predict these throughput values just as fast as the aforementioned tools, and is easily ported across a variety of processor microarchitectures with minimal developer effort."
            },
            "slug": "Ithemal:-Accurate,-Portable-and-Fast-Basic-Block-Mendis-Amarasinghe",
            "title": {
                "fragments": [],
                "text": "Ithemal: Accurate, Portable and Fast Basic Block Throughput Estimation using Deep Neural Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "Ithemal is presented, the first tool which learns to predict the throughput of a set of instructions and is more accurate than state-of-the-art hand-written tools currently used in compiler backends and static machine code analyzers."
            },
            "venue": {
                "fragments": [],
                "text": "ICML"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145391991"
                        ],
                        "name": "Qijing Huang",
                        "slug": "Qijing-Huang",
                        "structuredName": {
                            "firstName": "Qijing",
                            "lastName": "Huang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qijing Huang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3238771"
                        ],
                        "name": "Ruolong Lian",
                        "slug": "Ruolong-Lian",
                        "structuredName": {
                            "firstName": "Ruolong",
                            "lastName": "Lian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ruolong Lian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2507013"
                        ],
                        "name": "Andrew Canis",
                        "slug": "Andrew-Canis",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Canis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Canis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1719241"
                        ],
                        "name": "Jongsok Choi",
                        "slug": "Jongsok-Choi",
                        "structuredName": {
                            "firstName": "Jongsok",
                            "lastName": "Choi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jongsok Choi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2425940"
                        ],
                        "name": "R. Xi",
                        "slug": "R.-Xi",
                        "structuredName": {
                            "firstName": "Ryan",
                            "lastName": "Xi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Xi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2737572"
                        ],
                        "name": "Nazanin Calagar",
                        "slug": "Nazanin-Calagar",
                        "structuredName": {
                            "firstName": "Nazanin",
                            "lastName": "Calagar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nazanin Calagar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35024570"
                        ],
                        "name": "S. Brown",
                        "slug": "S.-Brown",
                        "structuredName": {
                            "firstName": "Stephen",
                            "lastName": "Brown",
                            "middleNames": [
                                "Dean"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Brown"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "4503849"
                        ],
                        "name": "J. Anderson",
                        "slug": "J.-Anderson",
                        "structuredName": {
                            "firstName": "Jason",
                            "lastName": "Anderson",
                            "middleNames": [
                                "Helge"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Anderson"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 52,
                                "start": 29
                            }
                        ],
                        "text": "This includes phase ordering [2, 17, 23, 24, 29, 46], tiling factors [42], mappings of kernels to CPUs or GPUs [15] with supervised learning, autovectorization [19,30,32,34,37\u201340,47\u201349] and the throughput of basic blocks [33]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 2323608,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "09f50a9d029c0204d510edecf96f855d8bf1b569",
            "isKey": false,
            "numCitedBy": 37,
            "numCiting": 29,
            "paperAbstract": {
                "fragments": [],
                "text": "We consider the impact of compiler optimizations on the quality of high-level synthesis (HLS)-generated field-programmable gate array (FPGA) hardware. Using an HLS tool implemented within the state-of-the-art LLVM compiler, we study the effect of compiler optimizations on the hardware metrics of circuit area, execution cycles, FMax, and wall-clock time. We evaluate 56 different compiler optimizations implemented within LLVM and show that some optimizations significantly affect hardware quality. Moreover, we show that hardware quality is also affected by some optimization parameter values, as well as the order in which optimizations are applied. We then present a new HLS-directed approach to compiler optimizations, wherein we execute partial HLS and profiling at intermittent points in the optimization process and use the results to judiciously undo the impact of optimization passes predicted to be damaging to the generated hardware quality. Results show that our approach produces circuits with 16% better speed performance, on average, versus using the standard -O3 optimization level."
            },
            "slug": "The-Effect-of-Compiler-Optimizations-on-High-Level-Huang-Lian",
            "title": {
                "fragments": [],
                "text": "The Effect of Compiler Optimizations on High-Level Synthesis-Generated Hardware"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "This work presents a new HLS-directed approach to compiler optimizations, wherein it executes partial HLS and profiling at intermittent points in the optimization process and uses the results to judiciously undo the impact of optimization passes predicted to be damaging to the generated hardware quality."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Trans. Reconfigurable Technol. Syst."
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39353098"
                        ],
                        "name": "Kaiming He",
                        "slug": "Kaiming-He",
                        "structuredName": {
                            "firstName": "Kaiming",
                            "lastName": "He",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kaiming He"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1771551"
                        ],
                        "name": "X. Zhang",
                        "slug": "X.-Zhang",
                        "structuredName": {
                            "firstName": "X.",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "X. Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3080683"
                        ],
                        "name": "Shaoqing Ren",
                        "slug": "Shaoqing-Ren",
                        "structuredName": {
                            "firstName": "Shaoqing",
                            "lastName": "Ren",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shaoqing Ren"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Jian Sun",
                        "slug": "Jian-Sun",
                        "structuredName": {
                            "firstName": "Jian",
                            "lastName": "Sun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jian Sun"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 20,
                                "start": 12
                            }
                        ],
                        "text": "The cost of ResNet50 is omitted because the application includes multiple stages, each stage is auto-scheduled separately (with costs in different ranges) and later the stages are merged back to form the final application."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 139
                            }
                        ],
                        "text": "These applications range from matrix multiplications to various blurs, convolutions and interpolations, to full implementation of ResNet50 [21]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 23,
                                "start": 15
                            }
                        ],
                        "text": "Therefore, for ResNet50, we report the results from the MCTS run that schedules it using the cost model only."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 62,
                                "start": 54
                            }
                        ],
                        "text": "We could not use real execution time measurements for ResNet50 as it requires many simultaneously scheduled functions that a single forked child cannot run on its own."
                    },
                    "intents": []
                }
            ],
            "corpusId": 206594692,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "2c03df8b48bf3fa39054345bafabfeff15bfd11d",
            "isKey": true,
            "numCitedBy": 97653,
            "numCiting": 61,
            "paperAbstract": {
                "fragments": [],
                "text": "Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers - 8\u00d7 deeper than VGG nets [40] but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers. The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC & COCO 2015 competitions1, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation."
            },
            "slug": "Deep-Residual-Learning-for-Image-Recognition-He-Zhang",
            "title": {
                "fragments": [],
                "text": "Deep Residual Learning for Image Recognition"
            },
            "tldr": {
                "abstractSimilarityScore": 63,
                "text": "This work presents a residual learning framework to ease the training of networks that are substantially deeper than those used previously, and provides comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth."
            },
            "venue": {
                "fragments": [],
                "text": "2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145391991"
                        ],
                        "name": "Qijing Huang",
                        "slug": "Qijing-Huang",
                        "structuredName": {
                            "firstName": "Qijing",
                            "lastName": "Huang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Qijing Huang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3238771"
                        ],
                        "name": "Ruolong Lian",
                        "slug": "Ruolong-Lian",
                        "structuredName": {
                            "firstName": "Ruolong",
                            "lastName": "Lian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ruolong Lian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2507013"
                        ],
                        "name": "Andrew Canis",
                        "slug": "Andrew-Canis",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Canis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Canis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1719241"
                        ],
                        "name": "Jongsok Choi",
                        "slug": "Jongsok-Choi",
                        "structuredName": {
                            "firstName": "Jongsok",
                            "lastName": "Choi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jongsok Choi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2425940"
                        ],
                        "name": "R. Xi",
                        "slug": "R.-Xi",
                        "structuredName": {
                            "firstName": "Ryan",
                            "lastName": "Xi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Xi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35024570"
                        ],
                        "name": "S. Brown",
                        "slug": "S.-Brown",
                        "structuredName": {
                            "firstName": "Stephen",
                            "lastName": "Brown",
                            "middleNames": [
                                "Dean"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Brown"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "4503849"
                        ],
                        "name": "J. Anderson",
                        "slug": "J.-Anderson",
                        "structuredName": {
                            "firstName": "Jason",
                            "lastName": "Anderson",
                            "middleNames": [
                                "Helge"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Anderson"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 52,
                                "start": 29
                            }
                        ],
                        "text": "This includes phase ordering [2, 17, 23, 24, 29, 46], tiling factors [42], mappings of kernels to CPUs or GPUs [15] with supervised learning, autovectorization [19,30,32,34,37\u201340,47\u201349] and the throughput of basic blocks [33]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 10398538,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "4fa70cb3d9f6b160f6d43d6b842c6ec0c1039ac6",
            "isKey": false,
            "numCitedBy": 50,
            "numCiting": 16,
            "paperAbstract": {
                "fragments": [],
                "text": "We consider the impact of compiler optimizations on the quality of high-level synthesis (HLS)-generated FPGA hardware. Using a HLS tool implemented within the state-of-the-art LLVM [1] compiler, we study the effect of compiler optimizations on the hardware metrics of circuit area, execution cycles, Fmax, and wall-clock time. We evaluate 56 different compiler optimizations implemented within LLVM and show that some optimizations significantly affect hardware quality. Moreover, we show that hardware quality is also affected by the order in which optimizations are applied. We then present a new HLS-directed approach to compiler optimizations, wherein we execute partial HLS and profiling at intermittent points in the optimization process and use the results to judiciously undo the impact of optimization passes predicted to be damaging to the generated hardware quality. Results show that our approach produces circuits with 16% better speed performance, on average, versus using the standard -O3 optimization level."
            },
            "slug": "The-Effect-of-Compiler-Optimizations-on-High-Level-Huang-Lian",
            "title": {
                "fragments": [],
                "text": "The Effect of Compiler Optimizations on High-Level Synthesis for FPGAs"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "This work presents a new HLS-directed approach to compiler optimizations, wherein it executes partial HLS and profiling at intermittent points in the optimization process and uses the results to judiciously undo the impact of optimization passes predicted to be damaging to the generated hardware quality."
            },
            "venue": {
                "fragments": [],
                "text": "2013 IEEE 21st Annual International Symposium on Field-Programmable Custom Computing Machines"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2780246"
                        ],
                        "name": "Daniel S. McFarlin",
                        "slug": "Daniel-S.-McFarlin",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "McFarlin",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel S. McFarlin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2678938"
                        ],
                        "name": "Volodymyr Arbatov",
                        "slug": "Volodymyr-Arbatov",
                        "structuredName": {
                            "firstName": "Volodymyr",
                            "lastName": "Arbatov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Volodymyr Arbatov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1803350"
                        ],
                        "name": "F. Franchetti",
                        "slug": "F.-Franchetti",
                        "structuredName": {
                            "firstName": "Franz",
                            "lastName": "Franchetti",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Franchetti"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1690697"
                        ],
                        "name": "Markus P\u00fcschel",
                        "slug": "Markus-P\u00fcschel",
                        "structuredName": {
                            "firstName": "Markus",
                            "lastName": "P\u00fcschel",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Markus P\u00fcschel"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 16736311,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "4b38c90c66175f7b14af9c624821d0f322af0327",
            "isKey": false,
            "numCitedBy": 37,
            "numCiting": 44,
            "paperAbstract": {
                "fragments": [],
                "text": "The well-known shift to parallelism in CPUs is often associated with multicores. However another trend is equally salient: the increasing parallelism in per-core single-instruction multiple-date (SIMD) vector units. Intel's SSE and IBM's VMX (compatible to AltiVec) both offer 4-way (single precision) floating point, but the recent Intel instruction sets AVX and Larrabee (LRB) offer 8-way and 16-way, respectively. Compilation and optimization for vector extensions is hard, and often the achievable speed-up by using vectorizing compilers is small compared to hand-optimization using intrinsic function interfaces. Unfortunately, the complexity of these intrinsics interfaces increases considerably with the vector length, making hand-optimization a nightmare. In this paper, we present a peephole-based vectorization system that takes as input the vector instruction semantics and outputs a library of basic data reorganization blocks such as small transpositions and perfect shuffles that are needed in a variety of high performance computing applications. We evaluate the system by generating the blocks needed by the program generator Spiral for vectorized fast Fourier transforms (FFTs). With the generated FFTs we achieve a vectorization speed-up of 5.5--6.5 for 8-way AVX and 10--12.5 for 16-way LRB. For the latter instruction counts are used since no timing information is available. The combination of the proposed system and Spiral thus automates the production of high performance FFTs for current and future vector architectures."
            },
            "slug": "Automatic-SIMD-vectorization-of-fast-fourier-for-McFarlin-Arbatov",
            "title": {
                "fragments": [],
                "text": "Automatic SIMD vectorization of fast fourier transforms for the larrabee and AVX instruction sets"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "A peephole-based vectorization system that takes as input the vector instruction semantics and outputs a library of basic data reorganization blocks such as small transpositions and perfect shuffles that are needed in a variety of high performance computing applications is presented."
            },
            "venue": {
                "fragments": [],
                "text": "ICS '11"
            },
            "year": 2011
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2589074"
                        ],
                        "name": "Vasileios Porpodas",
                        "slug": "Vasileios-Porpodas",
                        "structuredName": {
                            "firstName": "Vasileios",
                            "lastName": "Porpodas",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vasileios Porpodas"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1412583691"
                        ],
                        "name": "A. Magni",
                        "slug": "A.-Magni",
                        "structuredName": {
                            "firstName": "Alberto",
                            "lastName": "Magni",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Magni"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32482326"
                        ],
                        "name": "Timothy M. Jones",
                        "slug": "Timothy-M.-Jones",
                        "structuredName": {
                            "firstName": "Timothy",
                            "lastName": "Jones",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Timothy M. Jones"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 8294881,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "58e8a28a202575f481c0723a54cf83972584b605",
            "isKey": false,
            "numCitedBy": 39,
            "numCiting": 36,
            "paperAbstract": {
                "fragments": [],
                "text": "The need to increase performance and power efficiency in modern processors has led to a wide adoption of SIMD vector units. All major vendors support vector instructions and the trend is pushing them to become wider and more powerful. However, writing code that makes efficient use of these units is hard and leads to platform-specific implementations. Compiler-based automatic vectorization is one solution for this problem. In particular the Superword-Level Parallelism (SLP) vectorization algorithm is the primary way to automatically generate vector code starting from straight-line scalar code. SLP is implemented in all major compilers, including GCC and LLVM. SLP relies on finding sequences of isomorphic instructions to pack together into vectors. However, this hinders the applicability of the algorithm as isomorphic code sequences are not common in practice. In this work we propose a solution to overcome this limitation. We introduce Padded SLP (PSLP), a novel vectorization algorithm that can vectorize code containing non-isomorphic instruction sequences. It injects a near-minimal number of redundant instructions into the code to transform non-isomorphic sequences into isomorphic ones. The padded instruction sequence can then be successfully vectorized. Our experiments show that PSLP improves vectorization coverage across a number of kernels and full benchmarks, decreasing execution time by up to 63%."
            },
            "slug": "PSLP:-Padded-SLP-automatic-vectorization-Porpodas-Magni",
            "title": {
                "fragments": [],
                "text": "PSLP: Padded SLP automatic vectorization"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "Padded SLP (PSLP) is introduced, a novel vectorization algorithm that can vectorize code containing non-isomorphic instruction sequences and improves vectorization coverage across a number of kernels and full benchmarks, decreasing execution time by up to 63%."
            },
            "venue": {
                "fragments": [],
                "text": "2015 IEEE/ACM International Symposium on Code Generation and Optimization (CGO)"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145176935"
                        ],
                        "name": "Xinmin Tian",
                        "slug": "Xinmin-Tian",
                        "structuredName": {
                            "firstName": "Xinmin",
                            "lastName": "Tian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xinmin Tian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144810291"
                        ],
                        "name": "H. Saito",
                        "slug": "H.-Saito",
                        "structuredName": {
                            "firstName": "Hideki",
                            "lastName": "Saito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Saito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "33647248"
                        ],
                        "name": "E. Su",
                        "slug": "E.-Su",
                        "structuredName": {
                            "firstName": "Ernesto",
                            "lastName": "Su",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Su"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8839928"
                        ],
                        "name": "A. Gaba",
                        "slug": "A.-Gaba",
                        "structuredName": {
                            "firstName": "Abhinav",
                            "lastName": "Gaba",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Gaba"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "33831549"
                        ],
                        "name": "Matt Masten",
                        "slug": "Matt-Masten",
                        "structuredName": {
                            "firstName": "Matt",
                            "lastName": "Masten",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matt Masten"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2111323482"
                        ],
                        "name": "Eric N. Garcia",
                        "slug": "Eric-N.-Garcia",
                        "structuredName": {
                            "firstName": "Eric",
                            "lastName": "Garcia",
                            "middleNames": [
                                "N."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eric N. Garcia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38737579"
                        ],
                        "name": "A. Zaks",
                        "slug": "A.-Zaks",
                        "structuredName": {
                            "firstName": "Ayal",
                            "lastName": "Zaks",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Zaks"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 20204443,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "a57b96682eca72df285ac73825dadfc5207dfa53",
            "isKey": false,
            "numCitedBy": 12,
            "numCiting": 4,
            "paperAbstract": {
                "fragments": [],
                "text": "LLVM has become an integral part of the software-development ecosystem for developing advanced compilers, high-performance computing software and tools. This paper presents a small set of LLVM IR extensions for explicitly parallel, vector, and offloading program constructs. The proposed LLVM IR extensions enable the lowering and transformation in the LLVM middle-end for the OpenMP\u00ae C/C++ and Fortran API, and any other explicitly parallel/simd constructs in high-level source languages. This paper discusses the rationale of the LLVM IR extensions to support OpenMP constructs and clauses, and presents the LLVM intrinsic functions, the framework for parallelization, vectorization, and offloading, and the sandwich scheme to model the OpenMP parallel, simd, offloading and data-attribute semantics under the SSA form. Examples are given to show our implementation in the LLVM middle-end passes, which paves the way to achieve a better interaction with scalar optimizations, vectorization, and loop optimizations, and thus resulting in higher performance."
            },
            "slug": "LLVM-Framework-and-IR-Extensions-for-SIMD-and-Tian-Saito",
            "title": {
                "fragments": [],
                "text": "LLVM Framework and IR Extensions for Parallelization, SIMD Vectorization and Offloading"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "The rationale of the LLVM IR extensions to support OpenMP constructs and clauses is discussed, and the framework for parallelization, vectorization, and offloading is presented and the sandwich scheme to model the OpenMP parallel, simd, offloading and data-attribute semantics under the SSA form is presented."
            },
            "venue": {
                "fragments": [],
                "text": "2016 Third Workshop on the LLVM Compiler Infrastructure in HPC (LLVM-HPC)"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1722156"
                        ],
                        "name": "Y. Bj\u00f6rnsson",
                        "slug": "Y.-Bj\u00f6rnsson",
                        "structuredName": {
                            "firstName": "Yngvi",
                            "lastName": "Bj\u00f6rnsson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Y. Bj\u00f6rnsson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2460786"
                        ],
                        "name": "Hilmar Finnsson",
                        "slug": "Hilmar-Finnsson",
                        "structuredName": {
                            "firstName": "Hilmar",
                            "lastName": "Finnsson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hilmar Finnsson"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 64,
                                "start": 61
                            }
                        ],
                        "text": "The winner is determined based on the best cost so far as in [9]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 1268410,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "07d017e3595400bb5436d4580f100aaf566092c8",
            "isKey": false,
            "numCitedBy": 155,
            "numCiting": 35,
            "paperAbstract": {
                "fragments": [],
                "text": "The aim of general game playing (GGP) is to create intelligent agents that can automatically learn how to play many different games at an expert level without any human intervention. The traditional design model for GGP agents has been to use a minimax-based game-tree search augmented with an automatically learned heuristic evaluation function. The first successful GGP agents all followed that approach. In this paper, we describe CadiaPlayer, a GGP agent employing a radically different approach: instead of a traditional game-tree search, it uses Monte Carlo simulations for its move decisions. Furthermore, we empirically evaluate different simulation-based approaches on a wide variety of games, introduce a domain-independent enhancement for automatically learning search-control knowledge to guide the simulation playouts, and show how to adapt the simulation searches to be more effective in single-agent games. CadiaPlayer has already proven its effectiveness by winning the 2007 and 2008 Association for the Advancement of Artificial Intelligence (AAAI) GGP competitions."
            },
            "slug": "CadiaPlayer:-A-Simulation-Based-General-Game-Player-Bj\u00f6rnsson-Finnsson",
            "title": {
                "fragments": [],
                "text": "CadiaPlayer: A Simulation-Based General Game Player"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "CadiaPlayer is described, a GGP agent employing a radically different approach: instead of a traditional game-tree search, it uses Monte Carlo simulations for its move decisions and is empirically evaluate different simulation-based approaches on a wide variety of games."
            },
            "venue": {
                "fragments": [],
                "text": "IEEE Transactions on Computational Intelligence and AI in Games"
            },
            "year": 2009
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2978162"
                        ],
                        "name": "Ulysse Beaugnon",
                        "slug": "Ulysse-Beaugnon",
                        "structuredName": {
                            "firstName": "Ulysse",
                            "lastName": "Beaugnon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ulysse Beaugnon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152835390"
                        ],
                        "name": "Michael Kruse",
                        "slug": "Michael-Kruse",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Kruse",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michael Kruse"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144122184"
                        ],
                        "name": "Chandan Reddy",
                        "slug": "Chandan-Reddy",
                        "structuredName": {
                            "firstName": "Chandan",
                            "lastName": "Reddy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chandan Reddy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34781062"
                        ],
                        "name": "A. Betts",
                        "slug": "A.-Betts",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Betts",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Betts"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1734519"
                        ],
                        "name": "A. Donaldson",
                        "slug": "A.-Donaldson",
                        "structuredName": {
                            "firstName": "Alastair",
                            "lastName": "Donaldson",
                            "middleNames": [
                                "F."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Donaldson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2303821"
                        ],
                        "name": "J. Ketema",
                        "slug": "J.-Ketema",
                        "structuredName": {
                            "firstName": "Jeroen",
                            "lastName": "Ketema",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ketema"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1796386"
                        ],
                        "name": "J. Absar",
                        "slug": "J.-Absar",
                        "structuredName": {
                            "firstName": "Javed",
                            "lastName": "Absar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Absar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1807282"
                        ],
                        "name": "S. V. Haastregt",
                        "slug": "S.-V.-Haastregt",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Haastregt",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. V. Haastregt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145510407"
                        ],
                        "name": "Alexey Kravets",
                        "slug": "Alexey-Kravets",
                        "structuredName": {
                            "firstName": "Alexey",
                            "lastName": "Kravets",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexey Kravets"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1777324"
                        ],
                        "name": "Anton Lokhmotov",
                        "slug": "Anton-Lokhmotov",
                        "structuredName": {
                            "firstName": "Anton",
                            "lastName": "Lokhmotov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anton Lokhmotov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2061545111"
                        ],
                        "name": "R. David",
                        "slug": "R.-David",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "David",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. David"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1988507"
                        ],
                        "name": "Elnar Hajiyev",
                        "slug": "Elnar-Hajiyev",
                        "structuredName": {
                            "firstName": "Elnar",
                            "lastName": "Hajiyev",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Elnar Hajiyev"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 120,
                                "start": 102
                            }
                        ],
                        "text": "Many compilers that use loop polyhedral analysis to perform automatic scheduling of affine loop nests [7,8,10,18,36, 50]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 16354348,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "e61e896ee96c8d6ae13c34c9d66e8ee879489f75",
            "isKey": false,
            "numCitedBy": 90,
            "numCiting": 39,
            "paperAbstract": {
                "fragments": [],
                "text": "Programming accelerators such as GPUs with low-level APIs and languages such as OpenCL and CUDA is difficult, error-prone, and not performance-portable. Automatic parallelization and domain specific languages (DSLs) have been proposed to hide complexity and regain performance portability. We present PENCIL, a rigorously-defined subset of GNU C99-enriched with additional language constructs-that enables compilers to exploit parallelism and produce highly optimized code when targeting accelerators. PENCIL aims to serve both as a portable implementation language for libraries, and as a target language for DSL compilers. We implemented a PENCIL-to-OpenCL backend using a state-of-the-art polyhedral compiler. The polyhedral compiler, extended to handle data-dependent control flow and non-affine array accesses, generates optimized OpenCL code. To demonstrate the potential and performance portability of PENCIL and the PENCIL-to-OpenCL compiler, we consider a number of image processing kernels, a set of benchmarks from the Rodinia and SHOC suites, and DSL embedding scenarios for linear algebra (BLAS) and signal processing radar applications (SpearDE), and present experimental results for four GPU platforms: AMD Radeon HD 5670 and R9 285, NVIDIA GTX 470, and ARM Mali-T604."
            },
            "slug": "PENCIL:-A-Platform-Neutral-Compute-Intermediate-for-Baghdadi-Beaugnon",
            "title": {
                "fragments": [],
                "text": "PENCIL: A Platform-Neutral Compute Intermediate Language for Accelerator Programming"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "PENCIL, a rigorously-defined subset of GNU C99-enriched with additional language constructs-that enables compilers to exploit parallelism and produce highly optimized code when targeting accelerators, is presented."
            },
            "venue": {
                "fragments": [],
                "text": "2015 International Conference on Parallel Architecture and Compilation (PACT)"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2589074"
                        ],
                        "name": "Vasileios Porpodas",
                        "slug": "Vasileios-Porpodas",
                        "structuredName": {
                            "firstName": "Vasileios",
                            "lastName": "Porpodas",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vasileios Porpodas"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32482326"
                        ],
                        "name": "Timothy M. Jones",
                        "slug": "Timothy-M.-Jones",
                        "structuredName": {
                            "firstName": "Timothy",
                            "lastName": "Jones",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Timothy M. Jones"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 1808223,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "5332810c642f5e9e6985525d3f8efa3c645cb161",
            "isKey": false,
            "numCitedBy": 31,
            "numCiting": 52,
            "paperAbstract": {
                "fragments": [],
                "text": "SIMD vectors are widely adopted in modern general purpose processors as they can boost performance and energy efficiency for certain applications. Compiler-based automatic vectorization is one approach for generating codethat makes efficient use of the SIMD units, and has the benefit of avoiding hand development and platform-specific optimizations. The Superword-Level Parallelism (SLP) vectorization algorithm is the most well-known implementation of automatic vectorization when starting from straight-line scalar code, and is implemented in several major compilers. The existing SLP algorithm greedily packs scalar instructions into vectors starting from stores and traversing the data dependence graph upwards until it reaches loads or non-vectorizable instructions. Choosing whether to vectorize is a one-off decision for the whole graph that has been generated. This, however, is sub-optimal because the graph may contain code that is harmful to vectorization due to the need to move data from scalar registers into vectors. The decision does not consider the potential benefits of throttling the graph by removing this harmful code. In this work we propose asolution to overcome this limitation by introducing Throttled SLP (TSLP), a novel vectorization algorithm that finds the optimal graph to vectorize, forcing vectorization to stop earlier whenever this is beneficial. Our experiments show that TSLP improves performance across a number of kernels extractedfrom widely-used benchmark suites, decreasing execution time compared to SLP by 9% on average and up to 14% in the best case."
            },
            "slug": "Throttling-Automatic-Vectorization:-When-Less-is-Porpodas-Jones",
            "title": {
                "fragments": [],
                "text": "Throttling Automatic Vectorization: When Less is More"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "Throttled SLP (TSLP) is introduced, a novel vectorization algorithm that finds the optimal graph to vectorize, forcing vectorization to stop earlier whenever this is beneficial, and experiments show that TSLP improves performance across a number of kernels extracted from widely-used benchmark suites."
            },
            "venue": {
                "fragments": [],
                "text": "2015 International Conference on Parallel Architecture and Compilation (PACT)"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144905525"
                        ],
                        "name": "S. Larsen",
                        "slug": "S.-Larsen",
                        "structuredName": {
                            "firstName": "Samuel",
                            "lastName": "Larsen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Larsen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 5164212,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "84b6705e6f6ca2394061f5027f22744949ad9aae",
            "isKey": false,
            "numCitedBy": 385,
            "numCiting": 69,
            "paperAbstract": {
                "fragments": [],
                "text": "Increasing focus on multimedia applications has prompted the additionof multimedia extensions to most existing general purpose microprocessors. This added functionality comes primarily with the addition of short SIMD instructions. Unfortunately, access to these instructions is limited to in-line assembly and library calls. Generally, it has been assumed that vector compilers provide the most promising means of exploiting multimedia instructions. Although vectorization technology is well understood, it is inherently complex and fragile. In addition, it is incapable of locating SIMD-style parallelism within a basic block.\nIn this paper we introduce the concept of Superword Level Parallelism (SLP) ,a novel way of viewing parallelism in multimedia and scientific applications. We believe SLPP is fundamentally different from the loop level parallelism exploited by traditional vector processing, and therefore demands a new method of extracting it. We have developed a simple and robust compiler for detecting SLPP that targets basic blocks rather than loop nests. As with techniques designed to extract ILP, ours is able to exploit parallelism both across loop iterations and within basic blocks. The result is an algorithm that provides excellent performance in several application domains. In our experiments, dynamic instruction counts were reduced by 46%. Speedups ranged from 1.24 to 6.70."
            },
            "slug": "Exploiting-superword-level-parallelism-with-sets-Larsen-Amarasinghe",
            "title": {
                "fragments": [],
                "text": "Exploiting superword level parallelism with multimedia instruction sets"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This paper has developed a simple and robust compiler for detecting SLPP that targets basic blocks rather than loop nests, and is able to exploit parallelism both across loop iterations and within basic blocks."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '00"
            },
            "year": 2000
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1765246"
                        ],
                        "name": "Chris Lattner",
                        "slug": "Chris-Lattner",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Lattner",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Lattner"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47305537"
                        ],
                        "name": "J. Pienaar",
                        "slug": "J.-Pienaar",
                        "structuredName": {
                            "firstName": "Jacques",
                            "lastName": "Pienaar",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Pienaar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9426225"
                        ],
                        "name": "M. Amini",
                        "slug": "M.-Amini",
                        "structuredName": {
                            "firstName": "Mehdi",
                            "lastName": "Amini",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Amini"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1505470866"
                        ],
                        "name": "River Riddle",
                        "slug": "River-Riddle",
                        "structuredName": {
                            "firstName": "River",
                            "lastName": "Riddle",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "River Riddle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1774432"
                        ],
                        "name": "T. Shpeisman",
                        "slug": "T.-Shpeisman",
                        "structuredName": {
                            "firstName": "Tatiana",
                            "lastName": "Shpeisman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Shpeisman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "36347083"
                        ],
                        "name": "Andy Davis",
                        "slug": "Andy-Davis",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Davis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Davis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2054833547"
                        ],
                        "name": "O. Zinenko",
                        "slug": "O.-Zinenko",
                        "structuredName": {
                            "firstName": "Oleksandr",
                            "lastName": "Zinenko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Zinenko"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 211296505,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "a38e4c9772172beb56c184a9b5c8fbb77cf18457",
            "isKey": false,
            "numCitedBy": 110,
            "numCiting": 59,
            "paperAbstract": {
                "fragments": [],
                "text": "This work presents MLIR, a novel approach to building reusable and extensible compiler infrastructure. MLIR aims to address software fragmentation, improve compilation for heterogeneous hardware, significantly reduce the cost of building domain specific compilers, and aid in connecting existing compilers together. MLIR facilitates the design and implementation of code generators, translators and optimizers at different levels of abstraction and also across application domains, hardware targets and execution environments. The contribution of this work includes (1) discussion of MLIR as a research artifact, built for extension and evolution, and identifying the challenges and opportunities posed by this novel design point in design, semantics, optimization specification, system, and engineering. (2) evaluation of MLIR as a generalized infrastructure that reduces the cost of building compilers-describing diverse use-cases to show research and educational opportunities for future programming languages, compilers, execution environments, and computer architecture. The paper also presents the rationale for MLIR, its original design principles, structures and semantics."
            },
            "slug": "MLIR:-A-Compiler-Infrastructure-for-the-End-of-Law-Lattner-Pienaar",
            "title": {
                "fragments": [],
                "text": "MLIR: A Compiler Infrastructure for the End of Moore's Law"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "Evaluation of MLIR as a generalized infrastructure that reduces the cost of building compilers-describing diverse use-cases to show research and educational opportunities for future programming languages, compilers, execution environments, and computer architecture."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2020
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Speech understanding systems: A summary of results of the five-year research effort. Department of Computer Science. Carnegie-Mellon University"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 21,
                                "start": 17
                            }
                        ],
                        "text": "One objective of MLIR is to represent kernels in a form suitable for optimization, and allow easy integration of search algorithms such as reinforcement learning, MCTS, and beam search."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 51,
                                "start": 47
                            }
                        ],
                        "text": "Multi-Level Intermediate Representation (MLIR) [31] has been recently proposed to help with scaling the performance with the end of Moore\u2019s law."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Zinenko. Mlir: A compiler infrastructure for the end of moore\u2019s law"
            },
            "venue": {
                "fragments": [],
                "text": "arXiv preprint arXiv:2002.11054,"
            },
            "year": 2020
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 130,
                                "start": 126
                            }
                        ],
                        "text": "To compile the benchmark applications, we used Halide\u2019s rudimentary \u201cRunGen\u201d wrapper, described in the official documentation [27]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Running and benchmarking halide generators. Halide GitHub Repository: https://github.com/halide/Halide/blob/master/README _rungen.md"
            },
            "venue": {
                "fragments": [],
                "text": "Aug 2019"
            },
            "year": 2019
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 93,
                                "start": 89
                            }
                        ],
                        "text": "It is widely used for the sequential decision-making process, such as speech recognition [43] and software scheduling [1]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 16,
                                "start": 12
                            }
                        ],
                        "text": "Beam search [43] is a heuristic algorithm that explores a decision tree and searches for the optimal decisions by expanding a limited number of children with the highest intermediate rewards."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Speech understanding systems: A summary of results of the five-year research"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1977
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 17,
                                "start": 13
                            }
                        ],
                        "text": "According to [25], MCTS offers significant advantages over alpha-beta pruning that minimizes the search space in the scenario where there is no good evaluation function."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Arimaa challenge-comparission study of mcts versus alpha-beta methods"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2011
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Running and benchmarking halide generators"
            },
            "venue": {
                "fragments": [],
                "text": "Halide GitHub"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Compiler autovectorization with imitation learning"
            },
            "venue": {
                "fragments": [],
                "text": "In Advances in Neural Information Processing Systems,"
            },
            "year": 2019
        }
    ],
    "meta_info": {
        "citationIntent": "all",
        "citationIntentCount": {
            "background": 26,
            "methodology": 18
        },
        "citationType": "citedPapers",
        "pageNumber": 1,
        "requestedPageSize": 10,
        "sort": "relevance",
        "totalCitations": 54,
        "totalPages": 6
    },
    "page_url": "https://www.semanticscholar.org/paper/ProTuner:-Tuning-Programs-with-Monte-Carlo-Tree-Haj-Ali-Gen\u00e7/190b630fcd80771fefd0a48f9646a3496d6d3caa?sort=total-citations"
}