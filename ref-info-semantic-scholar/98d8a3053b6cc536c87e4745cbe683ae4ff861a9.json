{
    "links": [
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144169965"
                        ],
                        "name": "Wei-Fen Lin",
                        "slug": "Wei-Fen-Lin",
                        "structuredName": {
                            "firstName": "Wei-Fen",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wei-Fen Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153937154"
                        ],
                        "name": "Der-Yu Tsai",
                        "slug": "Der-Yu-Tsai",
                        "structuredName": {
                            "firstName": "Der-Yu",
                            "lastName": "Tsai",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Der-Yu Tsai"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152554627"
                        ],
                        "name": "Luba Tang",
                        "slug": "Luba-Tang",
                        "structuredName": {
                            "firstName": "Luba",
                            "lastName": "Tang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luba Tang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3141137"
                        ],
                        "name": "C. Hsieh",
                        "slug": "C.-Hsieh",
                        "structuredName": {
                            "firstName": "Cheng-Tao",
                            "lastName": "Hsieh",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Hsieh"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48316770"
                        ],
                        "name": "Cheng-Yi Chou",
                        "slug": "Cheng-Yi-Chou",
                        "structuredName": {
                            "firstName": "Cheng-Yi",
                            "lastName": "Chou",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Cheng-Yi Chou"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152472739"
                        ],
                        "name": "P. Chang",
                        "slug": "P.-Chang",
                        "structuredName": {
                            "firstName": "Ping-Hao",
                            "lastName": "Chang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Chang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "152570607"
                        ],
                        "name": "Luis Hsu",
                        "slug": "Luis-Hsu",
                        "structuredName": {
                            "firstName": "Luis",
                            "lastName": "Hsu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luis Hsu"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": " DL program. 2.3.Deep Learning Compilers DL frameworks have adopted compilers to tackle both performance and portability for existing applications, most notably XLA [55], Glow [38], nGraph [10], ONNC [24], PlaidML [9], and ModelCompiler. These graph compilers use computation graph IRs and provide lowering onto a variety of targets. Often graph compilers only perform high-level optimizations and then o"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 198929303,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8fdff204a42ddf0d3e0e33adf3f061a02b7824a0",
            "isKey": true,
            "numCitedBy": 20,
            "numCiting": 6,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents ONNC (Open Neural Network Compiler), a retargetable compilation framework designed to connect ONNX (Open Neural Network Exchange) models to proprietary deep learning accelerators (DLAs). The intermediate representations (IRs) of ONNC have one-to-one mapping to ONNX IRs, thus making porting ONNC to proprietary DLAs much simpler than other compilation frameworks such as TVM and Glow especially for hardware with coarse-grained operators that are not part of the generic IRs in the LLVM backend. ONNC also has a flexible pass manager designed to support compiler optimizations at all levels. A docker image of ONNC bundled with a Vanilla backend is released with this paper to enable fast porting to new hardware targets. To illustrate how an ONNC-based toolkit guides our research and development in DLA design, we present a case study on compiler optimizations for activation memory consumption. The study shows that the Best-Fit algorithm with a proposed heuristic and a reordering scheme may act as a near-optimal strategy, getting the memory consumption close to the ideal lower bound in 11 of 12 models from the ONNX model zoo. To our best knowledge, ONNC is the first open source compilation framework that is specially designed to support the ONNX-based models for both commercial and research projects for deep learning applications."
            },
            "slug": "ONNC:-A-Compilation-Framework-Connecting-ONNX-to-Lin-Tsai",
            "title": {
                "fragments": [],
                "text": "ONNC: A Compilation Framework Connecting ONNX to Proprietary Deep Learning Accelerators"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "The study shows that the Best-Fit algorithm with a proposed heuristic and a reordering scheme may act as a near-optimal strategy, getting the memory consumption close to the ideal lower bound in 11 of 12 models from the ONNX model zoo."
            },
            "venue": {
                "fragments": [],
                "text": "2019 IEEE International Conference on Artificial Intelligence Circuits and Systems (AICAS)"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3121592"
                        ],
                        "name": "Nadav Rotem",
                        "slug": "Nadav-Rotem",
                        "structuredName": {
                            "firstName": "Nadav",
                            "lastName": "Rotem",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nadav Rotem"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8855702"
                        ],
                        "name": "Jordan Fix",
                        "slug": "Jordan-Fix",
                        "structuredName": {
                            "firstName": "Jordan",
                            "lastName": "Fix",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jordan Fix"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46247320"
                        ],
                        "name": "Saleem Abdulrasool",
                        "slug": "Saleem-Abdulrasool",
                        "structuredName": {
                            "firstName": "Saleem",
                            "lastName": "Abdulrasool",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saleem Abdulrasool"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46193056"
                        ],
                        "name": "Summer Deng",
                        "slug": "Summer-Deng",
                        "structuredName": {
                            "firstName": "Summer",
                            "lastName": "Deng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Summer Deng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46257780"
                        ],
                        "name": "Roman Dzhabarov",
                        "slug": "Roman-Dzhabarov",
                        "structuredName": {
                            "firstName": "Roman",
                            "lastName": "Dzhabarov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Roman Dzhabarov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153509089"
                        ],
                        "name": "James Hegeman",
                        "slug": "James-Hegeman",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Hegeman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James Hegeman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46211183"
                        ],
                        "name": "Roman Levenstein",
                        "slug": "Roman-Levenstein",
                        "structuredName": {
                            "firstName": "Roman",
                            "lastName": "Levenstein",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Roman Levenstein"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2130533"
                        ],
                        "name": "Bertrand A. Maher",
                        "slug": "Bertrand-A.-Maher",
                        "structuredName": {
                            "firstName": "Bertrand",
                            "lastName": "Maher",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bertrand A. Maher"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143758120"
                        ],
                        "name": "N. Satish",
                        "slug": "N.-Satish",
                        "structuredName": {
                            "firstName": "Nadathur",
                            "lastName": "Satish",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Satish"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2925676"
                        ],
                        "name": "Jakob R. Olesen",
                        "slug": "Jakob-R.-Olesen",
                        "structuredName": {
                            "firstName": "Jakob",
                            "lastName": "Olesen",
                            "middleNames": [
                                "R."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jakob R. Olesen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1686843"
                        ],
                        "name": "Jongsoo Park",
                        "slug": "Jongsoo-Park",
                        "structuredName": {
                            "firstName": "Jongsoo",
                            "lastName": "Park",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jongsoo Park"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46250117"
                        ],
                        "name": "Artem Rakhov",
                        "slug": "Artem-Rakhov",
                        "structuredName": {
                            "firstName": "Artem",
                            "lastName": "Rakhov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Artem Rakhov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1711231"
                        ],
                        "name": "M. Smelyanskiy",
                        "slug": "M.-Smelyanskiy",
                        "structuredName": {
                            "firstName": "Mikhail",
                            "lastName": "Smelyanskiy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Smelyanskiy"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 129,
                                "start": 112
                            }
                        ],
                        "text": "As a result, major projects are repeatedly forced to patch or even fork core framework IRs [Looks et al. 2017b; Rotem et al. 2018; Shankar and Dobson 2017; TensorFlow Team 2017; Torch Team 2018; van Merri\u00ebnboer et al. 2017; XLA Team 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 104,
                                "start": 87
                            }
                        ],
                        "text": "Facebook is developing an ML stack comprised of many projects including PyTorch, Glow [Rotem et al. 2018], and Caffe2 [Caffe2 Team 2018]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 202,
                                "start": 185
                            }
                        ],
                        "text": "L G\n] 1\n7 A\npr 2\n01 9\n2 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nPaszke et al. 2017; Rotem et al. 2018; Tokui et al. 2015; van Merri\u00ebnboer et al. 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 36,
                                "start": 19
                            }
                        ],
                        "text": "The Glow compiler [Rotem et al. 2018] is similar to NNVM and is intended to be a compiler for high-level computation graphs, for hardware accelerators."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 23823854,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0261195ae7e1545caefb0ea7afb92bd66bfbb790",
            "isKey": true,
            "numCitedBy": 164,
            "numCiting": 19,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents the design of Glow, a machine learning compiler for heterogeneous hardware. It is a pragmatic approach to compilation that enables the generation of highly optimized code for multiple targets. Glow lowers the traditional neural network dataflow graph into a two-phase strongly-typed intermediate representation. The high-level intermediate representation allows the optimizer to perform domain-specific optimizations. The lower-level instruction-based address-only intermediate representation allows the compiler to perform memory-related optimizations, such as instruction scheduling, static memory allocation and copy elimination. At the lowest level, the optimizer performs machine-specific code generation to take advantage of specialized hardware features. Glow features a lowering phase which enables the compiler to support a high number of input operators as well as a large number of hardware targets by eliminating the need to implement all operators on all targets. The lowering phase is designed to reduce the input space and allow new hardware backends to focus on a small number of linear algebra primitives."
            },
            "slug": "Glow:-Graph-Lowering-Compiler-Techniques-for-Neural-Rotem-Fix",
            "title": {
                "fragments": [],
                "text": "Glow: Graph Lowering Compiler Techniques for Neural Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "Glow features a lowering phase which enables the compiler to support a high number of input operators as well as a large number of hardware targets by eliminating the need to implement all operators on all targets."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1800919"
                        ],
                        "name": "Nicolas Vasilache",
                        "slug": "Nicolas-Vasilache",
                        "structuredName": {
                            "firstName": "Nicolas",
                            "lastName": "Vasilache",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicolas Vasilache"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2054833547"
                        ],
                        "name": "O. Zinenko",
                        "slug": "O.-Zinenko",
                        "structuredName": {
                            "firstName": "Oleksandr",
                            "lastName": "Zinenko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "O. Zinenko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2097631216"
                        ],
                        "name": "Theodoros Theodoridis",
                        "slug": "Theodoros-Theodoridis",
                        "structuredName": {
                            "firstName": "Theodoros",
                            "lastName": "Theodoridis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Theodoros Theodoridis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47316088"
                        ],
                        "name": "Priya Goyal",
                        "slug": "Priya-Goyal",
                        "structuredName": {
                            "firstName": "Priya",
                            "lastName": "Goyal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Priya Goyal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2375710"
                        ],
                        "name": "Zach DeVito",
                        "slug": "Zach-DeVito",
                        "structuredName": {
                            "firstName": "Zach",
                            "lastName": "DeVito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zach DeVito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "16521420"
                        ],
                        "name": "William S. Moses",
                        "slug": "William-S.-Moses",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Moses",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William S. Moses"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": " produces machine-speci\ufb01c code by decomposing the problem of code generation into multiple distinct phases. Relay translates all operators into TVM expressions to produce dense linear algebra kernels [7, 53, 35]. TVM produces low-level operators that expect a \ufb01xed calling convention, as well as preallocated inputs and outputs. The result is an object \ufb01le containing hardware-speci\ufb01c implementations of all ope"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "perations such as matrix multiplication or convolution. There are a number of competing approaches, both from academic and commercial entities, such as TVM [7], Halide [35], Tensor Comprehensions(TC) [53], and Diesel [11]. The most notable designs are either inspired by the compute-schedule split introduced by Halide and adapted by TVM, or the polyhedral framework, as used by TC and Diesel. Operator c"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 44014988,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "cae9d90524cccac5081666985d5d055b71697cee",
            "isKey": false,
            "numCitedBy": 284,
            "numCiting": 102,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning models with convolutional and recurrent networks are now ubiquitous and analyze massive amounts of audio, image, video, text and graph data, with applications in automatic translation, speech-to-text, scene understanding, ranking user preferences, ad placement, etc. Competing frameworks for building these networks such as TensorFlow, Chainer, CNTK, Torch/PyTorch, Caffe1/2, MXNet and Theano, explore different tradeoffs between usability and expressiveness, research or production orientation and supported hardware. They operate on a DAG of computational operators, wrapping high-performance libraries such as CUDNN (for NVIDIA GPUs) or NNPACK (for various CPUs), and automate memory allocation, synchronization, distribution. Custom operators are needed where the computation does not fit existing high-performance library calls, usually at a high engineering cost. This is frequently required when new operators are invented by researchers: such operators suffer a severe performance penalty, which limits the pace of innovation. Furthermore, even if there is an existing runtime call these frameworks can use, it often doesn't offer optimal performance for a user's particular network architecture and dataset, missing optimizations between operators as well as optimizations that can be done knowing the size and shape of data. Our contributions include (1) a language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, (2) a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, also providing optimizations such as operator fusion and specialization for specific sizes, (3) a compilation cache populated by an autotuner. [Abstract cutoff]"
            },
            "slug": "Tensor-Comprehensions:-Framework-Agnostic-Machine-Vasilache-Zinenko",
            "title": {
                "fragments": [],
                "text": "Tensor Comprehensions: Framework-Agnostic High-Performance Machine Learning Abstractions"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "A language close to the mathematics of deep learning called Tensor Comprehensions offering both imperative and declarative styles, a polyhedral Just-In-Time compiler to convert a mathematical description of a deep learning DAG into a CUDA kernel with delegated memory management and synchronization, and a compilation cache populated by an autotuner are contributed."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39978391"
                        ],
                        "name": "Yangqing Jia",
                        "slug": "Yangqing-Jia",
                        "structuredName": {
                            "firstName": "Yangqing",
                            "lastName": "Jia",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yangqing Jia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1782282"
                        ],
                        "name": "Evan Shelhamer",
                        "slug": "Evan-Shelhamer",
                        "structuredName": {
                            "firstName": "Evan",
                            "lastName": "Shelhamer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Evan Shelhamer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "7408951"
                        ],
                        "name": "Jeff Donahue",
                        "slug": "Jeff-Donahue",
                        "structuredName": {
                            "firstName": "Jeff",
                            "lastName": "Donahue",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jeff Donahue"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3049736"
                        ],
                        "name": "Sergey Karayev",
                        "slug": "Sergey-Karayev",
                        "structuredName": {
                            "firstName": "Sergey",
                            "lastName": "Karayev",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sergey Karayev"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2117314646"
                        ],
                        "name": "Jonathan Long",
                        "slug": "Jonathan-Long",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Long",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Long"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2983898"
                        ],
                        "name": "Ross B. Girshick",
                        "slug": "Ross-B.-Girshick",
                        "structuredName": {
                            "firstName": "Ross",
                            "lastName": "Girshick",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ross B. Girshick"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1687120"
                        ],
                        "name": "S. Guadarrama",
                        "slug": "S.-Guadarrama",
                        "structuredName": {
                            "firstName": "Sergio",
                            "lastName": "Guadarrama",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Guadarrama"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1753210"
                        ],
                        "name": "Trevor Darrell",
                        "slug": "Trevor-Darrell",
                        "structuredName": {
                            "firstName": "Trevor",
                            "lastName": "Darrell",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Trevor Darrell"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "meworks which use static graphs are said to be de\ufb01ne-and-run frameworks, whereas frameworks which use dynamic graphs are said to be de\ufb01ne-by-run frameworks. De\ufb01ne-And-Run Frameworks TensorFlow, Caffe [19], and Theano [5] are de\ufb01ne-and-run frameworks. Static graphs represent a whole-program, enabling optimization and simpli\ufb01ed deployment, by removing the need for a host language like Python. TensorFlow"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 1799558,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "6bdb186ec4726e00a8051119636d4df3b94043b5",
            "isKey": false,
            "numCitedBy": 13814,
            "numCiting": 16,
            "paperAbstract": {
                "fragments": [],
                "text": "Caffe provides multimedia scientists and practitioners with a clean and modifiable framework for state-of-the-art deep learning algorithms and a collection of reference models. The framework is a BSD-licensed C++ library with Python and MATLAB bindings for training and deploying general-purpose convolutional neural networks and other deep models efficiently on commodity architectures. Caffe fits industry and internet-scale media needs by CUDA GPU computation, processing over 40 million images a day on a single K40 or Titan GPU (approx 2 ms per image). By separating model representation from actual implementation, Caffe allows experimentation and seamless switching among platforms for ease of development and deployment from prototyping machines to cloud environments. Caffe is maintained and developed by the Berkeley Vision and Learning Center (BVLC) with the help of an active community of contributors on GitHub. It powers ongoing research projects, large-scale industrial applications, and startup prototypes in vision, speech, and multimedia."
            },
            "slug": "Caffe:-Convolutional-Architecture-for-Fast-Feature-Jia-Shelhamer",
            "title": {
                "fragments": [],
                "text": "Caffe: Convolutional Architecture for Fast Feature Embedding"
            },
            "tldr": {
                "abstractSimilarityScore": 77,
                "text": "Caffe provides multimedia scientists and practitioners with a clean and modifiable framework for state-of-the-art deep learning algorithms and a collection of reference models for training and deploying general-purpose convolutional neural networks and other deep models efficiently on commodity architectures."
            },
            "venue": {
                "fragments": [],
                "text": "ACM Multimedia"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40497400"
                        ],
                        "name": "D. Moldovan",
                        "slug": "D.-Moldovan",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Moldovan",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Moldovan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "117235241"
                        ],
                        "name": "James M. Decker",
                        "slug": "James-M.-Decker",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Decker",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James M. Decker"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1682816"
                        ],
                        "name": "Fei Wang",
                        "slug": "Fei-Wang",
                        "structuredName": {
                            "firstName": "Fei",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fei Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2115826274"
                        ],
                        "name": "A. A. Johnson",
                        "slug": "A.-A.-Johnson",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Johnson",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. A. Johnson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145710580"
                        ],
                        "name": "Brian K. Lee",
                        "slug": "Brian-K.-Lee",
                        "structuredName": {
                            "firstName": "Brian",
                            "lastName": "Lee",
                            "middleNames": [
                                "K."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Brian K. Lee"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "81408931"
                        ],
                        "name": "Zachary Nado",
                        "slug": "Zachary-Nado",
                        "structuredName": {
                            "firstName": "Zachary",
                            "lastName": "Nado",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zachary Nado"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1733143"
                        ],
                        "name": "D. Sculley",
                        "slug": "D.-Sculley",
                        "structuredName": {
                            "firstName": "D.",
                            "lastName": "Sculley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Sculley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1712987"
                        ],
                        "name": "Tiark Rompf",
                        "slug": "Tiark-Rompf",
                        "structuredName": {
                            "firstName": "Tiark",
                            "lastName": "Rompf",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tiark Rompf"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49398909"
                        ],
                        "name": "Alexander B. Wiltschko",
                        "slug": "Alexander-B.-Wiltschko",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Wiltschko",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander B. Wiltschko"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 53018478,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9f7d20a93278264ea0393def068f1702c1576082",
            "isKey": false,
            "numCitedBy": 29,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "There is a perceived trade-off between machine learning code that is easy to write, and machine learning code that is scalable or fast to execute. In machine learning, imperative style libraries like Autograd and PyTorch are easy to write, but suffer from high interpretive overhead and are not easily deployable in production or mobile settings. Graph-based libraries like TensorFlow and Theano benefit from whole-program optimization and can be deployed broadly, but make expressing complex models more cumbersome. We describe how the use of staged programming in Python, via source code transformation, offers a midpoint between these two library design patterns, capturing the benefits of both. A key insight is to delay all type-dependent decisions until runtime, via dynamic dispatch. We instantiate these principles in AutoGraph, a software system that improves the programming experience of the TensorFlow library, and demonstrate usability improvements with no loss in performance compared to native TensorFlow graphs. We also show that our system is backend agnostic, and demonstrate targeting an alternate IR with characteristics not found in TensorFlow graphs."
            },
            "slug": "AutoGraph:-Imperative-style-Coding-with-Graph-based-Moldovan-Decker",
            "title": {
                "fragments": [],
                "text": "AutoGraph: Imperative-style Coding with Graph-based Performance"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This work describes how the use of staged programming in Python, via source code transformation, offers a midpoint between these two library design patterns, capturing the benefits of both machine learning and imperative programming."
            },
            "venue": {
                "fragments": [],
                "text": "MLSys"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35097712"
                        ],
                        "name": "V. Elango",
                        "slug": "V.-Elango",
                        "structuredName": {
                            "firstName": "Venmugil",
                            "lastName": "Elango",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "V. Elango"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145288598"
                        ],
                        "name": "Norman Rubin",
                        "slug": "Norman-Rubin",
                        "structuredName": {
                            "firstName": "Norman",
                            "lastName": "Rubin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Norman Rubin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49165315"
                        ],
                        "name": "Mahesh Ravishankar",
                        "slug": "Mahesh-Ravishankar",
                        "structuredName": {
                            "firstName": "Mahesh",
                            "lastName": "Ravishankar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mahesh Ravishankar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1984329"
                        ],
                        "name": "Hariharan Sandanagobalane",
                        "slug": "Hariharan-Sandanagobalane",
                        "structuredName": {
                            "firstName": "Hariharan",
                            "lastName": "Sandanagobalane",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hariharan Sandanagobalane"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50654241"
                        ],
                        "name": "Vinod Grover",
                        "slug": "Vinod-Grover",
                        "structuredName": {
                            "firstName": "Vinod",
                            "lastName": "Grover",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vinod Grover"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": " matrix multiplication or convolution. There are a number of competing approaches, both from academic and commercial entities, such as TVM [7], Halide [35], Tensor Comprehensions(TC) [53], and Diesel [11]. The most notable designs are either inspired by the compute-schedule split introduced by Halide and adapted by TVM, or the polyhedral framework, as used by TC and Diesel. Operator compilers perform "
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 47018174,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8ad834debde06968c763bfe2fb9c83aa4d843e0e",
            "isKey": false,
            "numCitedBy": 37,
            "numCiting": 12,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a domain specific language compiler, Diesel, for basic linear algebra and neural network computations, that accepts input expressions in an intuitive form and generates high performing code for GPUs. The current trend is to represent a neural network as a computation DAG, where each node in the DAG corresponds to a single operation such as matrix-matrix multiplication, and map the individual operations to hand tuned library functions provided by standard libraries such as CuBLAS and CuDNN. While this method takes advantage of readily available optimized library codes to achieve good performance for individual operations, it is not possible to optimize across operations. As opposed to this, given a computation composed of several operations, Diesel generates (a set) of efficient device functions, where the code is optimized for the computation as a whole, using polyhedral compilation techniques. In addition, there are cases where the code needs to be specialized for specific problem sizes to achieve optimal performance. While standard libraries are written for parametric problem sizes (where problem sizes are provided at runtime), Diesel can accept problem sizes at compile time and generate specialized codes. Experimental results show that the performance achieved by Diesel generated code for individual operations are comparable to the highly tuned versions provided by standard libraries, while for composite computations, Diesel outperforms manually written versions."
            },
            "slug": "Diesel:-DSL-for-linear-algebra-and-neural-net-on-Elango-Rubin",
            "title": {
                "fragments": [],
                "text": "Diesel: DSL for linear algebra and neural net computations on GPUs"
            },
            "tldr": {
                "abstractSimilarityScore": 45,
                "text": "Experimental results show that the performance achieved by Diesel generated code for individual operations are comparable to the highly tuned versions provided by standard libraries, while for composite computations, Diesel outperforms manually written versions."
            },
            "venue": {
                "fragments": [],
                "text": "MAPL@PLDI"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2434898"
                        ],
                        "name": "M. Looks",
                        "slug": "M.-Looks",
                        "structuredName": {
                            "firstName": "Moshe",
                            "lastName": "Looks",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Looks"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1881346"
                        ],
                        "name": "Marcello Herreshoff",
                        "slug": "Marcello-Herreshoff",
                        "structuredName": {
                            "firstName": "Marcello",
                            "lastName": "Herreshoff",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Marcello Herreshoff"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32913644"
                        ],
                        "name": "DeLesley S. Hutchins",
                        "slug": "DeLesley-S.-Hutchins",
                        "structuredName": {
                            "firstName": "DeLesley",
                            "lastName": "Hutchins",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "DeLesley S. Hutchins"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2784519"
                        ],
                        "name": "Peter Norvig",
                        "slug": "Peter-Norvig",
                        "structuredName": {
                            "firstName": "Peter",
                            "lastName": "Norvig",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Peter Norvig"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 110,
                                "start": 92
                            }
                        ],
                        "text": "As a result, major projects are repeatedly forced to patch or even fork core framework IRs [Looks et al. 2017b; Rotem et al. 2018; Shankar and Dobson 2017; TensorFlow Team 2017; Torch Team 2018; van Merri\u00ebnboer et al. 2017; XLA Team 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "5, 38]. Early frameworks adopted IRs specialized for then-state-of-the-art models and/or emerging hardware accelerators. As a result, nontrivial extensions require patching or even forking frameworks [27, 47, 52, 41, 55, 38, 51]. Such ad hoc extensions can improve expressivity while maintaining backwards compatibility with existing execution mechanisms. However, they are dif\ufb01cult to design, reason about, and implement, often"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "y rely on datadependent control \ufb02ow, forcing frameworks based on computation graph IRs to incorporate control \ufb02ow, often through ad hoc and dif\ufb01cult-to-extend constructs. For example, TensorFlow Fold [27] extends TF with special combinators that dynamically compute a graph for each shape permutation; these high-level constructs are opaque to further optimizations. The functional programming community "
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 148,
                                "start": 130
                            }
                        ],
                        "text": "Unfortunately, current framework IRs cannot directly encode trees, so she must use a framework extension such as TensorFlow fold [Looks et al. 2017a]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 67,
                                "start": 49
                            }
                        ],
                        "text": "TensorFlow fold address this particular problem [Looks et al. 2017a]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 5144625,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "08d2bae3ddf44d67b9b192a6ff26e954192e4806",
            "isKey": true,
            "numCitedBy": 107,
            "numCiting": 22,
            "paperAbstract": {
                "fragments": [],
                "text": "Neural networks that compute over graph structures are a natural fit for problems in a variety of domains, including natural language (parse trees) and cheminformatics (molecular graphs). However, since the computation graph has a different shape and size for every input, such networks do not directly support batched training or inference. They are also difficult to implement in popular deep learning libraries, which are based on static data-flow graphs. We introduce a technique called dynamic batching, which not only batches together operations between different input graphs of dissimilar shape, but also between different nodes within a single input graph. The technique allows us to create static graphs, using popular libraries, that emulate dynamic computation graphs of arbitrary shape and size. We further present a high-level library of compositional blocks that simplifies the creation of dynamic graph models. Using the library, we demonstrate concise and batch-wise parallel implementations for a variety of models from the literature."
            },
            "slug": "Deep-Learning-with-Dynamic-Computation-Graphs-Looks-Herreshoff",
            "title": {
                "fragments": [],
                "text": "Deep Learning with Dynamic Computation Graphs"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This work introduces a technique called dynamic batching, which not only batches together operations between different input graphs of dissimilar shape, but also between different nodes within a single input graph."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065915235"
                        ],
                        "name": "Raghuraman Krishnamoorthi",
                        "slug": "Raghuraman-Krishnamoorthi",
                        "structuredName": {
                            "firstName": "Raghuraman",
                            "lastName": "Krishnamoorthi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Raghuraman Krishnamoorthi"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 207,
                                "start": 188
                            }
                        ],
                        "text": "State-of-the-art work on quantization suggests that there exist a number of tradeoffs between different quantization techniques, with the best often determined by platform and model type [Krishnamoorthi 2018]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 49356451,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3d8b62c060f8444907e7c975c6ae590373b51ed4",
            "isKey": false,
            "numCitedBy": 450,
            "numCiting": 32,
            "paperAbstract": {
                "fragments": [],
                "text": "We present an overview of techniques for quantizing convolutional neural networks for inference with integer weights and activations. Per-channel quantization of weights and per-layer quantization of activations to 8-bits of precision post-training produces classification accuracies within 2% of floating point networks for a wide variety of CNN architectures. Model sizes can be reduced by a factor of 4 by quantizing weights to 8-bits, even when 8-bit arithmetic is not supported. This can be achieved with simple, post training quantization of weights.We benchmark latencies of quantized networks on CPUs and DSPs and observe a speedup of 2x-3x for quantized implementations compared to floating point on CPUs. Speedups of up to 10x are observed on specialized processors with fixed point SIMD capabilities, like the Qualcomm QDSPs with HVX. \nQuantization-aware training can provide further improvements, reducing the gap to floating point to 1% at 8-bit precision. Quantization-aware training also allows for reducing the precision of weights to four bits with accuracy losses ranging from 2% to 10%, with higher accuracy drop for smaller networks.We introduce tools in TensorFlow and TensorFlowLite for quantizing convolutional networks and review best practices for quantization-aware training to obtain high accuracy with quantized weights and activations. We recommend that per-channel quantization of weights and per-layer quantization of activations be the preferred quantization scheme for hardware acceleration and kernel optimization. We also propose that future processors and hardware accelerators for optimized inference support precisions of 4, 8 and 16 bits."
            },
            "slug": "Quantizing-deep-convolutional-networks-for-A-Krishnamoorthi",
            "title": {
                "fragments": [],
                "text": "Quantizing deep convolutional networks for efficient inference: A whitepaper"
            },
            "tldr": {
                "abstractSimilarityScore": 72,
                "text": "An overview of techniques for quantizing convolutional neural networks for inference with integer weights and activations is presented and it is recommended that per-channel quantization of weights and per-layer quantized of activations be the preferred quantization scheme for hardware acceleration and kernel optimization."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2496412"
                        ],
                        "name": "Connelly Barnes",
                        "slug": "Connelly-Barnes",
                        "structuredName": {
                            "firstName": "Connelly",
                            "lastName": "Barnes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Connelly Barnes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 101,
                                "start": 77
                            }
                        ],
                        "text": "Relay could use other high performance compilers for kernels such as Halide [Ragan-Kelley et al. 2013], which TVM derived its IR and optimization model."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "ing efficient operators (dense linear algebra kernels), such as generalized matrix multiplication (GEMM) and convolutions. Relay could use other high performance compilers for kernels such as Halide [Ragan-Kelley et al. 2013], which TVM derived its IR and optimization model. Tensor Comprehensions (TC) shares common goals with the TVM framework, but achieves its goal through different techniques, such as polyhedral compil"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 181,
                                "start": 157
                            }
                        ],
                        "text": "Since Relay is a high-level IR, it depends on a low-level code generator, such as TVM or Halide, to produce dense linear algebra kernels [Chen et al. 2018a; Ragan-Kelley et al. 2013]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": " generation into multiple distinct phases. Since Relay is a high-level IR, it depends on a low-level code generator, such as TVM or Halide, to produce dense linear algebra kernels [Chen et al. 2018a; Ragan-Kelley et al. 2013]. We use TVM in our experiments. Low-level kernel compilers focus on generating highly efficient operators. The generated kernels have a fixed calling convention and do not handle allocation. Instead"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 5885207,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d032f74b16457584f8a60ae07cfef9b617033638",
            "isKey": true,
            "numCitedBy": 878,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Image processing pipelines combine the challenges of stencil computations and stream programs. They are composed of large graphs of different stencil stages, as well as complex reductions, and stages with global or data-dependent access patterns. Because of their complex structure, the performance difference between a naive implementation of a pipeline and an optimized one is often an order of magnitude. Efficient implementations require optimization of both parallelism and locality, but due to the nature of stencils, there is a fundamental tension between parallelism, locality, and introducing redundant recomputation of shared values. We present a systematic model of the tradeoff space fundamental to stencil pipelines, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule. Combining this compiler with stochastic search over the space of schedules enables terse, composable programs to achieve state-of-the-art performance on a wide range of real image processing pipelines, and across different hardware architectures, including multicores with SIMD, and heterogeneous CPU+GPU execution. From simple Halide programs written in a few hours, we demonstrate performance up to 5x faster than hand-tuned C, intrinsics, and CUDA implementations optimized by experts over weeks or months, for image processing applications beyond the reach of past automatic compilers."
            },
            "slug": "Halide:-a-language-and-compiler-for-optimizing-and-Ragan-Kelley-Barnes",
            "title": {
                "fragments": [],
                "text": "Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A systematic model of the tradeoff space fundamental to stencil pipelines is presented, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule are presented."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI 2013"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057642721"
                        ],
                        "name": "Mart\u00edn Abadi",
                        "slug": "Mart\u00edn-Abadi",
                        "structuredName": {
                            "firstName": "Mart\u00edn",
                            "lastName": "Abadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mart\u00edn Abadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144758007"
                        ],
                        "name": "P. Barham",
                        "slug": "P.-Barham",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Barham",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Barham"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2108406634"
                        ],
                        "name": "Jianmin Chen",
                        "slug": "Jianmin-Chen",
                        "structuredName": {
                            "firstName": "Jianmin",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jianmin Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2545358"
                        ],
                        "name": "Z. Chen",
                        "slug": "Z.-Chen",
                        "structuredName": {
                            "firstName": "Z.",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Z. Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "36347083"
                        ],
                        "name": "Andy Davis",
                        "slug": "Andy-Davis",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Davis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Davis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49959210"
                        ],
                        "name": "J. Dean",
                        "slug": "J.-Dean",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Dean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Dean"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145139947"
                        ],
                        "name": "Matthieu Devin",
                        "slug": "Matthieu-Devin",
                        "structuredName": {
                            "firstName": "Matthieu",
                            "lastName": "Devin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matthieu Devin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1780892"
                        ],
                        "name": "S. Ghemawat",
                        "slug": "S.-Ghemawat",
                        "structuredName": {
                            "firstName": "Sanjay",
                            "lastName": "Ghemawat",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Ghemawat"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060655766"
                        ],
                        "name": "Geoffrey Irving",
                        "slug": "Geoffrey-Irving",
                        "structuredName": {
                            "firstName": "Geoffrey",
                            "lastName": "Irving",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Geoffrey Irving"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2090818"
                        ],
                        "name": "M. Isard",
                        "slug": "M.-Isard",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Isard",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Isard"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1942300"
                        ],
                        "name": "M. Kudlur",
                        "slug": "M.-Kudlur",
                        "structuredName": {
                            "firstName": "Manjunath",
                            "lastName": "Kudlur",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Kudlur"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3369421"
                        ],
                        "name": "J. Levenberg",
                        "slug": "J.-Levenberg",
                        "structuredName": {
                            "firstName": "Josh",
                            "lastName": "Levenberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Levenberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3089272"
                        ],
                        "name": "R. Monga",
                        "slug": "R.-Monga",
                        "structuredName": {
                            "firstName": "Rajat",
                            "lastName": "Monga",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Monga"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144375552"
                        ],
                        "name": "Sherry Moore",
                        "slug": "Sherry-Moore",
                        "structuredName": {
                            "firstName": "Sherry",
                            "lastName": "Moore",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sherry Moore"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "20154699"
                        ],
                        "name": "D. Murray",
                        "slug": "D.-Murray",
                        "structuredName": {
                            "firstName": "Derek",
                            "lastName": "Murray",
                            "middleNames": [
                                "Gordon"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Murray"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32163737"
                        ],
                        "name": "Benoit Steiner",
                        "slug": "Benoit-Steiner",
                        "structuredName": {
                            "firstName": "Benoit",
                            "lastName": "Steiner",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Benoit Steiner"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2080690"
                        ],
                        "name": "P. Tucker",
                        "slug": "P.-Tucker",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Tucker",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Tucker"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2053781980"
                        ],
                        "name": "Vijay Vasudevan",
                        "slug": "Vijay-Vasudevan",
                        "structuredName": {
                            "firstName": "Vijay",
                            "lastName": "Vasudevan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vijay Vasudevan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47941411"
                        ],
                        "name": "P. Warden",
                        "slug": "P.-Warden",
                        "structuredName": {
                            "firstName": "Pete",
                            "lastName": "Warden",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Warden"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35078078"
                        ],
                        "name": "M. Wicke",
                        "slug": "M.-Wicke",
                        "structuredName": {
                            "firstName": "Martin",
                            "lastName": "Wicke",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Wicke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2117163698"
                        ],
                        "name": "Yuan Yu",
                        "slug": "Yuan-Yu",
                        "structuredName": {
                            "firstName": "Yuan",
                            "lastName": "Yu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yuan Yu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2144533795"
                        ],
                        "name": "Xiaoqiang Zhang",
                        "slug": "Xiaoqiang-Zhang",
                        "structuredName": {
                            "firstName": "Xiaoqiang",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xiaoqiang Zhang"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 201,
                                "start": 184
                            }
                        ],
                        "text": "TensorFlow\u2019s representation is sufficient for many state-of-the-art models, is easily ported to heterogeneous hardware back-ends, and allows for reverse-mode automatic differentiation [Abadi et al. 2016; Baydin et al. 2015]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 167,
                                "start": 150
                            }
                        ],
                        "text": "\u2026frameworks offer different tradeoffs between expressivity, composability, and portability in the design of their intermediate representations (IRs) [Abadi et al. 2016; Bergstra et al. 2010;\nAuthors\u2019 addresses: Jared Roesch, Unversity of Washington, jroesch@cs.uw.edu; Steven Lyubomirsky, Unversity\u2026"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 29,
                                "start": 12
                            }
                        ],
                        "text": "TensorFlow [Abadi et al. 2016], which is the most popular DL framework [Hale 2018], supports static graphs."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 6287870,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "46200b99c40e8586c8a0f588488ab6414119fb28",
            "isKey": false,
            "numCitedBy": 12805,
            "numCiting": 111,
            "paperAbstract": {
                "fragments": [],
                "text": "TensorFlow is a machine learning system that operates at large scale and in heterogeneous environments. Tensor-Flow uses dataflow graphs to represent computation, shared state, and the operations that mutate that state. It maps the nodes of a dataflow graph across many machines in a cluster, and within a machine across multiple computational devices, including multicore CPUs, general-purpose GPUs, and custom-designed ASICs known as Tensor Processing Units (TPUs). This architecture gives flexibility to the application developer: whereas in previous \"parameter server\" designs the management of shared state is built into the system, TensorFlow enables developers to experiment with novel optimizations and training algorithms. TensorFlow supports a variety of applications, with a focus on training and inference on deep neural networks. Several Google services use TensorFlow in production, we have released it as an open-source project, and it has become widely used for machine learning research. In this paper, we describe the TensorFlow dataflow model and demonstrate the compelling performance that TensorFlow achieves for several real-world applications."
            },
            "slug": "TensorFlow:-A-system-for-large-scale-machine-Abadi-Barham",
            "title": {
                "fragments": [],
                "text": "TensorFlow: A system for large-scale machine learning"
            },
            "tldr": {
                "abstractSimilarityScore": 46,
                "text": "The TensorFlow dataflow model is described and the compelling performance that Tensor Flow achieves for several real-world applications is demonstrated."
            },
            "venue": {
                "fragments": [],
                "text": "OSDI"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3407277"
                        ],
                        "name": "Adam Paszke",
                        "slug": "Adam-Paszke",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Paszke",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Adam Paszke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39793298"
                        ],
                        "name": "S. Gross",
                        "slug": "S.-Gross",
                        "structuredName": {
                            "firstName": "Sam",
                            "lastName": "Gross",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Gross"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2127604"
                        ],
                        "name": "Soumith Chintala",
                        "slug": "Soumith-Chintala",
                        "structuredName": {
                            "firstName": "Soumith",
                            "lastName": "Chintala",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Soumith Chintala"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "114250963"
                        ],
                        "name": "Gregory Chanan",
                        "slug": "Gregory-Chanan",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Chanan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gregory Chanan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2052812305"
                        ],
                        "name": "E. Yang",
                        "slug": "E.-Yang",
                        "structuredName": {
                            "firstName": "Edward",
                            "lastName": "Yang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Yang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2375710"
                        ],
                        "name": "Zach DeVito",
                        "slug": "Zach-DeVito",
                        "structuredName": {
                            "firstName": "Zach",
                            "lastName": "DeVito",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zach DeVito"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3370429"
                        ],
                        "name": "Zeming Lin",
                        "slug": "Zeming-Lin",
                        "structuredName": {
                            "firstName": "Zeming",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zeming Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3050846"
                        ],
                        "name": "Alban Desmaison",
                        "slug": "Alban-Desmaison",
                        "structuredName": {
                            "firstName": "Alban",
                            "lastName": "Desmaison",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alban Desmaison"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3029482"
                        ],
                        "name": "L. Antiga",
                        "slug": "L.-Antiga",
                        "structuredName": {
                            "firstName": "Luca",
                            "lastName": "Antiga",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "L. Antiga"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1977806"
                        ],
                        "name": "Adam Lerer",
                        "slug": "Adam-Lerer",
                        "structuredName": {
                            "firstName": "Adam",
                            "lastName": "Lerer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Adam Lerer"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": " general and extensible solution. The crux of the problem is the lack of generic mechanisms for users to de\ufb01ne new control \ufb02ow combinators (e.g., fold) and data types. De\ufb01ne-By-Run Frameworks PyTorch [33], Gluon [12], Chainer [50], and TensorFlow eager-mode [41] are de\ufb01neby-run frameworks which attempt to address the challenges of previous work. The approach popularized by PyTorch is to use a host lan"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 3
                            }
                        ],
                        "text": "12 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nOnce the queue is populated, the algorithm will dequeue a relation and attempt to solve it."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 142,
                                "start": 2
                            }
                        ],
                        "text": "4 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nFor example, suppose one wants to construct a function f (x) to extract building addresses from images of a street."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 54,
                                "start": 36
                            }
                        ],
                        "text": "Dynamic frameworks such as PyTorch [Paszke et al. 2017], Gluon [glu 2018], Chainer [Tokui et al. 2015], and TensorFlow eager-mode [Shankar and Dobson 2017] are attempts to alleviate the challenges of static graph representations."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "s, which in turn accelerates DL research and product development. Popular DL compiler intermediate representations (IRs) offer different tradeoffs between expressivity, composability, and portability [1, 33, 50, 52, 5, 38]. Early frameworks adopted IRs specialized for then-state-of-the-art models and/or emerging hardware accelerators. As a result, nontrivial extensions require patching or even forking frameworks [27, 4"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 361,
                                "start": 221
                            }
                        ],
                        "text": "CCS Concepts: \u2022 Software and its engineering\u2192 General programming languages; \u2022 Social and professional topics\u2192 History of programming languages;\nAdditional Key Words and Phrases: Compilers, deep learning,\nACM Reference Format: Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 142,
                                "start": 2
                            }
                        ],
                        "text": "6 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nUnfortunately, since most machine learning frameworks rely on computation graphs, which cannot represent recursion, RNNs are usually finitely unrolled to a fixed depth."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 3
                            }
                        ],
                        "text": "16 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\n4.4.2 Lowering."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 3
                            }
                        ],
                        "text": "24 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock"
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 3
                            }
                        ],
                        "text": "20 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\n\u2022 -O3 additionally applies four more passes: (1) FoldScaleAxis, which folds scaling operations into the axis options of other operators, (2) AlterOpLayout, which alternates operator layouts for better cache performance, (3) CanonicalizeOps, which canonicalizes the \u201cbias add\u201d operator in terms of expanding dimensions and broadcasting for further analysis, (4) CommonSubexpElim, which lifts common subexpressions."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 722,
                                "start": 707
                            }
                        ],
                        "text": "Popular DL frameworks offer different tradeoffs between expressivity, composability, and portability in the design of their intermediate representations (IRs) [Abadi et al. 2016; Bergstra et al. 2010;\nAuthors\u2019 addresses: Jared Roesch, Unversity of Washington, jroesch@cs.uw.edu; Steven Lyubomirsky, Unversity of Washington, sslyu@cs.washgington.edu; Marisa Kirisame, Unversity of Washington, jerry96@cs.washington.edu; Josh Pollock, Unversity of Washington, joshpoll@cs.uw.edu; Logan Weber, Unversity of Washington, weberlo@cs.uw.edu; Ziheng Jiang, Unversity of Washington, ziheng@cs.uw.edu; Tianqi Chen, Unversity of Washington, tqchen@cs.uw.edu; Thierry Moreau, Unversity of Washington, tmoreau@cs.uw.edu; Zachary Tatlock, Unversity of Washington, ztatlock@cs.uw.edu."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 183,
                                "start": 165
                            }
                        ],
                        "text": "L G\n] 1\n7 A\npr 2\n01 9\n2 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nPaszke et al. 2017; Rotem et al. 2018; Tokui et al. 2015; van Merri\u00ebnboer et al. 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 142,
                                "start": 2
                            }
                        ],
                        "text": "8 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock"
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 3
                            }
                        ],
                        "text": "10 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nmutation?"
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 3
                            }
                        ],
                        "text": "18 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nthe input does not overflow."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 3
                            }
                        ],
                        "text": "22 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nM ea\nn In\nfe re\nnc e\nTi m\ne (m\ns)\n0\n200\n400\n600\n800\nresnet-18 resnet-34 resnet-50 dcgan mobilenet-g\n131.142\n329.37\n715.668\n568.611\n307.093\n52.86729.27\n188.193\n96.912 64.894\nUltra 96 (CPU+FPGA) ARM Cortex A53\nFig."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 143,
                                "start": 3
                            }
                        ],
                        "text": "14 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nevaluator more powerful than a constant-folding pass."
                    },
                    "intents": []
                }
            ],
            "corpusId": 40027675,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b36a5bb1707bb9c70025294b3a310138aae8327a",
            "isKey": true,
            "numCitedBy": 10485,
            "numCiting": 7,
            "paperAbstract": {
                "fragments": [],
                "text": "In this article, we describe an automatic differentiation module of PyTorch \u2014 a library designed to enable rapid research on machine learning models. It builds upon a few projects, most notably Lua Torch, Chainer, and HIPS Autograd [4], and provides a high performance environment with easy access to automatic differentiation of models executed on different devices (CPU and GPU). To make prototyping easier, PyTorch does not follow the symbolic approach used in many other deep learning frameworks, but focuses on differentiation of purely imperative programs, with a focus on extensibility and low overhead. Note that this preprint is a draft of certain sections from an upcoming paper covering all PyTorch features."
            },
            "slug": "Automatic-differentiation-in-PyTorch-Paszke-Gross",
            "title": {
                "fragments": [],
                "text": "Automatic differentiation in PyTorch"
            },
            "tldr": {
                "abstractSimilarityScore": 66,
                "text": "An automatic differentiation module of PyTorch is described \u2014 a library designed to enable rapid research on machine learning models that focuses on differentiation of purely imperative programs, with a focus on extensibility and low overhead."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39353098"
                        ],
                        "name": "Kaiming He",
                        "slug": "Kaiming-He",
                        "structuredName": {
                            "firstName": "Kaiming",
                            "lastName": "He",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kaiming He"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1771551"
                        ],
                        "name": "X. Zhang",
                        "slug": "X.-Zhang",
                        "structuredName": {
                            "firstName": "X.",
                            "lastName": "Zhang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "X. Zhang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3080683"
                        ],
                        "name": "Shaoqing Ren",
                        "slug": "Shaoqing-Ren",
                        "structuredName": {
                            "firstName": "Shaoqing",
                            "lastName": "Ren",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shaoqing Ren"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Jian Sun",
                        "slug": "Jian-Sun",
                        "structuredName": {
                            "firstName": "Jian",
                            "lastName": "Sun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jian Sun"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 25,
                                "start": 11
                            }
                        ],
                        "text": "ResNet-18 [He et al. 2015] and VGG-16 [Simonyan and Zisserman\n2014] are two dense convolutional neural networks which benefit from -03 optimizations."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 172,
                                "start": 136
                            }
                        ],
                        "text": "We evaluated inference time on five models including MobileNet-G [Howard et al. 2017], a grouped variant of the MobileNet architecture; ResNet-18, ResNet-34, and ResNet-50[He et al. 2015]; and Deep Convolutional Generative Adversarial Networks [Radford et al. 2015], a generative DNN used in unsupervised learning."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 229,
                                "start": 215
                            }
                        ],
                        "text": "\u2026ResNet-18, a DNN for image recognition that achieved state-ofthe-art performance on ImageNet detection tasks in 2015; VGG-16 (named for the Visual Geometry Group at Oxford), a CNN used for image recognition tasks [He et al. 2015; Howard et al. 2017; Mnih et al. 2013; Simonyan and Zisserman 2014]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 164,
                                "start": 150
                            }
                        ],
                        "text": "\u2026time on five models including MobileNet-G [Howard et al. 2017], a grouped variant of the MobileNet architecture; ResNet-18, ResNet-34, and ResNet-50[He et al. 2015]; and Deep Convolutional Generative Adversarial Networks [Radford et al. 2015], a generative DNN used in unsupervised learning."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 206594692,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "2c03df8b48bf3fa39054345bafabfeff15bfd11d",
            "isKey": true,
            "numCitedBy": 97653,
            "numCiting": 61,
            "paperAbstract": {
                "fragments": [],
                "text": "Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers - 8\u00d7 deeper than VGG nets [40] but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers. The depth of representations is of central importance for many visual recognition tasks. Solely due to our extremely deep representations, we obtain a 28% relative improvement on the COCO object detection dataset. Deep residual nets are foundations of our submissions to ILSVRC & COCO 2015 competitions1, where we also won the 1st places on the tasks of ImageNet detection, ImageNet localization, COCO detection, and COCO segmentation."
            },
            "slug": "Deep-Residual-Learning-for-Image-Recognition-He-Zhang",
            "title": {
                "fragments": [],
                "text": "Deep Residual Learning for Image Recognition"
            },
            "tldr": {
                "abstractSimilarityScore": 63,
                "text": "This work presents a residual learning framework to ease the training of networks that are substantially deeper than those used previously, and provides comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth."
            },
            "venue": {
                "fragments": [],
                "text": "2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1682816"
                        ],
                        "name": "Fei Wang",
                        "slug": "Fei-Wang",
                        "structuredName": {
                            "firstName": "Fei",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fei Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3491668"
                        ],
                        "name": "Xilun Wu",
                        "slug": "Xilun-Wu",
                        "structuredName": {
                            "firstName": "Xilun",
                            "lastName": "Wu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xilun Wu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9931980"
                        ],
                        "name": "Gr\u00e9gory M. Essertel",
                        "slug": "Gr\u00e9gory-M.-Essertel",
                        "structuredName": {
                            "firstName": "Gr\u00e9gory",
                            "lastName": "Essertel",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gr\u00e9gory M. Essertel"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "117235241"
                        ],
                        "name": "James M. Decker",
                        "slug": "James-M.-Decker",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Decker",
                            "middleNames": [
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James M. Decker"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1712987"
                        ],
                        "name": "Tiark Rompf",
                        "slug": "Tiark-Rompf",
                        "structuredName": {
                            "firstName": "Tiark",
                            "lastName": "Rompf",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tiark Rompf"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 172,
                                "start": 156
                            }
                        ],
                        "text": "\u2022 We provide a source-to-source AD algorithm that supports higher-order functions and higherorder derivatives, without the need for delimited continuations [Wang et al. 2018] (Section 4.2)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "rs, the design of new programming languages, or the augmentation of existing ones, has become a popular area of research. New languages designed for machine learning and related tasks include Lantern [54], Lift [43], Flux.jl [18] AutoGraph [30], Swift for TensorFlow [48], and JAX [25]. Lantern [54] is the most related work to Relay as it can be used as a code generator. Lantern is a deep learning DSL "
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 25,
                                "start": 9
                            }
                        ],
                        "text": "Lantern [Wang et al. 2018] is a deep learning DSL in Scala that uses lightweight modular staging (LMS) to lower code into C++. LMS takes a graph as input from the user and converts it to an AST representation, similar to Relay\u2019s graph mode."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 34,
                                "start": 18
                            }
                        ],
                        "text": "Relay 13\nLantern [Wang et al. 2018] (see Section 6) define a generic and powerful version of AD."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 4387049,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "9987eebf9c80e48dcc6a14f43d835e4bc920f18c",
            "isKey": true,
            "numCitedBy": 56,
            "numCiting": 142,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning has seen tremendous success over the past decade in computer vision, machine translation, and gameplay. This success rests crucially on gradient-descent optimization and the ability to \u201clearn\u201d parameters of a neural network by backpropagating observed errors. However, neural network architectures are growing increasingly sophisticated and diverse, which motivates an emerging quest for even more general forms of differentiable programming, where arbitrary parameterized computations can be trained by gradient descent. In this paper, we take a fresh look at automatic differentiation (AD) techniques, and especially aim to demystify the reverse-mode form of AD that generalizes backpropagation in neural networks. We uncover a tight connection between reverse-mode AD and delimited continuations, which permits implementing reverse-mode AD purely via operator overloading and without managing any auxiliary data structures. We further show how this formulation of AD can be fruitfully combined with multi-stage programming (staging), leading to an efficient implementation that combines the performance benefits of deep learning frameworks based on explicit reified computation graphs (e.g., TensorFlow) with the expressiveness of pure library approaches (e.g., PyTorch)."
            },
            "slug": "Demystifying-differentiable-programming:-the-Wang-Wu",
            "title": {
                "fragments": [],
                "text": "Demystifying differentiable programming: shift/reset the penultimate backpropagator"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This paper uncovers a tight connection between reverse-mode AD and delimited continuations, which permits implementing reverse- mode AD purely via operator overloading and without managing any auxiliary data structures, and shows how this formulation of AD can be fruitfully combined with multi-stage programming (staging), leading to an efficient implementation."
            },
            "venue": {
                "fragments": [],
                "text": "Proc. ACM Program. Lang."
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "32837403"
                        ],
                        "name": "J. Bergstra",
                        "slug": "J.-Bergstra",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Bergstra",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Bergstra"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1967465"
                        ],
                        "name": "Olivier Breuleux",
                        "slug": "Olivier-Breuleux",
                        "structuredName": {
                            "firstName": "Olivier",
                            "lastName": "Breuleux",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Olivier Breuleux"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3227028"
                        ],
                        "name": "Fr\u00e9d\u00e9ric Bastien",
                        "slug": "Fr\u00e9d\u00e9ric-Bastien",
                        "structuredName": {
                            "firstName": "Fr\u00e9d\u00e9ric",
                            "lastName": "Bastien",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fr\u00e9d\u00e9ric Bastien"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3087941"
                        ],
                        "name": "Pascal Lamblin",
                        "slug": "Pascal-Lamblin",
                        "structuredName": {
                            "firstName": "Pascal",
                            "lastName": "Lamblin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pascal Lamblin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1996134"
                        ],
                        "name": "Razvan Pascanu",
                        "slug": "Razvan-Pascanu",
                        "structuredName": {
                            "firstName": "Razvan",
                            "lastName": "Pascanu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Razvan Pascanu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2755582"
                        ],
                        "name": "Guillaume Desjardins",
                        "slug": "Guillaume-Desjardins",
                        "structuredName": {
                            "firstName": "Guillaume",
                            "lastName": "Desjardins",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Guillaume Desjardins"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153160559"
                        ],
                        "name": "Joseph P. Turian",
                        "slug": "Joseph-P.-Turian",
                        "structuredName": {
                            "firstName": "Joseph",
                            "lastName": "Turian",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Joseph P. Turian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1393680089"
                        ],
                        "name": "David Warde-Farley",
                        "slug": "David-Warde-Farley",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Warde-Farley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David Warde-Farley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751762"
                        ],
                        "name": "Yoshua Bengio",
                        "slug": "Yoshua-Bengio",
                        "structuredName": {
                            "firstName": "Yoshua",
                            "lastName": "Bengio",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yoshua Bengio"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 162,
                                "start": 142
                            }
                        ],
                        "text": "\u2026tradeoffs between expressivity, composability, and portability in the design of their intermediate representations (IRs) [Abadi et al. 2016; Bergstra et al. 2010;\nAuthors\u2019 addresses: Jared Roesch, Unversity of Washington, jroesch@cs.uw.edu; Steven Lyubomirsky, Unversity of Washington,\u2026"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "product development. Popular DL frameworks offer different tradeoffs between expressivity, composability, and portability in the design of their intermediate representations (IRs) [Abadi et al. 2016; Bergstra et al. 2010; Authors\u2019 addresses: Jared Roesch, Unversity of Washington, jroesch@cs.uw.edu; Steven Lyubomirsky, Unversity of Washington, sslyu@cs.washgington.edu; Marisa Kirisame, Unversity of Washington, jerry96"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": ", researchers began utilizing specialized accelerators. To expose accelerators to end-users without needing to write in low-level languages, such as CUDA, researchers designed frameworks like Theano [Bergstra et al. 2010]. These frameworks represent computations using dataflow graphs (treating mathematical operations on data as nodes) and compile these graphs to deploy to accelerators like the GPU. \u201cComputation graph"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 164,
                                "start": 144
                            }
                        ],
                        "text": "To expose accelerators to end-users without needing to write in low-level languages, such as CUDA, researchers designed frameworks like Theano [Bergstra et al. 2010]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 3183121,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "63936fa32f9e75ab2a864daae6791ce02112183d",
            "isKey": true,
            "numCitedBy": 826,
            "numCiting": 17,
            "paperAbstract": {
                "fragments": [],
                "text": "Theano is a compiler for mathematical expressions in Python that combines the convenience of NumPy's syntax with the speed of optimized native machine language. The user composes mathematical expressions in a high-level description that mimics NumPy's syntax and semantics, while being statically typed and functional (as opposed to imperative). These expressions allow Theano to provide symbolic differentiation. Before performing computation, Theano optimizes the choice of expressions, translates them into C++ (or CUDA for GPU), compiles them into dynamically loaded Python modules, all automatically. Common machine learn- ing algorithms implemented with Theano are from 1:6 to 7:5 faster than competitive alternatives (including those implemented with C/C++, NumPy/SciPy and MATLAB) when compiled for the CPU and between 6:5 and 44 faster when compiled for the GPU. This paper illustrates how to use Theano, outlines the scope of the compiler, provides benchmarks on both CPU and GPU processors, and explains its overall design."
            },
            "slug": "Theano:-A-CPU-and-GPU-Math-Compiler-in-Python-Bergstra-Breuleux",
            "title": {
                "fragments": [],
                "text": "Theano: A CPU and GPU Math Compiler in Python"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This paper illustrates how to use Theano, outlines the scope of the compiler, provides benchmarks on both CPU and GPU processors, and explains its overall design."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2398772"
                        ],
                        "name": "G. Mainland",
                        "slug": "G.-Mainland",
                        "structuredName": {
                            "firstName": "Geoffrey",
                            "lastName": "Mainland",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Mainland"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2560604"
                        ],
                        "name": "Roman Leshchinskiy",
                        "slug": "Roman-Leshchinskiy",
                        "structuredName": {
                            "firstName": "Roman",
                            "lastName": "Leshchinskiy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Roman Leshchinskiy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2107761326"
                        ],
                        "name": "S. P. Jones",
                        "slug": "S.-P.-Jones",
                        "structuredName": {
                            "firstName": "Simon",
                            "lastName": "Jones",
                            "middleNames": [
                                "L.",
                                "Peyton"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. P. Jones"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": ") and have clearly speci\ufb01ed semantics (e.g., lexical scope and controlled effects). By borrowing from PL literature, we can apply program analysis and optimization techniques from decades of research [28]. Relay\u2019s IR takes a small functional core and enriches it with domain-speci\ufb01c additions\u2014namely, the inclusion of tensors and operators as expressions and a novel tensor type system 3 Expr e ::= %l (l"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 9828404,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b1360d9115284c618c92adbdeb78b62b18ef5237",
            "isKey": false,
            "numCitedBy": 17,
            "numCiting": 49,
            "paperAbstract": {
                "fragments": [],
                "text": "Stream fusion is a powerful technique for automatically transforming high-level sequence-processing functions into efficient implementations. It has been used to great effect in Haskell libraries for manipulating byte arrays, Unicode text, and unboxed vectors. However, some operations, like vector append, still do not perform well within the standard stream fusion framework. Others, like SIMD computation using the SSE and AVX instructions available on modern x86 chips, do not seem to fit in the framework at all. In this paper we introduce generalized stream fusion, which solves these issues. The key insight is to bundle together multiple stream representations, each tuned for a particular class of stream consumer. We also describe a stream representation suited for efficient computation with SSE instructions. Our ideas are implemented in modified versions of the GHC compiler and vector library. Benchmarks show that high-level Haskell code written using our compiler and libraries can produce code that is faster than both compiler- and hand-vectorized C."
            },
            "slug": "Exploiting-vector-instructions-with-generalized-Mainland-Leshchinskiy",
            "title": {
                "fragments": [],
                "text": "Exploiting vector instructions with generalized stream fusio"
            },
            "venue": {
                "fragments": [],
                "text": "ICFP 2013"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1715454"
                        ],
                        "name": "N. Jouppi",
                        "slug": "N.-Jouppi",
                        "structuredName": {
                            "firstName": "Norman",
                            "lastName": "Jouppi",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Jouppi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39660914"
                        ],
                        "name": "C. Young",
                        "slug": "C.-Young",
                        "structuredName": {
                            "firstName": "Cliff",
                            "lastName": "Young",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Young"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2056800684"
                        ],
                        "name": "Nishant Patil",
                        "slug": "Nishant-Patil",
                        "structuredName": {
                            "firstName": "Nishant",
                            "lastName": "Patil",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nishant Patil"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2052996328"
                        ],
                        "name": "David A. Patterson",
                        "slug": "David-A.-Patterson",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Patterson",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "David A. Patterson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1839673849"
                        ],
                        "name": "Gaurav Agrawal",
                        "slug": "Gaurav-Agrawal",
                        "structuredName": {
                            "firstName": "Gaurav",
                            "lastName": "Agrawal",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Gaurav Agrawal"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39892484"
                        ],
                        "name": "R. Bajwa",
                        "slug": "R.-Bajwa",
                        "structuredName": {
                            "firstName": "Raminder",
                            "lastName": "Bajwa",
                            "middleNames": [
                                "Singh"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Bajwa"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057224801"
                        ],
                        "name": "Sarah Bates",
                        "slug": "Sarah-Bates",
                        "structuredName": {
                            "firstName": "Sarah",
                            "lastName": "Bates",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sarah Bates"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2125285255"
                        ],
                        "name": "Suresh Bhatia",
                        "slug": "Suresh-Bhatia",
                        "structuredName": {
                            "firstName": "Suresh",
                            "lastName": "Bhatia",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Suresh Bhatia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35750774"
                        ],
                        "name": "N. Boden",
                        "slug": "N.-Boden",
                        "structuredName": {
                            "firstName": "Nanette",
                            "lastName": "Boden",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "N. Boden"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1394297183"
                        ],
                        "name": "Al Borchers",
                        "slug": "Al-Borchers",
                        "structuredName": {
                            "firstName": "Al",
                            "lastName": "Borchers",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Al Borchers"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060002570"
                        ],
                        "name": "Rick Boyle",
                        "slug": "Rick-Boyle",
                        "structuredName": {
                            "firstName": "Rick",
                            "lastName": "Boyle",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Rick Boyle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065727960"
                        ],
                        "name": "Pierre-luc Cantin",
                        "slug": "Pierre-luc-Cantin",
                        "structuredName": {
                            "firstName": "Pierre-luc",
                            "lastName": "Cantin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pierre-luc Cantin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1629772869"
                        ],
                        "name": "Clifford Chao",
                        "slug": "Clifford-Chao",
                        "structuredName": {
                            "firstName": "Clifford",
                            "lastName": "Chao",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Clifford Chao"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2113263549"
                        ],
                        "name": "Chris Clark",
                        "slug": "Chris-Clark",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Clark",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Clark"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213025"
                        ],
                        "name": "Jeremy Coriell",
                        "slug": "Jeremy-Coriell",
                        "structuredName": {
                            "firstName": "Jeremy",
                            "lastName": "Coriell",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jeremy Coriell"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2061461417"
                        ],
                        "name": "Mike Daley",
                        "slug": "Mike-Daley",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Daley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mike Daley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153358157"
                        ],
                        "name": "Matt Dau",
                        "slug": "Matt-Dau",
                        "structuredName": {
                            "firstName": "Matt",
                            "lastName": "Dau",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matt Dau"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49959210"
                        ],
                        "name": "J. Dean",
                        "slug": "J.-Dean",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Dean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Dean"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1394723585"
                        ],
                        "name": "Ben Gelb",
                        "slug": "Ben-Gelb",
                        "structuredName": {
                            "firstName": "Ben",
                            "lastName": "Gelb",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ben Gelb"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213038"
                        ],
                        "name": "T. Ghaemmaghami",
                        "slug": "T.-Ghaemmaghami",
                        "structuredName": {
                            "firstName": "Tara",
                            "lastName": "Ghaemmaghami",
                            "middleNames": [
                                "Vazir"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Ghaemmaghami"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40301682"
                        ],
                        "name": "R. Gottipati",
                        "slug": "R.-Gottipati",
                        "structuredName": {
                            "firstName": "Rajendra",
                            "lastName": "Gottipati",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Gottipati"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213045"
                        ],
                        "name": "William Gulland",
                        "slug": "William-Gulland",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Gulland",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "William Gulland"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2330986"
                        ],
                        "name": "R. Hagmann",
                        "slug": "R.-Hagmann",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Hagmann",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Hagmann"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2148846139"
                        ],
                        "name": "C. R. Ho",
                        "slug": "C.-R.-Ho",
                        "structuredName": {
                            "firstName": "C.",
                            "lastName": "Ho",
                            "middleNames": [
                                "Richard"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. R. Ho"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1629763752"
                        ],
                        "name": "Doug Hogberg",
                        "slug": "Doug-Hogberg",
                        "structuredName": {
                            "firstName": "Doug",
                            "lastName": "Hogberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Doug Hogberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49268145"
                        ],
                        "name": "John Hu",
                        "slug": "John-Hu",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Hu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "John Hu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1701671"
                        ],
                        "name": "R. Hundt",
                        "slug": "R.-Hundt",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "Hundt",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Hundt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38786988"
                        ],
                        "name": "D. Hurt",
                        "slug": "D.-Hurt",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Hurt",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Hurt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46920727"
                        ],
                        "name": "Julian Ibarz",
                        "slug": "Julian-Ibarz",
                        "structuredName": {
                            "firstName": "Julian",
                            "lastName": "Ibarz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Julian Ibarz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "10433955"
                        ],
                        "name": "A. Jaffey",
                        "slug": "A.-Jaffey",
                        "structuredName": {
                            "firstName": "Aaron",
                            "lastName": "Jaffey",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Jaffey"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064306865"
                        ],
                        "name": "Alek Jaworski",
                        "slug": "Alek-Jaworski",
                        "structuredName": {
                            "firstName": "Alek",
                            "lastName": "Jaworski",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alek Jaworski"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064354536"
                        ],
                        "name": "Alexander Kaplan",
                        "slug": "Alexander-Kaplan",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Kaplan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander Kaplan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398212995"
                        ],
                        "name": "Harshit Khaitan",
                        "slug": "Harshit-Khaitan",
                        "structuredName": {
                            "firstName": "Harshit",
                            "lastName": "Khaitan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Harshit Khaitan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35002044"
                        ],
                        "name": "Daniel Killebrew",
                        "slug": "Daniel-Killebrew",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Killebrew",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Killebrew"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1406011741"
                        ],
                        "name": "A. Koch",
                        "slug": "A.-Koch",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Koch",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Koch"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2116960562"
                        ],
                        "name": "Naveen Kumar",
                        "slug": "Naveen-Kumar",
                        "structuredName": {
                            "firstName": "Naveen",
                            "lastName": "Kumar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Naveen Kumar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40476752"
                        ],
                        "name": "Steve Lacy",
                        "slug": "Steve-Lacy",
                        "structuredName": {
                            "firstName": "Steve",
                            "lastName": "Lacy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Steve Lacy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2926266"
                        ],
                        "name": "J. Laudon",
                        "slug": "J.-Laudon",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Laudon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Laudon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2057766961"
                        ],
                        "name": "James Law",
                        "slug": "James-Law",
                        "structuredName": {
                            "firstName": "James",
                            "lastName": "Law",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "James Law"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1397916881"
                        ],
                        "name": "Diemthu Le",
                        "slug": "Diemthu-Le",
                        "structuredName": {
                            "firstName": "Diemthu",
                            "lastName": "Le",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Diemthu Le"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3362246"
                        ],
                        "name": "Chris Leary",
                        "slug": "Chris-Leary",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Leary",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Chris Leary"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2144265117"
                        ],
                        "name": "Zhuyuan Liu",
                        "slug": "Zhuyuan-Liu",
                        "structuredName": {
                            "firstName": "Zhuyuan",
                            "lastName": "Liu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Zhuyuan Liu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49432518"
                        ],
                        "name": "Kyle A. Lucke",
                        "slug": "Kyle-A.-Lucke",
                        "structuredName": {
                            "firstName": "Kyle",
                            "lastName": "Lucke",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kyle A. Lucke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1397991868"
                        ],
                        "name": "Alan Lundin",
                        "slug": "Alan-Lundin",
                        "structuredName": {
                            "firstName": "Alan",
                            "lastName": "Lundin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alan Lundin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213046"
                        ],
                        "name": "G. MacKean",
                        "slug": "G.-MacKean",
                        "structuredName": {
                            "firstName": "Gordon",
                            "lastName": "MacKean",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. MacKean"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1973715"
                        ],
                        "name": "A. Maggiore",
                        "slug": "A.-Maggiore",
                        "structuredName": {
                            "firstName": "Adriana",
                            "lastName": "Maggiore",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Maggiore"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2105943261"
                        ],
                        "name": "Maire Mahony",
                        "slug": "Maire-Mahony",
                        "structuredName": {
                            "firstName": "Maire",
                            "lastName": "Mahony",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Maire Mahony"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50092571"
                        ],
                        "name": "K. Miller",
                        "slug": "K.-Miller",
                        "structuredName": {
                            "firstName": "Kieran",
                            "lastName": "Miller",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Miller"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1395811464"
                        ],
                        "name": "R. Nagarajan",
                        "slug": "R.-Nagarajan",
                        "structuredName": {
                            "firstName": "Rahul",
                            "lastName": "Nagarajan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Nagarajan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213032"
                        ],
                        "name": "Ravi Narayanaswami",
                        "slug": "Ravi-Narayanaswami",
                        "structuredName": {
                            "firstName": "Ravi",
                            "lastName": "Narayanaswami",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ravi Narayanaswami"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1393195759"
                        ],
                        "name": "Ray Ni",
                        "slug": "Ray-Ni",
                        "structuredName": {
                            "firstName": "Ray",
                            "lastName": "Ni",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ray Ni"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398213062"
                        ],
                        "name": "K. Nix",
                        "slug": "K.-Nix",
                        "structuredName": {
                            "firstName": "Kathy",
                            "lastName": "Nix",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Nix"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3222376"
                        ],
                        "name": "Thomas Norrie",
                        "slug": "Thomas-Norrie",
                        "structuredName": {
                            "firstName": "Thomas",
                            "lastName": "Norrie",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Thomas Norrie"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3175815"
                        ],
                        "name": "Mark Omernick",
                        "slug": "Mark-Omernick",
                        "structuredName": {
                            "firstName": "Mark",
                            "lastName": "Omernick",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mark Omernick"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398212990"
                        ],
                        "name": "Narayana Penukonda",
                        "slug": "Narayana-Penukonda",
                        "structuredName": {
                            "firstName": "Narayana",
                            "lastName": "Penukonda",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Narayana Penukonda"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064991162"
                        ],
                        "name": "Andy Phelps",
                        "slug": "Andy-Phelps",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Phelps",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Phelps"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2116470453"
                        ],
                        "name": "Jonathan Ross",
                        "slug": "Jonathan-Ross",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ross",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ross"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2068076326"
                        ],
                        "name": "Matt Ross",
                        "slug": "Matt-Ross",
                        "structuredName": {
                            "firstName": "Matt",
                            "lastName": "Ross",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matt Ross"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144717532"
                        ],
                        "name": "Amir Salek",
                        "slug": "Amir-Salek",
                        "structuredName": {
                            "firstName": "Amir",
                            "lastName": "Salek",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Amir Salek"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "9364218"
                        ],
                        "name": "E. Samadiani",
                        "slug": "E.-Samadiani",
                        "structuredName": {
                            "firstName": "Emad",
                            "lastName": "Samadiani",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Samadiani"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1395804389"
                        ],
                        "name": "C. Severn",
                        "slug": "C.-Severn",
                        "structuredName": {
                            "firstName": "Chris",
                            "lastName": "Severn",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Severn"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2473816"
                        ],
                        "name": "G. Sizikov",
                        "slug": "G.-Sizikov",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Sizikov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Sizikov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1398212969"
                        ],
                        "name": "Matthew Snelham",
                        "slug": "Matthew-Snelham",
                        "structuredName": {
                            "firstName": "Matthew",
                            "lastName": "Snelham",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Matthew Snelham"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2144885096"
                        ],
                        "name": "Jed Souter",
                        "slug": "Jed-Souter",
                        "structuredName": {
                            "firstName": "Jed",
                            "lastName": "Souter",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jed Souter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39566019"
                        ],
                        "name": "D. Steinberg",
                        "slug": "D.-Steinberg",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Steinberg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Steinberg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1394189636"
                        ],
                        "name": "Andy Swing",
                        "slug": "Andy-Swing",
                        "structuredName": {
                            "firstName": "Andy",
                            "lastName": "Swing",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andy Swing"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1393173244"
                        ],
                        "name": "Mercedes Tan",
                        "slug": "Mercedes-Tan",
                        "structuredName": {
                            "firstName": "Mercedes",
                            "lastName": "Tan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mercedes Tan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "48930610"
                        ],
                        "name": "G. Thorson",
                        "slug": "G.-Thorson",
                        "structuredName": {
                            "firstName": "Gregory",
                            "lastName": "Thorson",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Thorson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064522407"
                        ],
                        "name": "Bo Tian",
                        "slug": "Bo-Tian",
                        "structuredName": {
                            "firstName": "Bo",
                            "lastName": "Tian",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bo Tian"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "50042144"
                        ],
                        "name": "H. Toma",
                        "slug": "H.-Toma",
                        "structuredName": {
                            "firstName": "Horia",
                            "lastName": "Toma",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Toma"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1397585416"
                        ],
                        "name": "Erick Tuttle",
                        "slug": "Erick-Tuttle",
                        "structuredName": {
                            "firstName": "Erick",
                            "lastName": "Tuttle",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Erick Tuttle"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2053781980"
                        ],
                        "name": "Vijay Vasudevan",
                        "slug": "Vijay-Vasudevan",
                        "structuredName": {
                            "firstName": "Vijay",
                            "lastName": "Vasudevan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vijay Vasudevan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2060269562"
                        ],
                        "name": "Richard Walter",
                        "slug": "Richard-Walter",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Walter",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Richard Walter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2108459300"
                        ],
                        "name": "Walter Wang",
                        "slug": "Walter-Wang",
                        "structuredName": {
                            "firstName": "Walter",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Walter Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2064779797"
                        ],
                        "name": "Eric Wilcox",
                        "slug": "Eric-Wilcox",
                        "structuredName": {
                            "firstName": "Eric",
                            "lastName": "Wilcox",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Eric Wilcox"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1712426"
                        ],
                        "name": "D. Yoon",
                        "slug": "D.-Yoon",
                        "structuredName": {
                            "firstName": "Doe",
                            "lastName": "Yoon",
                            "middleNames": [
                                "Hyun"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Yoon"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 151,
                                "start": 133
                            }
                        ],
                        "text": "Portability: It should be straightforward to add new hardware backends (e.g., TPU, Inferentia, and FPGAs) [Amazon Web Services 2018; Jouppi et al. 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 154,
                                "start": 136
                            }
                        ],
                        "text": "(3) Accelerator-friendly data packing: Relay reorganizes data so it can be effortlessly consumed\nby a specialized TPU-like accelerator [Jouppi et al. 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 4202768,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "2dfeb5a90abc49ab2a80a492a01a4e2c8e92ec22",
            "isKey": false,
            "numCitedBy": 2951,
            "numCiting": 119,
            "paperAbstract": {
                "fragments": [],
                "text": "Many architects believe that major improvements in cost-energy-performance must now come from domain-specific hardware. This paper evaluates a custom ASIC-called a Tensor Processing Unit (TPU)-deployed in datacenters since 2015 that accelerates the inference phase of neural networks (NN). The heart of the TPU is a 65,536 8-bit MAC matrix multiply unit that offers a peak throughput of 92 TeraOps/second (TOPS) and a large (28 MiB) software-managed on-chip memory. The TPU's deterministic execution model is a better match to the 99th-percentile response-time requirement of our NN applications than are the time-varying optimizations of CPUs and GPUs that help average throughput more than guaranteed latency. The lack of such features helps explain why, despite having myriad MACs and a big memory, the TPU is relatively small and low power. We compare the TPU to a server-class Intel Haswell CPU and an Nvidia K80 GPU, which are contemporaries deployed in the same datacenters. Our workload, written in the high-level TensorFlow framework, uses production NN applications (MLPs, CNNs, and LSTMs) that represent 95% of our datacenters' NN inference demand. Despite low utilization for some applications, the TPU is on average about 15X\u201330X faster than its contemporary GPU or CPU, with TOPS/Watt about 30X\u201380X higher. Moreover, using the GPU's GDDR5 memory in the TPU would triple achieved TOPS and raise TOPS/Watt to nearly 70X the GPU and 200X the CPU."
            },
            "slug": "In-datacenter-performance-analysis-of-a-tensor-unit-Jouppi-Young",
            "title": {
                "fragments": [],
                "text": "In-datacenter performance analysis of a tensor processing unit"
            },
            "tldr": {
                "abstractSimilarityScore": 59,
                "text": "This paper evaluates a custom ASIC-called a Tensor Processing Unit (TPU)-deployed in datacenters since 2015 that accelerates the inference phase of neural networks (NN) and compares it to a server-class Intel Haswell CPU and an Nvidia K80 GPU, which are contemporaries deployed in the samedatacenters."
            },
            "venue": {
                "fragments": [],
                "text": "2017 ACM/IEEE 44th Annual International Symposium on Computer Architecture (ISCA)"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2391802"
                        ],
                        "name": "Hanxiao Liu",
                        "slug": "Hanxiao-Liu",
                        "structuredName": {
                            "firstName": "Hanxiao",
                            "lastName": "Liu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hanxiao Liu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34838386"
                        ],
                        "name": "K. Simonyan",
                        "slug": "K.-Simonyan",
                        "structuredName": {
                            "firstName": "Karen",
                            "lastName": "Simonyan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Simonyan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "35729970"
                        ],
                        "name": "Yiming Yang",
                        "slug": "Yiming-Yang",
                        "structuredName": {
                            "firstName": "Yiming",
                            "lastName": "Yang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yiming Yang"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 177,
                                "start": 162
                            }
                        ],
                        "text": "Furthermore, it is becoming increasingly important to compute not only first-order gradients of functions but potentially nth-order gradients [Chen et al. 2018b; Liu et al. 2018]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 166,
                                "start": 151
                            }
                        ],
                        "text": "Forward-mode AD is useful for computing the Hessian vector product, which is necessary for techniques like differentiable architecture search (DARTS) [Liu et al. 2018]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 49411844,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "c1f457e31b611da727f9aef76c283a18157dfa83",
            "isKey": false,
            "numCitedBy": 2237,
            "numCiting": 51,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper addresses the scalability challenge of architecture search by formulating the task in a differentiable manner. Unlike conventional approaches of applying evolution or reinforcement learning over a discrete and non-differentiable search space, our method is based on the continuous relaxation of the architecture representation, allowing efficient search of the architecture using gradient descent. Extensive experiments on CIFAR-10, ImageNet, Penn Treebank and WikiText-2 show that our algorithm excels in discovering high-performance convolutional architectures for image classification and recurrent architectures for language modeling, while being orders of magnitude faster than state-of-the-art non-differentiable techniques. Our implementation has been made publicly available to facilitate further research on efficient architecture search algorithms."
            },
            "slug": "DARTS:-Differentiable-Architecture-Search-Liu-Simonyan",
            "title": {
                "fragments": [],
                "text": "DARTS: Differentiable Architecture Search"
            },
            "tldr": {
                "abstractSimilarityScore": 49,
                "text": "The proposed algorithm excels in discovering high-performance convolutional architectures for image classification and recurrent architectures for language modeling, while being orders of magnitude faster than state-of-the-art non-differentiable techniques."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2019
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2061649994"
                        ],
                        "name": "Tom Young",
                        "slug": "Tom-Young",
                        "structuredName": {
                            "firstName": "Tom",
                            "lastName": "Young",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tom Young"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8223433"
                        ],
                        "name": "Devamanyu Hazarika",
                        "slug": "Devamanyu-Hazarika",
                        "structuredName": {
                            "firstName": "Devamanyu",
                            "lastName": "Hazarika",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Devamanyu Hazarika"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1746416"
                        ],
                        "name": "Soujanya Poria",
                        "slug": "Soujanya-Poria",
                        "structuredName": {
                            "firstName": "Soujanya",
                            "lastName": "Poria",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Soujanya Poria"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49943757"
                        ],
                        "name": "E. Cambria",
                        "slug": "E.-Cambria",
                        "structuredName": {
                            "firstName": "E.",
                            "lastName": "Cambria",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Cambria"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "sivity, composability, and portability without compromising performance. 1.Introduction Deep learning (DL) has radically transformed domains like computer vision and natural language processing (NLP) [36, 56]. Inspired by these successes, researchers and companies are continually experimenting with increasingly sophisticated DL models and developing specialized hardware backends. DL frameworks for writing"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 150,
                                "start": 133
                            }
                        ],
                        "text": "Deep learning (DL) has radically transformed domains like computer vision and natural language processing (NLP) [Redmon et al. 2015; Young et al. 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 3397190,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ce2d5b5856bb6c9ab5c2390eb8b180c75a162055",
            "isKey": false,
            "numCitedBy": 1850,
            "numCiting": 240,
            "paperAbstract": {
                "fragments": [],
                "text": "Deep learning methods employ multiple processing layers to learn hierarchical representations of data and have produced state-of-the-art results in many domains. Recently, a variety of model designs and methods have blossomed in the context of natural language processing (NLP). In this paper, we review significant deep learning related models and methods that have been employed for numerous NLP tasks and provide a walk-through of their evolution. We also summarize, compare and contrast the various models and put forward a detailed understanding of the past, present and future of deep learning in NLP."
            },
            "slug": "Recent-Trends-in-Deep-Learning-Based-Natural-Young-Hazarika",
            "title": {
                "fragments": [],
                "text": "Recent Trends in Deep Learning Based Natural Language Processing [Review Article]"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This paper reviews significant deep learning related models and methods that have been employed for numerous NLP tasks and provides a walk-through of their evolution."
            },
            "venue": {
                "fragments": [],
                "text": "IEEE Computational Intelligence Magazine"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34289387"
                        ],
                        "name": "Mike Innes",
                        "slug": "Mike-Innes",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Innes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mike Innes"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 22,
                                "start": 11
                            }
                        ],
                        "text": "Zygote.jl [Innes 2018a], like Relay, uses source code transformations to implement automatic differentiation."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "gramming languages, or the augmentation of existing ones, has become a popular area of research. New languages designed for machine learning and related tasks include Lantern [54], Lift [43], Flux.jl [18] AutoGraph [30], Swift for TensorFlow [48], and JAX [25]. Lantern [54] is the most related work to Relay as it can be used as a code generator. Lantern is a deep learning DSL in Scala that uses lightw"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 20,
                                "start": 9
                            }
                        ],
                        "text": "Flux.jl [Innes 2018b] is a DL library written in Julia [JuliaLang Team 2018], a numerical computing language."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 53244078,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d4414002f23c0f1c497166eb51c5b1d549ff75c8",
            "isKey": false,
            "numCitedBy": 166,
            "numCiting": 3,
            "paperAbstract": {
                "fragments": [],
                "text": "Flux is library for machine learning (ML), written using the numerical computing language Julia (Bezanson et al. 2017). The package allows models to be written using Julia\u2019s simple mathematical syntax, and applies automatic differentiation (AD) to seamlessly calculate derivatives and train the model. Meanwhile, it makes heavy use of Julia\u2019s language and compiler features to carry out code analysis and make optimisations. For example, Julia\u2019s GPU compilation support (Besard, Foket, and De Sutter 2017) can be used to JIT-compile custom GPU kernels for model layers (Innes and others 2017a)."
            },
            "slug": "Flux:-Elegant-machine-learning-with-Julia-Innes",
            "title": {
                "fragments": [],
                "text": "Flux: Elegant machine learning with Julia"
            },
            "tldr": {
                "abstractSimilarityScore": 66,
                "text": "JuliaFlux is library for machine learning (ML), written using the numerical computing language Julia, and applies automatic differentiation (AD) to seamlessly calculate derivatives and train the model."
            },
            "venue": {
                "fragments": [],
                "text": "J. Open Source Softw."
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34838386"
                        ],
                        "name": "K. Simonyan",
                        "slug": "K.-Simonyan",
                        "structuredName": {
                            "firstName": "Karen",
                            "lastName": "Simonyan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Simonyan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1688869"
                        ],
                        "name": "Andrew Zisserman",
                        "slug": "Andrew-Zisserman",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Zisserman",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Zisserman"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "performance on ImageNet detection tasks in 2015; and VGG16 (named for the Visual Geometry Group at Oxford), a CNN for image recognition that achieved top-2 performance in the 2014 ImageNet Challenge. [29, 17, 16, 42]. We evaluated the following NLP models: CharRNN, a generator character-level RNN from a PyTorch tutorial; TreeLSTM, a generalization of LSTMs to tree-structured network topologies; and RNN ,GRU and L"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 66,
                                "start": 39
                            }
                        ],
                        "text": "ResNet-18 [He et al. 2015] and VGG-16 [Simonyan and Zisserman\n2014] are two dense convolutional neural networks which benefit from -03 optimizations."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 296,
                                "start": 269
                            }
                        ],
                        "text": "\u2026ResNet-18, a DNN for image recognition that achieved state-ofthe-art performance on ImageNet detection tasks in 2015; VGG-16 (named for the Visual Geometry Group at Oxford), a CNN used for image recognition tasks [He et al. 2015; Howard et al. 2017; Mnih et al. 2013; Simonyan and Zisserman 2014]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 14124313,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "eb42cf88027de515750f230b23b1a057dc782108",
            "isKey": false,
            "numCitedBy": 63195,
            "numCiting": 57,
            "paperAbstract": {
                "fragments": [],
                "text": "In this work we investigate the effect of the convolutional network depth on its accuracy in the large-scale image recognition setting. Our main contribution is a thorough evaluation of networks of increasing depth using an architecture with very small (3x3) convolution filters, which shows that a significant improvement on the prior-art configurations can be achieved by pushing the depth to 16-19 weight layers. These findings were the basis of our ImageNet Challenge 2014 submission, where our team secured the first and the second places in the localisation and classification tracks respectively. We also show that our representations generalise well to other datasets, where they achieve state-of-the-art results. We have made our two best-performing ConvNet models publicly available to facilitate further research on the use of deep visual representations in computer vision."
            },
            "slug": "Very-Deep-Convolutional-Networks-for-Large-Scale-Simonyan-Zisserman",
            "title": {
                "fragments": [],
                "text": "Very Deep Convolutional Networks for Large-Scale Image Recognition"
            },
            "tldr": {
                "abstractSimilarityScore": 73,
                "text": "This work investigates the effect of the convolutional network depth on its accuracy in the large-scale image recognition setting using an architecture with very small convolution filters, which shows that a significant improvement on the prior-art configurations can be achieved by pushing the depth to 16-19 weight layers."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2196579"
                        ],
                        "name": "Daniel Selsam",
                        "slug": "Daniel-Selsam",
                        "structuredName": {
                            "firstName": "Daniel",
                            "lastName": "Selsam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Daniel Selsam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145419642"
                        ],
                        "name": "Percy Liang",
                        "slug": "Percy-Liang",
                        "structuredName": {
                            "firstName": "Percy",
                            "lastName": "Liang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Percy Liang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1699040"
                        ],
                        "name": "D. Dill",
                        "slug": "D.-Dill",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Dill",
                            "middleNames": [
                                "L."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Dill"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "rphism) are only handled dynamically, inhibiting certain types of optimizations. It is possible to model arbitrarily complex static properties, such as shape information, with a dependent type theory [40], but such a design incurs signi\ufb01cant user complexity. By incorporating shape analysis into a broader type system, Relay\u2019s type system balances the desire for static tensor shapes with usability. In t"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 8755038,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0b16f99ee6a6dd9ed4f6236d557d252ccd613e6f",
            "isKey": false,
            "numCitedBy": 50,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "Noisy data, non-convex objectives, model misspecification, and numerical instability can all cause undesired behaviors in machine learning systems. As a result, detecting actual implementation errors can be extremely difficult. We demonstrate a methodology in which developers use an interactive proof assistant to both implement their system and to state a formal theorem defining what it means for their system to be correct. The process of proving this theorem interactively in the proof assistant exposes all implementation errors since any error in the program would cause the proof to fail. As a case study, we implement a new system, Certigrad, for optimizing over stochastic computation graphs, and we generate a formal (i.e. machine-checkable) proof that the gradients sampled by the system are unbiased estimates of the true mathematical gradients. We train a variational autoencoder using Certigrad and find the performance comparable to training the same model in TensorFlow."
            },
            "slug": "Developing-Bug-Free-Machine-Learning-Systems-With-Selsam-Liang",
            "title": {
                "fragments": [],
                "text": "Developing Bug-Free Machine Learning Systems With Formal Mathematics"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "A methodology in which developers use an interactive proof assistant to both implement their system and to state a formal theorem defining what it means for their system to be correct is demonstrated."
            },
            "venue": {
                "fragments": [],
                "text": "ICML"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38909097"
                        ],
                        "name": "Alec Radford",
                        "slug": "Alec-Radford",
                        "structuredName": {
                            "firstName": "Alec",
                            "lastName": "Radford",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alec Radford"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2096458"
                        ],
                        "name": "Luke Metz",
                        "slug": "Luke-Metz",
                        "structuredName": {
                            "firstName": "Luke",
                            "lastName": "Metz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Luke Metz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2127604"
                        ],
                        "name": "Soumith Chintala",
                        "slug": "Soumith-Chintala",
                        "structuredName": {
                            "firstName": "Soumith",
                            "lastName": "Chintala",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Soumith Chintala"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 242,
                                "start": 223
                            }
                        ],
                        "text": "\u2026time on five models including MobileNet-G [Howard et al. 2017], a grouped variant of the MobileNet architecture; ResNet-18, ResNet-34, and ResNet-50[He et al. 2015]; and Deep Convolutional Generative Adversarial Networks [Radford et al. 2015], a generative DNN used in unsupervised learning."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 11758569,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8388f1be26329fa45e5807e968a641ce170ea078",
            "isKey": false,
            "numCitedBy": 9978,
            "numCiting": 59,
            "paperAbstract": {
                "fragments": [],
                "text": "In recent years, supervised learning with convolutional networks (CNNs) has seen huge adoption in computer vision applications. Comparatively, unsupervised learning with CNNs has received less attention. In this work we hope to help bridge the gap between the success of CNNs for supervised learning and unsupervised learning. We introduce a class of CNNs called deep convolutional generative adversarial networks (DCGANs), that have certain architectural constraints, and demonstrate that they are a strong candidate for unsupervised learning. Training on various image datasets, we show convincing evidence that our deep convolutional adversarial pair learns a hierarchy of representations from object parts to scenes in both the generator and discriminator. Additionally, we use the learned features for novel tasks - demonstrating their applicability as general image representations."
            },
            "slug": "Unsupervised-Representation-Learning-with-Deep-Radford-Metz",
            "title": {
                "fragments": [],
                "text": "Unsupervised Representation Learning with Deep Convolutional Generative Adversarial Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This work introduces a class of CNNs called deep convolutional generative adversarial networks (DCGANs), that have certain architectural constraints, and demonstrates that they are a strong candidate for unsupervised learning."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2574060"
                        ],
                        "name": "Christian Szegedy",
                        "slug": "Christian-Szegedy",
                        "structuredName": {
                            "firstName": "Christian",
                            "lastName": "Szegedy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christian Szegedy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2157222093"
                        ],
                        "name": "Wei Liu",
                        "slug": "Wei-Liu",
                        "structuredName": {
                            "firstName": "Wei",
                            "lastName": "Liu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Wei Liu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39978391"
                        ],
                        "name": "Yangqing Jia",
                        "slug": "Yangqing-Jia",
                        "structuredName": {
                            "firstName": "Yangqing",
                            "lastName": "Jia",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yangqing Jia"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3142556"
                        ],
                        "name": "Pierre Sermanet",
                        "slug": "Pierre-Sermanet",
                        "structuredName": {
                            "firstName": "Pierre",
                            "lastName": "Sermanet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Pierre Sermanet"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144828948"
                        ],
                        "name": "Scott E. Reed",
                        "slug": "Scott-E.-Reed",
                        "structuredName": {
                            "firstName": "Scott",
                            "lastName": "Reed",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Scott E. Reed"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1838674"
                        ],
                        "name": "Dragomir Anguelov",
                        "slug": "Dragomir-Anguelov",
                        "structuredName": {
                            "firstName": "Dragomir",
                            "lastName": "Anguelov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dragomir Anguelov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1761978"
                        ],
                        "name": "D. Erhan",
                        "slug": "D.-Erhan",
                        "structuredName": {
                            "firstName": "D.",
                            "lastName": "Erhan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Erhan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2657155"
                        ],
                        "name": "Vincent Vanhoucke",
                        "slug": "Vincent-Vanhoucke",
                        "structuredName": {
                            "firstName": "Vincent",
                            "lastName": "Vanhoucke",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Vincent Vanhoucke"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "39863668"
                        ],
                        "name": "Andrew Rabinovich",
                        "slug": "Andrew-Rabinovich",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Rabinovich",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Rabinovich"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "ple convolutions that share the same input. The goal of this pass is to produce a larger kernel for the GPU, as each kernel launch on the GPU has overhead. It was designed with the Inception network [Szegedy et al. 2015] in mind, which contains blocks of convolutions that share the same input. The entire CombineParallelConv2d pass, including documentation and tests, required fewer than 350 lines of code and was cont"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 63,
                                "start": 44
                            }
                        ],
                        "text": "It was designed with the Inception network [Szegedy et al. 2015] in mind, which contains blocks of convolutions that share the same input."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 206592484,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "e15cf50aa89fee8535703b9f9512fca5bfc43327",
            "isKey": false,
            "numCitedBy": 29917,
            "numCiting": 278,
            "paperAbstract": {
                "fragments": [],
                "text": "We propose a deep convolutional neural network architecture codenamed Inception that achieves the new state of the art for classification and detection in the ImageNet Large-Scale Visual Recognition Challenge 2014 (ILSVRC14). The main hallmark of this architecture is the improved utilization of the computing resources inside the network. By a carefully crafted design, we increased the depth and width of the network while keeping the computational budget constant. To optimize quality, the architectural decisions were based on the Hebbian principle and the intuition of multi-scale processing. One particular incarnation used in our submission for ILSVRC14 is called GoogLeNet, a 22 layers deep network, the quality of which is assessed in the context of classification and detection."
            },
            "slug": "Going-deeper-with-convolutions-Szegedy-Liu",
            "title": {
                "fragments": [],
                "text": "Going deeper with convolutions"
            },
            "tldr": {
                "abstractSimilarityScore": 95,
                "text": "A deep convolutional neural network architecture codenamed Inception is proposed that achieves the new state of the art for classification and detection in the ImageNet Large-Scale Visual Recognition Challenge 2014 (ILSVRC14)."
            },
            "venue": {
                "fragments": [],
                "text": "2015 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40250403"
                        ],
                        "name": "Xiaodan Liang",
                        "slug": "Xiaodan-Liang",
                        "structuredName": {
                            "firstName": "Xiaodan",
                            "lastName": "Liang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xiaodan Liang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1720987"
                        ],
                        "name": "Xiaohui Shen",
                        "slug": "Xiaohui-Shen",
                        "structuredName": {
                            "firstName": "Xiaohui",
                            "lastName": "Shen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Xiaohui Shen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "33221685"
                        ],
                        "name": "Jiashi Feng",
                        "slug": "Jiashi-Feng",
                        "structuredName": {
                            "firstName": "Jiashi",
                            "lastName": "Feng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jiashi Feng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1737218"
                        ],
                        "name": "Liang Lin",
                        "slug": "Liang-Lin",
                        "structuredName": {
                            "firstName": "Liang",
                            "lastName": "Lin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Liang Lin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143653681"
                        ],
                        "name": "Shuicheng Yan",
                        "slug": "Shuicheng-Yan",
                        "structuredName": {
                            "firstName": "Shuicheng",
                            "lastName": "Yan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shuicheng Yan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "state. See Figure2for an example of this conversion (via the Relay TensorFlow frontend). Data Abstraction Many models make use of additional data types beyond tuples, such as lists, trees, and graphs [21, 46, 23]. Relay borrows from functional languages a generic and principled method of extension: algebraic data types (ADTs). To support them, we add mechanisms for (1) type declaration and (2) pattern matchin"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 90
                            }
                        ],
                        "text": "Deep networks require additional data types like lists, trees, and graphs [Karpathy 2015; Liang et al. 2016; Tai et al. 2015]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 7886345,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3cea26512e9fd8bcb4081af44286d395004a5433",
            "isKey": false,
            "numCitedBy": 285,
            "numCiting": 58,
            "paperAbstract": {
                "fragments": [],
                "text": "By taking the semantic object parsing task as an exemplar application scenario, we propose the Graph Long Short-Term Memory (Graph LSTM) network, which is the generalization of LSTM from sequential data or multi-dimensional data to general graph-structured data. Particularly, instead of evenly and fixedly dividing an image to pixels or patches in existing multi-dimensional LSTM structures (e.g., Row, Grid and Diagonal LSTMs), we take each arbitrary-shaped superpixel as a semantically consistent node, and adaptively construct an undirected graph for each image, where the spatial relations of the superpixels are naturally used as edges. Constructed on such an adaptive graph topology, the Graph LSTM is more naturally aligned with the visual patterns in the image (e.g., object boundaries or appearance similarities) and provides a more economical information propagation route. Furthermore, for each optimization step over Graph LSTM, we propose to use a confidence-driven scheme to update the hidden and memory states of nodes progressively till all nodes are updated. In addition, for each node, the forgets gates are adaptively learned to capture different degrees of semantic correlation with neighboring nodes. Comprehensive evaluations on four diverse semantic object parsing datasets well demonstrate the significant superiority of our Graph LSTM over other state-of-the-art solutions."
            },
            "slug": "Semantic-Object-Parsing-with-Graph-LSTM-Liang-Shen",
            "title": {
                "fragments": [],
                "text": "Semantic Object Parsing with Graph LSTM"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "The Graph Long Short-Term Memory network is proposed, which is the generalization of LSTM from sequential data or multi-dimensional data to general graph-structured data."
            },
            "venue": {
                "fragments": [],
                "text": "ECCV"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3158246"
                        ],
                        "name": "Bart van Merrienboer",
                        "slug": "Bart-van-Merrienboer",
                        "structuredName": {
                            "firstName": "Bart",
                            "lastName": "Merrienboer",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bart van Merrienboer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49398909"
                        ],
                        "name": "Alexander B. Wiltschko",
                        "slug": "Alexander-B.-Wiltschko",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Wiltschko",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander B. Wiltschko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40497400"
                        ],
                        "name": "D. Moldovan",
                        "slug": "D.-Moldovan",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Moldovan",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Moldovan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 222,
                                "start": 199
                            }
                        ],
                        "text": "As a result, major projects are repeatedly forced to patch or even fork core framework IRs [Looks et al. 2017b; Rotem et al. 2018; Shankar and Dobson 2017; TensorFlow Team 2017; Torch Team 2018; van Merri\u00ebnboer et al. 2017; XLA Team 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 250,
                                "start": 227
                            }
                        ],
                        "text": "L G\n] 1\n7 A\npr 2\n01 9\n2 Jared Roesch, Steven Lyubomirsky, Marisa Kirisame, Josh Pollock, Logan Weber, Ziheng Jiang, Tianqi Chen, Thierry Moreau, and Zachary Tatlock\nPaszke et al. 2017; Rotem et al. 2018; Tokui et al. 2015; van Merri\u00ebnboer et al. 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 28222904,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b03b6f101528d813d5f5cec7d208439932937e8d",
            "isKey": false,
            "numCitedBy": 20,
            "numCiting": 10,
            "paperAbstract": {
                "fragments": [],
                "text": "Automatic differentiation (AD) is an essential primitive for machine learning programming systems. Tangent is a new library that performs AD using source code transformation (SCT) in Python. It takes numeric functions written in a syntactic subset of Python and NumPy as input, and generates new Python functions which calculate a derivative. This approach to automatic differentiation is different from existing packages popular in machine learning, such as TensorFlow and Autograd. Advantages are that Tangent generates gradient code in Python which is readable by the user, easy to understand and debug, and has no runtime overhead. Tangent also introduces abstractions for easily injecting logic into the generated gradient code, further improving usability."
            },
            "slug": "Tangent:-Automatic-Differentiation-Using-Source-in-Merrienboer-Wiltschko",
            "title": {
                "fragments": [],
                "text": "Tangent: Automatic Differentiation Using Source Code Transformation in Python"
            },
            "tldr": {
                "abstractSimilarityScore": 57,
                "text": "Tangent is a new library that performs AD using source code transformation (SCT) in Python, and takes numeric functions written in a syntactic subset of Python and NumPy as input, and generates new Python functions which calculate a derivative."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40497777"
                        ],
                        "name": "Joseph Redmon",
                        "slug": "Joseph-Redmon",
                        "structuredName": {
                            "firstName": "Joseph",
                            "lastName": "Redmon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Joseph Redmon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2038685"
                        ],
                        "name": "S. Divvala",
                        "slug": "S.-Divvala",
                        "structuredName": {
                            "firstName": "Santosh",
                            "lastName": "Divvala",
                            "middleNames": [
                                "Kumar"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. Divvala"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2983898"
                        ],
                        "name": "Ross B. Girshick",
                        "slug": "Ross-B.-Girshick",
                        "structuredName": {
                            "firstName": "Ross",
                            "lastName": "Girshick",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ross B. Girshick"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "143787583"
                        ],
                        "name": "Ali Farhadi",
                        "slug": "Ali-Farhadi",
                        "structuredName": {
                            "firstName": "Ali",
                            "lastName": "Farhadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ali Farhadi"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 131,
                                "start": 113
                            }
                        ],
                        "text": "Deep learning (DL) has radically transformed domains like computer vision and natural language processing (NLP) [Redmon et al. 2015; Young et al. 2017]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 206594738,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f8e79ac0ea341056ef20f2616628b3e964764cfd",
            "isKey": false,
            "numCitedBy": 16956,
            "numCiting": 50,
            "paperAbstract": {
                "fragments": [],
                "text": "We present YOLO, a new approach to object detection. Prior work on object detection repurposes classifiers to perform detection. Instead, we frame object detection as a regression problem to spatially separated bounding boxes and associated class probabilities. A single neural network predicts bounding boxes and class probabilities directly from full images in one evaluation. Since the whole detection pipeline is a single network, it can be optimized end-to-end directly on detection performance. Our unified architecture is extremely fast. Our base YOLO model processes images in real-time at 45 frames per second. A smaller version of the network, Fast YOLO, processes an astounding 155 frames per second while still achieving double the mAP of other real-time detectors. Compared to state-of-the-art detection systems, YOLO makes more localization errors but is less likely to predict false positives on background. Finally, YOLO learns very general representations of objects. It outperforms other detection methods, including DPM and R-CNN, when generalizing from natural images to other domains like artwork."
            },
            "slug": "You-Only-Look-Once:-Unified,-Real-Time-Object-Redmon-Divvala",
            "title": {
                "fragments": [],
                "text": "You Only Look Once: Unified, Real-Time Object Detection"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "Compared to state-of-the-art detection systems, YOLO makes more localization errors but is less likely to predict false positives on background, and outperforms other detection methods, including DPM and R-CNN, when generalizing from natural images to other domains like artwork."
            },
            "venue": {
                "fragments": [],
                "text": "2016 IEEE Conference on Computer Vision and Pattern Recognition (CVPR)"
            },
            "year": 2016
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1967465"
                        ],
                        "name": "Olivier Breuleux",
                        "slug": "Olivier-Breuleux",
                        "structuredName": {
                            "firstName": "Olivier",
                            "lastName": "Breuleux",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Olivier Breuleux"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "84569456"
                        ],
                        "name": "Bart van Merri\u00ebnboer",
                        "slug": "Bart-van-Merri\u00ebnboer",
                        "structuredName": {
                            "firstName": "Bart",
                            "lastName": "Merri\u00ebnboer",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bart van Merri\u00ebnboer"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [],
            "corpusId": 11702759,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "95d9d8ef4242e02cd210cbea73c4ec116d974345",
            "isKey": false,
            "numCitedBy": 11,
            "numCiting": 11,
            "paperAbstract": {
                "fragments": [],
                "text": "Automatic differentiation is an essential feature of machine learning frameworks. However, its implementation in existing frameworks often has limitations. In dataflow programming frameworks such as Theano or TensorFlow the representation used makes supporting higher-order gradients difficult. On the other hand, operator overloading frameworks such as PyTorch are flexible, but do not lend themselves well to optimization. With Myia, we attempt to have the best of both worlds: Building on the work by Pearlmutter and Siskind we implement a first-order gradient operator for a subset of the Python programming language."
            },
            "slug": "Automatic-Differentiation-in-Myia-Breuleux-Merri\u00ebnboer",
            "title": {
                "fragments": [],
                "text": "Automatic Differentiation in Myia"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This work implements a first-order gradient operator for a subset of the Python programming language, building on the work by Pearlmutter and Siskind and attempting to have the best of both worlds."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144727050"
                        ],
                        "name": "Andrew G. Howard",
                        "slug": "Andrew-G.-Howard",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Howard",
                            "middleNames": [
                                "G."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew G. Howard"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2717876"
                        ],
                        "name": "Menglong Zhu",
                        "slug": "Menglong-Zhu",
                        "structuredName": {
                            "firstName": "Menglong",
                            "lastName": "Zhu",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Menglong Zhu"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [],
                        "name": "Bo Chen",
                        "slug": "Bo-Chen",
                        "structuredName": {
                            "firstName": "Bo",
                            "lastName": "Chen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bo Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2741985"
                        ],
                        "name": "Dmitry Kalenichenko",
                        "slug": "Dmitry-Kalenichenko",
                        "structuredName": {
                            "firstName": "Dmitry",
                            "lastName": "Kalenichenko",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Dmitry Kalenichenko"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2108301072"
                        ],
                        "name": "Weijun Wang",
                        "slug": "Weijun-Wang",
                        "structuredName": {
                            "firstName": "Weijun",
                            "lastName": "Wang",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Weijun Wang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "47447630"
                        ],
                        "name": "Tobias Weyand",
                        "slug": "Tobias-Weyand",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Weyand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Tobias Weyand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2612392"
                        ],
                        "name": "M. Andreetto",
                        "slug": "M.-Andreetto",
                        "structuredName": {
                            "firstName": "Marco",
                            "lastName": "Andreetto",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Andreetto"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2595180"
                        ],
                        "name": "Hartwig Adam",
                        "slug": "Hartwig-Adam",
                        "structuredName": {
                            "firstName": "Hartwig",
                            "lastName": "Adam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Hartwig Adam"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 84,
                                "start": 66
                            }
                        ],
                        "text": "We evaluated inference time on five models including MobileNet-G [Howard et al. 2017], a grouped variant of the MobileNet architecture; ResNet-18, ResNet-34, and ResNet-50[He et al. 2015]; and Deep Convolutional Generative Adversarial Networks [Radford et al. 2015], a generative DNN used in\u2026"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 249,
                                "start": 231
                            }
                        ],
                        "text": "\u2026ResNet-18, a DNN for image recognition that achieved state-ofthe-art performance on ImageNet detection tasks in 2015; VGG-16 (named for the Visual Geometry Group at Oxford), a CNN used for image recognition tasks [He et al. 2015; Howard et al. 2017; Mnih et al. 2013; Simonyan and Zisserman 2014]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 12670695,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "3647d6d0f151dc05626449ee09cc7bce55be497e",
            "isKey": false,
            "numCitedBy": 10323,
            "numCiting": 40,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a class of efficient models called MobileNets for mobile and embedded vision applications. MobileNets are based on a streamlined architecture that uses depth-wise separable convolutions to build light weight deep neural networks. We introduce two simple global hyper-parameters that efficiently trade off between latency and accuracy. These hyper-parameters allow the model builder to choose the right sized model for their application based on the constraints of the problem. We present extensive experiments on resource and accuracy tradeoffs and show strong performance compared to other popular models on ImageNet classification. We then demonstrate the effectiveness of MobileNets across a wide range of applications and use cases including object detection, finegrain classification, face attributes and large scale geo-localization."
            },
            "slug": "MobileNets:-Efficient-Convolutional-Neural-Networks-Howard-Zhu",
            "title": {
                "fragments": [],
                "text": "MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "This work introduces two simple global hyper-parameters that efficiently trade off between latency and accuracy and demonstrates the effectiveness of MobileNets across a wide range of applications and use cases including object detection, finegrain classification, face attributes and large scale geo-localization."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3158246"
                        ],
                        "name": "Bart van Merrienboer",
                        "slug": "Bart-van-Merrienboer",
                        "structuredName": {
                            "firstName": "Bart",
                            "lastName": "Merrienboer",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bart van Merrienboer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40497400"
                        ],
                        "name": "D. Moldovan",
                        "slug": "D.-Moldovan",
                        "structuredName": {
                            "firstName": "Dan",
                            "lastName": "Moldovan",
                            "middleNames": [
                                "I."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Moldovan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "49398909"
                        ],
                        "name": "Alexander B. Wiltschko",
                        "slug": "Alexander-B.-Wiltschko",
                        "structuredName": {
                            "firstName": "Alexander",
                            "lastName": "Wiltschko",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexander B. Wiltschko"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "s, which in turn accelerates DL research and product development. Popular DL compiler intermediate representations (IRs) offer different tradeoffs between expressivity, composability, and portability [1, 33, 50, 52, 5, 38]. Early frameworks adopted IRs specialized for then-state-of-the-art models and/or emerging hardware accelerators. As a result, nontrivial extensions require patching or even forking frameworks [27, 4"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 52822947,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ac77271440ef7647aff432f3c3e59bad109b9ef8",
            "isKey": false,
            "numCitedBy": 24,
            "numCiting": 30,
            "paperAbstract": {
                "fragments": [],
                "text": "The need to efficiently calculate first- and higher-order derivatives of increasingly complex models expressed in Python has stressed or exceeded the capabilities of available tools. In this work, we explore techniques from the field of automatic differentiation (AD) that can give researchers expressive power, performance and strong usability. These include source-code transformation (SCT), flexible gradient surgery, efficient in-place array operations, and higher-order derivatives. We implement and demonstrate these ideas in the Tangent software library for Python, the first AD framework for a dynamic language that uses SCT."
            },
            "slug": "Tangent:-Automatic-differentiation-using-for-typed-Merrienboer-Moldovan",
            "title": {
                "fragments": [],
                "text": "Tangent: Automatic differentiation using source-code transformation for dynamically typed array programming"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "Techniques from the field of automatic differentiation that can give researchers expressive power, performance and strong usability are explored, including source-code transformation (SCT), flexible gradient surgery, efficient in-place array operations, and higher-order derivatives."
            },
            "venue": {
                "fragments": [],
                "text": "NeurIPS"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1753223"
                        ],
                        "name": "A. Graves",
                        "slug": "A.-Graves",
                        "structuredName": {
                            "firstName": "Alex",
                            "lastName": "Graves",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Graves"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40360972"
                        ],
                        "name": "Abdel-rahman Mohamed",
                        "slug": "Abdel-rahman-Mohamed",
                        "structuredName": {
                            "firstName": "Abdel-rahman",
                            "lastName": "Mohamed",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Abdel-rahman Mohamed"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1695689"
                        ],
                        "name": "Geoffrey E. Hinton",
                        "slug": "Geoffrey-E.-Hinton",
                        "structuredName": {
                            "firstName": "Geoffrey",
                            "lastName": "Hinton",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Geoffrey E. Hinton"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 155,
                                "start": 137
                            }
                        ],
                        "text": "Recurrent neural networks have found use not only in NLP, but also in speech recognition, music transcription, eSports, and other areas [Graves et al. 2013; Hochreiter and Schmidhuber 1997; OpenAI 2018]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 206741496,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "4177ec52d1b80ed57f2e72b0f9a42365f1a8598d",
            "isKey": false,
            "numCitedBy": 6959,
            "numCiting": 35,
            "paperAbstract": {
                "fragments": [],
                "text": "Recurrent neural networks (RNNs) are a powerful model for sequential data. End-to-end training methods such as Connectionist Temporal Classification make it possible to train RNNs for sequence labelling problems where the input-output alignment is unknown. The combination of these methods with the Long Short-term Memory RNN architecture has proved particularly fruitful, delivering state-of-the-art results in cursive handwriting recognition. However RNN performance in speech recognition has so far been disappointing, with better results returned by deep feedforward networks. This paper investigates deep recurrent neural networks, which combine the multiple levels of representation that have proved so effective in deep networks with the flexible use of long range context that empowers RNNs. When trained end-to-end with suitable regularisation, we find that deep Long Short-term Memory RNNs achieve a test set error of 17.7% on the TIMIT phoneme recognition benchmark, which to our knowledge is the best recorded score."
            },
            "slug": "Speech-recognition-with-deep-recurrent-neural-Graves-Mohamed",
            "title": {
                "fragments": [],
                "text": "Speech recognition with deep recurrent neural networks"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "This paper investigates deep recurrent neural networks, which combine the multiple levels of representation that have proved so effective in deep networks with the flexible use of long range context that empowers RNNs."
            },
            "venue": {
                "fragments": [],
                "text": "2013 IEEE International Conference on Acoustics, Speech and Signal Processing"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1739503"
                        ],
                        "name": "A. G. Baydin",
                        "slug": "A.-G.-Baydin",
                        "structuredName": {
                            "firstName": "Atilim",
                            "lastName": "Baydin",
                            "middleNames": [
                                "Gunes"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. G. Baydin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1700974"
                        ],
                        "name": "Barak A. Pearlmutter",
                        "slug": "Barak-A.-Pearlmutter",
                        "structuredName": {
                            "firstName": "Barak",
                            "lastName": "Pearlmutter",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Barak A. Pearlmutter"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1767709"
                        ],
                        "name": "Alexey Radul",
                        "slug": "Alexey-Radul",
                        "structuredName": {
                            "firstName": "Alexey",
                            "lastName": "Radul",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexey Radul"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1737754"
                        ],
                        "name": "J. Siskind",
                        "slug": "J.-Siskind",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Siskind",
                            "middleNames": [
                                "Mark"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Siskind"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 221,
                                "start": 203
                            }
                        ],
                        "text": "TensorFlow\u2019s representation is sufficient for many state-of-the-art models, is easily ported to heterogeneous hardware back-ends, and allows for reverse-mode automatic differentiation [Abadi et al. 2016; Baydin et al. 2015]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 125,
                                "start": 107
                            }
                        ],
                        "text": "To this end, we also implemented a forward-mode AD algorithm using the traditional method of dual numbers [Baydin et al. 2015]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 112,
                                "start": 94
                            }
                        ],
                        "text": "In particular, we draw inspiration from various implementations of automatic differentiation [Baydin et al. 2015; Elliott 2009; Kmett et al. 2008; Pearlmutter and Siskind 2008; ThoughtWorks Inc. 2018a,b; Wang and Pothen 2017], with particular attention to techniques that can compute higher-order\u2026"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 3766791,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "da118b8aa99699edd7609fbbd081d5b93bc2e87b",
            "isKey": false,
            "numCitedBy": 1243,
            "numCiting": 278,
            "paperAbstract": {
                "fragments": [],
                "text": "Derivatives, mostly in the form of gradients and Hessians, are ubiquitous in machine learning. Automatic differentiation (AD), also called algorithmic differentiation or simply \u201cauto-diff\u201d, is a family of techniques similar to but more general than backpropagation for efficiently and accurately evaluating derivatives of numeric functions expressed as computer programs. AD is a small but established field with applications in areas including computational fluid dynamics, atmospheric sciences, and engineering design optimization. Until \nvery recently, the fields of machine learning and AD have largely been unaware of each other and, in some cases, have independently discovered each other\u2019s results. Despite its \nrelevance, general-purpose AD has been missing from the machine learning toolbox, a situation slowly changing with its ongoing adoption under the names \u201cdynamic computational \ngraphs\u201d and \u201cdifferentiable programming\u201d. We survey the intersection of AD and machine learning, cover applications where AD has direct relevance, and address the main imple- \nmentation techniques. By precisely defining the main differentiation techniques and their interrelationships, we aim to bring clarity to the usage of the terms \u201cautodiff\u201d, \u201cautomatic differentiation\u201d, and \u201csymbolic differentiation\u201d as these are encountered more and more in machine learning settings."
            },
            "slug": "Automatic-differentiation-in-machine-learning:-a-Baydin-Pearlmutter",
            "title": {
                "fragments": [],
                "text": "Automatic differentiation in machine learning: a survey"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "By precisely defining the main differentiation techniques and their interrelationships, this work aims to bring clarity to the usage of the terms \u201cautodiff\u2019, \u201cautomatic differentiation\u201d, and \u201csymbolic differentiation\" as these are encountered more and more in machine learning settings."
            },
            "venue": {
                "fragments": [],
                "text": "J. Mach. Learn. Res."
            },
            "year": 2017
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34289387"
                        ],
                        "name": "Mike Innes",
                        "slug": "Mike-Innes",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Innes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mike Innes"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 22,
                                "start": 11
                            }
                        ],
                        "text": "Zygote.jl [Innes 2018a], like Relay, uses source code transformations to implement automatic differentiation."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 20,
                                "start": 9
                            }
                        ],
                        "text": "Flux.jl [Innes 2018b] is a DL library written in Julia [JuliaLang Team 2018], a numerical computing language."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 53015357,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "145a35666dea4eaf631f999b6f61e62447bbfa96",
            "isKey": false,
            "numCitedBy": 89,
            "numCiting": 28,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents reverse-mode algorithmic differentiation (AD) based on source code transformation, in particular of the Static Single Assignment (SSA) form used by modern compilers. The approach can support control flow, nesting, mutation, recursion, data structures, higher-order functions, and other language constructs, and the output is given to an existing compiler to produce highly efficient differentiated code. Our implementation is a new AD tool for the Julia language, called Zygote, which presents high-level dynamic semantics while transparently compiling adjoint code under the hood. We discuss the benefits of this approach to both the usability and performance of AD tools."
            },
            "slug": "Don't-Unroll-Adjoint:-Differentiating-SSA-Form-Innes",
            "title": {
                "fragments": [],
                "text": "Don't Unroll Adjoint: Differentiating SSA-Form Programs"
            },
            "tldr": {
                "abstractSimilarityScore": 71,
                "text": "This paper presents reverse-mode algorithmic differentiation based on source code transformation, in particular of the Static Single Assignment form used by modern compilers, and presents a new AD tool for the Julia language, called Zygote, which presents high-level dynamic semantics while transparently compiling adjoint code under the hood."
            },
            "venue": {
                "fragments": [],
                "text": "ArXiv"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "153440022"
                        ],
                        "name": "Ian J. Goodfellow",
                        "slug": "Ian-J.-Goodfellow",
                        "structuredName": {
                            "firstName": "Ian",
                            "lastName": "Goodfellow",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ian J. Goodfellow"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2751422"
                        ],
                        "name": "Yaroslav Bulatov",
                        "slug": "Yaroslav-Bulatov",
                        "structuredName": {
                            "firstName": "Yaroslav",
                            "lastName": "Bulatov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yaroslav Bulatov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "46920727"
                        ],
                        "name": "Julian Ibarz",
                        "slug": "Julian-Ibarz",
                        "structuredName": {
                            "firstName": "Julian",
                            "lastName": "Ibarz",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Julian Ibarz"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1911894"
                        ],
                        "name": "Sacha Arnoud",
                        "slug": "Sacha-Arnoud",
                        "structuredName": {
                            "firstName": "Sacha",
                            "lastName": "Arnoud",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sacha Arnoud"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1961864"
                        ],
                        "name": "V. Shet",
                        "slug": "V.-Shet",
                        "structuredName": {
                            "firstName": "Vinay",
                            "lastName": "Shet",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "V. Shet"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 81,
                                "start": 59
                            }
                        ],
                        "text": "The learned system outperforms all hand-crafted solutions [Goodfellow et al. 2013]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 17991431,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b3d8dffb73bc93de239998548386c84177caa2ad",
            "isKey": false,
            "numCitedBy": 584,
            "numCiting": 20,
            "paperAbstract": {
                "fragments": [],
                "text": "Abstract: Recognizing arbitrary multi-character text in unconstrained natural photographs is a hard problem. In this paper, we address an equally hard sub-problem in this domain viz. recognizing arbitrary multi-digit numbers from Street View imagery. Traditional approaches to solve this problem typically separate out the localization, segmentation, and recognition steps. In this paper we propose a unified approach that integrates these three steps via the use of a deep convolutional neural network that operates directly on the image pixels. We employ the DistBelief implementation of deep neural networks in order to train large, distributed neural networks on high quality images. We find that the performance of this approach increases with the depth of the convolutional network, with the best performance occurring in the deepest architecture we trained, with eleven hidden layers. We evaluate this approach on the publicly available SVHN dataset and achieve over $96\\%$ accuracy in recognizing complete street numbers. We show that on a per-digit recognition task, we improve upon the state-of-the-art, achieving $97.84\\%$ accuracy. We also evaluate this approach on an even more challenging dataset generated from Street View imagery containing several tens of millions of street number annotations and achieve over $90\\%$ accuracy. To further explore the applicability of the proposed system to broader text recognition tasks, we apply it to synthetic distorted text from reCAPTCHA. reCAPTCHA is one of the most secure reverse turing tests that uses distorted text to distinguish humans from bots. We report a $99.8\\%$ accuracy on the hardest category of reCAPTCHA. Our evaluations on both tasks indicate that at specific operating thresholds, the performance of the proposed system is comparable to, and in some cases exceeds, that of human operators."
            },
            "slug": "Multi-digit-Number-Recognition-from-Street-View-Goodfellow-Bulatov",
            "title": {
                "fragments": [],
                "text": "Multi-digit Number Recognition from Street View Imagery using Deep Convolutional Neural Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This paper employs the DistBelief implementation of deep neural networks in order to train large, distributed neural networks on high quality images and finds that the performance of this approach increases with the depth of the convolutional network."
            },
            "venue": {
                "fragments": [],
                "text": "ICLR"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1706320"
                        ],
                        "name": "B. Stroustrup",
                        "slug": "B.-Stroustrup",
                        "structuredName": {
                            "firstName": "Bjarne",
                            "lastName": "Stroustrup",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "B. Stroustrup"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 141,
                                "start": 126
                            }
                        ],
                        "text": "We set out to build zero-cost abstractions for Relay, governed by Stroustrup\u2019s principle, \u201cWhat you don\u2019t use, you don\u2019t pay for\u201d [Stroustrup 2004]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 29464138,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "dcb38a10f1a634dc82b535527c58791dbae94429",
            "isKey": false,
            "numCitedBy": 26,
            "numCiting": 13,
            "paperAbstract": {
                "fragments": [],
                "text": "C++ was designed to be a systems programming language and has been used for embedded systems programming and other resource-constrained types of programming since the earliest days. This paper will briefly discuss how C++'s basic model of computation and data supports time and space performance, hardware access, and predictability. If that was all we wanted, we could write assembler or C, so I show how these basic features interact with abstraction mechanisms (such as classes, inheritance, and templates) to control system complexity and improve correctness while retaining the desired predictability and performance."
            },
            "slug": "Abstraction-and-the-C++-Machine-Model-Stroustrup",
            "title": {
                "fragments": [],
                "text": "Abstraction and the C++ Machine Model"
            },
            "tldr": {
                "abstractSimilarityScore": 39,
                "text": "This paper will briefly discuss how C++'s basic model of computation and data supports time and space performance, hardware access, and predictability."
            },
            "venue": {
                "fragments": [],
                "text": "ICESS"
            },
            "year": 2004
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "8421815"
                        ],
                        "name": "Kai Sheng Tai",
                        "slug": "Kai-Sheng-Tai",
                        "structuredName": {
                            "firstName": "Kai",
                            "lastName": "Tai",
                            "middleNames": [
                                "Sheng"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kai Sheng Tai"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2166511"
                        ],
                        "name": "R. Socher",
                        "slug": "R.-Socher",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Socher",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Socher"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144783904"
                        ],
                        "name": "Christopher D. Manning",
                        "slug": "Christopher-D.-Manning",
                        "structuredName": {
                            "firstName": "Christopher",
                            "lastName": "Manning",
                            "middleNames": [
                                "D."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Christopher D. Manning"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 116,
                                "start": 101
                            }
                        ],
                        "text": "The linguist decides to use a variant of TreeLSTM, a deep learning model that uses a tree structure [Tai et al. 2015]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 124,
                                "start": 109
                            }
                        ],
                        "text": "Deep networks require additional data types like lists, trees, and graphs [Karpathy 2015; Liang et al. 2016; Tai et al. 2015]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 296,
                                "start": 281
                            }
                        ],
                        "text": "We evaluated the following NLP models: CharRNN, a generator character-level RNN from a PyTorch tutorial; TreeLSTM, a generalization of LSTMs to tree-structured network topologies; RNN, GRU, and LSTM, a selection of models from the Gluon model zoo [Gluon Team 2019; Robertson 2017; Tai et al. 2015]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 3033526,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "32de44f01a96d4473d21099d15e25bc2b9f08e2f",
            "isKey": false,
            "numCitedBy": 2533,
            "numCiting": 43,
            "paperAbstract": {
                "fragments": [],
                "text": "Because of their superior ability to preserve sequence information over time, Long Short-Term Memory (LSTM) networks, a type of recurrent neural network with a more complex computational unit, have obtained strong results on a variety of sequence modeling tasks. The only underlying LSTM structure that has been explored so far is a linear chain. However, natural language exhibits syntactic properties that would naturally combine words to phrases. We introduce the Tree-LSTM, a generalization of LSTMs to tree-structured network topologies. Tree-LSTMs outperform all existing systems and strong LSTM baselines on two tasks: predicting the semantic relatedness of two sentences (SemEval 2014, Task 1) and sentiment classification (Stanford Sentiment Treebank)."
            },
            "slug": "Improved-Semantic-Representations-From-Long-Memory-Tai-Socher",
            "title": {
                "fragments": [],
                "text": "Improved Semantic Representations From Tree-Structured Long Short-Term Memory Networks"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "The Tree-LSTM is introduced, a generalization of LSTMs to tree-structured network topologies that outperform all existing systems and strong LSTM baselines on two tasks: predicting the semantic relatedness of two sentences and sentiment classification."
            },
            "venue": {
                "fragments": [],
                "text": "ACL"
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "11126631"
                        ],
                        "name": "T. Chen",
                        "slug": "T.-Chen",
                        "structuredName": {
                            "firstName": "Tian",
                            "lastName": "Chen",
                            "middleNames": [
                                "Qi"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Chen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40959192"
                        ],
                        "name": "Yulia Rubanova",
                        "slug": "Yulia-Rubanova",
                        "structuredName": {
                            "firstName": "Yulia",
                            "lastName": "Rubanova",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Yulia Rubanova"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "51012893"
                        ],
                        "name": "J. Bettencourt",
                        "slug": "J.-Bettencourt",
                        "structuredName": {
                            "firstName": "Jesse",
                            "lastName": "Bettencourt",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Bettencourt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1704657"
                        ],
                        "name": "D. Duvenaud",
                        "slug": "D.-Duvenaud",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Duvenaud",
                            "middleNames": [
                                "Kristjanson"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Duvenaud"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 160,
                                "start": 143
                            }
                        ],
                        "text": "Furthermore, it is becoming increasingly important to compute not only first-order gradients of functions but potentially nth-order gradients [Chen et al. 2018b; Liu et al. 2018]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 155,
                                "start": 138
                            }
                        ],
                        "text": "Since Relay is a high-level IR, it depends on a low-level code generator, such as TVM or Halide, to produce dense linear algebra kernels [Chen et al. 2018a; Ragan-Kelley et al. 2013]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 88,
                                "start": 71
                            }
                        ],
                        "text": "For producing efficiently compiled operators, Relay relies on the TVM [Chen et al. 2018a] compiler stack."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 49310446,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "449310e3538b08b43227d660227dfd2875c3c3c1",
            "isKey": false,
            "numCitedBy": 1878,
            "numCiting": 67,
            "paperAbstract": {
                "fragments": [],
                "text": "We introduce a new family of deep neural network models. Instead of specifying a discrete sequence of hidden layers, we parameterize the derivative of the hidden state using a neural network. The output of the network is computed using a black-box differential equation solver. These continuous-depth models have constant memory cost, adapt their evaluation strategy to each input, and can explicitly trade numerical precision for speed. We demonstrate these properties in continuous-depth residual networks and continuous-time latent variable models. We also construct continuous normalizing flows, a generative model that can train by maximum likelihood, without partitioning or ordering the data dimensions. For training, we show how to scalably backpropagate through any ODE solver, without access to its internal operations. This allows end-to-end training of ODEs within larger models."
            },
            "slug": "Neural-Ordinary-Differential-Equations-Chen-Rubanova",
            "title": {
                "fragments": [],
                "text": "Neural Ordinary Differential Equations"
            },
            "tldr": {
                "abstractSimilarityScore": 36,
                "text": "This work shows how to scalably backpropagate through any ODE solver, without access to its internal operations, which allows end-to-end training of ODEs within larger models."
            },
            "venue": {
                "fragments": [],
                "text": "NeurIPS"
            },
            "year": 2018
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145885839"
                        ],
                        "name": "J. Moses",
                        "slug": "J.-Moses",
                        "structuredName": {
                            "firstName": "Joel",
                            "lastName": "Moses",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Moses"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 136,
                                "start": 126
                            }
                        ],
                        "text": "The lack of lexical scope in traditional graphs complicates language features such as first-class functions and control-flow [Moses 1970; Sandewall 1971]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "raphs complicates language features, like \ufb01rst-class functions and control \ufb02ow, and reduces the precision of traditional analyses, such as liveness, because the high-level program structure is absent [32, 39]. The addition of a humble let binding, a central concept in functional languages, provides explicit sharing and a solution to the problems outlined above. Control Flow Emerging models, particularly i"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 17514262,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "634351ffae75acb390779094f484d22ac31a164f",
            "isKey": false,
            "numCitedBy": 92,
            "numCiting": 7,
            "paperAbstract": {
                "fragments": [],
                "text": "A problem common to many powerful programming languages arises when one has to determine what values to assign to free variables in functions. Different implementational approaches which attempt to solve the problem are considered. The discussion concentrates on LISP implementations and points out why most current LISP systems are not as general as the original LISP 1.5 system. Readers not familiar with LISP should be able to read this paper without difficulty since we have tried to couch the argument in ALGOL-like terms as much as possible."
            },
            "slug": "The-function-of-FUNCTION-in-LISP-or-why-the-FUNARG-Moses",
            "title": {
                "fragments": [],
                "text": "The function of FUNCTION in LISP or why the FUNARG problem should be called the environment problem"
            },
            "tldr": {
                "abstractSimilarityScore": 77,
                "text": "A problem common to many powerful programming languages arises when one has to determine what values to assign to free variables in functions and the argument is tried to couch the argument in ALGOL-like terms as much as possible."
            },
            "venue": {
                "fragments": [],
                "text": "SIGS"
            },
            "year": 1970
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1720304"
                        ],
                        "name": "E. Sandewall",
                        "slug": "E.-Sandewall",
                        "structuredName": {
                            "firstName": "Erik",
                            "lastName": "Sandewall",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "E. Sandewall"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 152,
                                "start": 138
                            }
                        ],
                        "text": "The lack of lexical scope in traditional graphs complicates language features such as first-class functions and control-flow [Moses 1970; Sandewall 1971]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "raphs complicates language features, like \ufb01rst-class functions and control \ufb02ow, and reduces the precision of traditional analyses, such as liveness, because the high-level program structure is absent [32, 39]. The addition of a humble let binding, a central concept in functional languages, provides explicit sharing and a solution to the problems outlined above. Control Flow Emerging models, particularly i"
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 38587305,
            "fieldsOfStudy": [
                "Mathematics"
            ],
            "id": "46329b4a7b8c0fc6c88363283f7dc8f0d0910188",
            "isKey": false,
            "numCitedBy": 18,
            "numCiting": 7,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper is a response to Joel Moses's recent paper, \"The Function of FUNCTION in LISP, or ... \". We give some examples where the FUNARG feature of LISP 1. 5 is relative useful, and suggest a computationally efficient implementation of FUNARG. The idea in the proposal is to let a FUNARG-expression create indirect-addressing type bindings on the push-list for variables."
            },
            "slug": "A-proposed-solution-to-the-FUNARG-problem-Sandewall",
            "title": {
                "fragments": [],
                "text": "A proposed solution to the FUNARG problem"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "The idea in the proposal is to let a FUNARG-expression create indirect-addressing type bindings on the push-list for variables."
            },
            "venue": {
                "fragments": [],
                "text": "SIGS"
            },
            "year": 1971
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1752762"
                        ],
                        "name": "J. Gustafson",
                        "slug": "J.-Gustafson",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Gustafson",
                            "middleNames": [
                                "L."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Gustafson"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 250,
                                "start": 236
                            }
                        ],
                        "text": "Although researchers have developed a variety of quantization strategies, each of which makes use of different bit-widths, rounding modes, and datatypes, our researcher must use a strategy supported by existing frameworks [Google 2019; Gustafson 2015; PyTorch Team 2019]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 125565114,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ee74cf1fdbd9c9a0991fa544251feb4604fda28e",
            "isKey": false,
            "numCitedBy": 89,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "The-End-of-Error:-Unum-Computing-Gustafson",
            "title": {
                "fragments": [],
                "text": "The End of Error: Unum Computing"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2015
        }
    ],
    "meta_info": {
        "citationIntent": "all",
        "citationIntentCount": {
            "background": 25,
            "methodology": 25
        },
        "citationType": "citedPapers",
        "pageNumber": 1,
        "requestedPageSize": 10,
        "sort": "relevance",
        "totalCitations": 39,
        "totalPages": 4
    },
    "page_url": "https://www.semanticscholar.org/paper/Relay:-A-High-Level-IR-for-Deep-Learning-Roesch-Lyubomirsky/98d8a3053b6cc536c87e4745cbe683ae4ff861a9?sort=total-citations"
}