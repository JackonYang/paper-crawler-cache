{
    "links": [
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1777324"
                        ],
                        "name": "Anton Lokhmotov",
                        "slug": "Anton-Lokhmotov",
                        "structuredName": {
                            "firstName": "Anton",
                            "lastName": "Lokhmotov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anton Lokhmotov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1796386"
                        ],
                        "name": "J. Absar",
                        "slug": "J.-Absar",
                        "structuredName": {
                            "firstName": "Javed",
                            "lastName": "Absar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Absar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1807282"
                        ],
                        "name": "S. V. Haastregt",
                        "slug": "S.-V.-Haastregt",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Haastregt",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. V. Haastregt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145510407"
                        ],
                        "name": "Alexey Kravets",
                        "slug": "Alexey-Kravets",
                        "structuredName": {
                            "firstName": "Alexey",
                            "lastName": "Kravets",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexey Kravets"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1734519"
                        ],
                        "name": "A. Donaldson",
                        "slug": "A.-Donaldson",
                        "structuredName": {
                            "firstName": "Alastair",
                            "lastName": "Donaldson",
                            "middleNames": [
                                "F."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Donaldson"
                    }
                ]
            ],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 28,
                                "start": 25
                            }
                        ],
                        "text": "The PENCIL specification [3] contains the rules in full."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 62457279,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "b4e609a85eaf676338a2741ac8a618e51f57f968",
            "isKey": false,
            "numCitedBy": 11,
            "numCiting": 16,
            "paperAbstract": {
                "fragments": [],
                "text": "Programming accelerators such as GPUs with low-level APIs and languages such as OpenCL and CUDA is difficult, error prone, and not performance-portable. Automatic parallelization and domain specific languages (DSLs) have been proposed to hide this complexity and to regain some performance portability. We present PENCIL, a rigorously-defined subset of GNU C99 with specific programming rules and few extensions. Adherence to this subset and the use of these extensions enable compilers to exploit parallelism and to better optimize code when targeting accelerators. We intend PENCIL both as a portable implementation language to facilitate the acceleration of applications, \nand as a tractable target language for DSL compilers."
            },
            "slug": "PENCIL-Language-Specification-Baghdadi-Cohen",
            "title": {
                "fragments": [],
                "text": "PENCIL Language Specification"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "PENCIL is presented, a rigorously-defined subset of GNU C99 with specific programming rules and few extensions that enable compilers to exploit parallelism and to better optimize code when targeting accelerators."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2978162"
                        ],
                        "name": "Ulysse Beaugnon",
                        "slug": "Ulysse-Beaugnon",
                        "structuredName": {
                            "firstName": "Ulysse",
                            "lastName": "Beaugnon",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Ulysse Beaugnon"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145510407"
                        ],
                        "name": "Alexey Kravets",
                        "slug": "Alexey-Kravets",
                        "structuredName": {
                            "firstName": "Alexey",
                            "lastName": "Kravets",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexey Kravets"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1807282"
                        ],
                        "name": "S. V. Haastregt",
                        "slug": "S.-V.-Haastregt",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Haastregt",
                            "middleNames": [
                                "van"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "S. V. Haastregt"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "102914732"
                        ],
                        "name": "D. Tweed",
                        "slug": "D.-Tweed",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Tweed",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Tweed"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1796386"
                        ],
                        "name": "J. Absar",
                        "slug": "J.-Absar",
                        "structuredName": {
                            "firstName": "Javed",
                            "lastName": "Absar",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Absar"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1777324"
                        ],
                        "name": "Anton Lokhmotov",
                        "slug": "Anton-Lokhmotov",
                        "structuredName": {
                            "firstName": "Anton",
                            "lastName": "Lokhmotov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anton Lokhmotov"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 42,
                                "start": 39
                            }
                        ],
                        "text": "A detailed description is available in [4]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 71,
                                "start": 68
                            }
                        ],
                        "text": "\u2022 six kernels generated using the VOBLA linear algebra DSL compiler [4];"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 210,
                                "start": 207
                            }
                        ],
                        "text": "Domainspecific languages (DSLs) can circumvent this problem: it is often clear how parallelism can be exploited given high-level knowledge about standard operations in a given domain, such as linear algebra [4], image processing [21] or partial differential equations."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 98,
                                "start": 95
                            }
                        ],
                        "text": "VOBLA is a domain specific language designed by ARM for implementing linear algebra algorithms [4]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 7764937,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "fbb1e3a18f530b4369368fb5ecc041fced246d01",
            "isKey": false,
            "numCitedBy": 17,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "We present VOBLA, a domain-specific language designed for programming linear algebra libraries. VOBLA is compiled to PENCIL, a domain independent intermediate language designed for efficient mapping to accelerator architectures such as GPGPUs. PENCIL is compiled to efficient, platform-specific OpenCL code using techniques based on the polyhedral model. This approach addresses both the programmer productivity and performance portability concerns associated with accelerator programming.\n We demonstrate our approach by using VOBLA to implement a BLAS library. We have evaluated the performance of OpenCL code generated using our compilation flow on ARM Mali, AMD Radeon, and AMD Opteron platforms. The generated code is currently on average 1.9x slower than highly hand-optimized OpenCL code, but on average 8.1x faster than straightforward OpenCL code. Given that the VOBLA coding takes significantly less effort compared to hand-optimizing OpenCL code, we believe our approach leads to improved productivity and performance portability."
            },
            "slug": "VOBLA:-a-vehicle-for-optimized-basic-linear-algebra-Beaugnon-Kravets",
            "title": {
                "fragments": [],
                "text": "VOBLA: a vehicle for optimized basic linear algebra"
            },
            "tldr": {
                "abstractSimilarityScore": 63,
                "text": "VOBLA is compiled to PENCIL, a domain independent intermediate language designed for efficient mapping to accelerator architectures such as GPGPUs, and the performance of OpenCL code generated using the compilation flow on ARM Mali, AMD Radeon, and AMD Opteron platforms is evaluated."
            },
            "venue": {
                "fragments": [],
                "text": "LCTES '14"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1694512"
                        ],
                        "name": "H. Chafi",
                        "slug": "H.-Chafi",
                        "structuredName": {
                            "firstName": "Hassan",
                            "lastName": "Chafi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "H. Chafi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1706327"
                        ],
                        "name": "Arvind K. Sujeeth",
                        "slug": "Arvind-K.-Sujeeth",
                        "structuredName": {
                            "firstName": "Arvind",
                            "lastName": "Sujeeth",
                            "middleNames": [
                                "K."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Arvind K. Sujeeth"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144806284"
                        ],
                        "name": "Kevin J. Brown",
                        "slug": "Kevin-J.-Brown",
                        "structuredName": {
                            "firstName": "Kevin",
                            "lastName": "Brown",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kevin J. Brown"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "34946720"
                        ],
                        "name": "HyoukJoong Lee",
                        "slug": "HyoukJoong-Lee",
                        "structuredName": {
                            "firstName": "HyoukJoong",
                            "lastName": "Lee",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "HyoukJoong Lee"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2920004"
                        ],
                        "name": "Anand R. Atreya",
                        "slug": "Anand-R.-Atreya",
                        "structuredName": {
                            "firstName": "Anand",
                            "lastName": "Atreya",
                            "middleNames": [
                                "R."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anand R. Atreya"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1746638"
                        ],
                        "name": "K. Olukotun",
                        "slug": "K.-Olukotun",
                        "structuredName": {
                            "firstName": "Kunle",
                            "lastName": "Olukotun",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Olukotun"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 10,
                                "start": 7
                            }
                        ],
                        "text": "Delite [7] is a more generic DSL framework and run-time designed to simplify building DSL compilers."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 8342773,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "fdf5855c9ccffbcfb2b2380879fd743be47a1ccf",
            "isKey": false,
            "numCitedBy": 168,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Exploiting heterogeneous parallel hardware currently requires mapping application code to multiple disparate programming models. Unfortunately, general-purpose programming models available today can yield high performance but are too low-level to be accessible to the average programmer. We propose leveraging domain-specific languages (DSLs) to map high-level application code to heterogeneous devices. To demonstrate the potential of this approach we present OptiML, a DSL for machine learning. OptiML programs are implicitly parallel and can achieve high performance on heterogeneous hardware with no modification required to the source code. For such a DSL-based approach to be tractable at large scales, better tools are required for DSL authors to simplify language creation and parallelization. To address this concern, we introduce Delite, a system designed specifically for DSLs that is both a framework for creating an implicitly parallel DSL as well as a dynamic runtime providing automated targeting to heterogeneous parallel hardware. We show that OptiML running on Delite achieves single-threaded, parallel, and GPU performance superior to explicitly parallelized MATLAB code in nearly all cases."
            },
            "slug": "A-domain-specific-approach-to-heterogeneous-Chafi-Sujeeth",
            "title": {
                "fragments": [],
                "text": "A domain-specific approach to heterogeneous parallelism"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "Delite is introduced, a system designed specifically for DSLs that is both a framework for creating an implicitly parallel DSL as well as a dynamic runtime providing automated targeting to heterogeneous parallel hardware."
            },
            "venue": {
                "fragments": [],
                "text": "PPoPP '11"
            },
            "year": 2011
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1401885963"
                        ],
                        "name": "Jonathan Ragan-Kelley",
                        "slug": "Jonathan-Ragan-Kelley",
                        "structuredName": {
                            "firstName": "Jonathan",
                            "lastName": "Ragan-Kelley",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jonathan Ragan-Kelley"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2496412"
                        ],
                        "name": "Connelly Barnes",
                        "slug": "Connelly-Barnes",
                        "structuredName": {
                            "firstName": "Connelly",
                            "lastName": "Barnes",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Connelly Barnes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144187067"
                        ],
                        "name": "Andrew Adams",
                        "slug": "Andrew-Adams",
                        "structuredName": {
                            "firstName": "Andrew",
                            "lastName": "Adams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Andrew Adams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145799132"
                        ],
                        "name": "Sylvain Paris",
                        "slug": "Sylvain-Paris",
                        "structuredName": {
                            "firstName": "Sylvain",
                            "lastName": "Paris",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sylvain Paris"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145403226"
                        ],
                        "name": "F. Durand",
                        "slug": "F.-Durand",
                        "structuredName": {
                            "firstName": "Fr\u00e9do",
                            "lastName": "Durand",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Durand"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1709150"
                        ],
                        "name": "Saman P. Amarasinghe",
                        "slug": "Saman-P.-Amarasinghe",
                        "structuredName": {
                            "firstName": "Saman",
                            "lastName": "Amarasinghe",
                            "middleNames": [
                                "P."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Saman P. Amarasinghe"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 54,
                                "start": 50
                            }
                        ],
                        "text": "Using such an approach, DSL compilers like Halide [21] and Diderot [9], designed for image processing, and OoLaLa [16], designed for linear algebra, show promising results."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 233,
                                "start": 229
                            }
                        ],
                        "text": "Domainspecific languages (DSLs) can circumvent this problem: it is often clear how parallelism can be exploited given high-level knowledge about standard operations in a given domain, such as linear algebra [4], image processing [21] or partial differential equations."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 52,
                                "start": 46
                            }
                        ],
                        "text": "Using such an approach, DSL compilers such as Halide [4] and Diderot [29] (for image processing) and OoLaLa [30] (for linear algebra) show promising results."
                    },
                    "intents": []
                }
            ],
            "corpusId": 5885207,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d032f74b16457584f8a60ae07cfef9b617033638",
            "isKey": false,
            "numCitedBy": 878,
            "numCiting": 34,
            "paperAbstract": {
                "fragments": [],
                "text": "Image processing pipelines combine the challenges of stencil computations and stream programs. They are composed of large graphs of different stencil stages, as well as complex reductions, and stages with global or data-dependent access patterns. Because of their complex structure, the performance difference between a naive implementation of a pipeline and an optimized one is often an order of magnitude. Efficient implementations require optimization of both parallelism and locality, but due to the nature of stencils, there is a fundamental tension between parallelism, locality, and introducing redundant recomputation of shared values. We present a systematic model of the tradeoff space fundamental to stencil pipelines, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule. Combining this compiler with stochastic search over the space of schedules enables terse, composable programs to achieve state-of-the-art performance on a wide range of real image processing pipelines, and across different hardware architectures, including multicores with SIMD, and heterogeneous CPU+GPU execution. From simple Halide programs written in a few hours, we demonstrate performance up to 5x faster than hand-tuned C, intrinsics, and CUDA implementations optimized by experts over weeks or months, for image processing applications beyond the reach of past automatic compilers."
            },
            "slug": "Halide:-a-language-and-compiler-for-optimizing-and-Ragan-Kelley-Barnes",
            "title": {
                "fragments": [],
                "text": "Halide: a language and compiler for optimizing parallelism, locality, and recomputation in image processing pipelines"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "A systematic model of the tradeoff space fundamental to stencil pipelines is presented, a schedule representation which describes concrete points in this space for each stage in an image processing pipeline, and an optimizing compiler for the Halide image processing language that synthesizes high performance implementations from a Halide algorithm and a schedule are presented."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI 2013"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3281978"
                        ],
                        "name": "J. Juega",
                        "slug": "J.-Juega",
                        "structuredName": {
                            "firstName": "Juan",
                            "lastName": "Juega",
                            "middleNames": [
                                "Carlos"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Juega"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144431297"
                        ],
                        "name": "J. I. G\u00f3mez",
                        "slug": "J.-I.-G\u00f3mez",
                        "structuredName": {
                            "firstName": "Jos\u00e9",
                            "lastName": "G\u00f3mez",
                            "middleNames": [
                                "Ignacio"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. I. G\u00f3mez"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1916522"
                        ],
                        "name": "C. Tenllado",
                        "slug": "C.-Tenllado",
                        "structuredName": {
                            "firstName": "Christian",
                            "lastName": "Tenllado",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Tenllado"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145410654"
                        ],
                        "name": "F. Catthoor",
                        "slug": "F.-Catthoor",
                        "structuredName": {
                            "firstName": "Francky",
                            "lastName": "Catthoor",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Catthoor"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 74,
                                "start": 70
                            }
                        ],
                        "text": "In this paper, we used an existing polyhedral compiler for GPUs, PPCG [26], and extended it to handle PENCIL code."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 20,
                                "start": 16
                            }
                        ],
                        "text": "This means that PPCG can schedule (i.e., change the order of execution of) the loop headed at Line 3 and its body as a whole, but it cannot schedule the individual statements in the body."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 32,
                                "start": 28
                            }
                        ],
                        "text": "The constraints are used by PPCG when generating an AST from a schedule to simplify the generated AST expressions."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 99,
                                "start": 95
                            }
                        ],
                        "text": "We evaluated the performance of OpenCL code generated from PENCIL using pencilcc, a version of PPCG incorporating a runtime library and the changes discussed in the previous section.1 To verify that PENCIL can be used both as a standalone language and intermediate language for DSL compilers, we used both benchmarks written directly in PENCIL and code generated by DSL compilers."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 105,
                                "start": 101
                            }
                        ],
                        "text": "We evaluate the performance of OpenCL code generated from PENCIL using a development version of PPCG [26]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 80,
                                "start": 76
                            }
                        ],
                        "text": "Although the argument of a __pencil_assume statement can be any expression, PPCG currently only exploits quasi-affine ones."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 4,
                                "start": 0
                            }
                        ],
                        "text": "PPCG treats any non-static-affine conditional or loop with a nonstatic-affine loop guard as a single macro-statement together with its body (i.e., as a statement encapsulating both control and body)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 43,
                                "start": 39
                            }
                        ],
                        "text": "We next discuss the changes we made to PPCG to support PENCIL."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 37,
                                "start": 33
                            }
                        ],
                        "text": "This set of variables is used by PPCG to ensure that their live ranges do not overlap in affine transformations, and to privatize them if needed when generating parallel code."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 47,
                                "start": 43
                            }
                        ],
                        "text": "For example, due to the break in Figure 6, PPCG treats the entire loop headed at Line 3 as a single statement."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 40,
                                "start": 36
                            }
                        ],
                        "text": "B. Compilation of PENCIL\nWe adapted PPCG [21], an existing polyhedral compiler for GPUs, to handle PENCIL."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 4,
                                "start": 0
                            }
                        ],
                        "text": "PPCG relies on the pet library [22] to extract the iteration domain and access relations; the dependence analysis is performed by the isl library [23]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 1212874,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "963a1e639971e7e3a4e6c871cf9c0b410e5532d0",
            "isKey": false,
            "numCitedBy": 323,
            "numCiting": 65,
            "paperAbstract": {
                "fragments": [],
                "text": "This article addresses the compilation of a sequential program for parallel execution on a modern GPU. To this end, we present a novel source-to-source compiler called PPCG. PPCG singles out for its ability to accelerate computations from any static control loop nest, generating multiple CUDA kernels when necessary. We introduce a multilevel tiling strategy and a code generation scheme for the parallelization and locality optimization of imperfectly nested loops, managing memory and exposing concurrency according to the constraints of modern GPUs. We evaluate our algorithms and tool on the entire PolyBench suite."
            },
            "slug": "Polyhedral-parallel-code-generation-for-CUDA-Verdoolaege-Juega",
            "title": {
                "fragments": [],
                "text": "Polyhedral parallel code generation for CUDA"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "A novel source-to-source compiler called PPCG is presented, which introduces a multilevel tiling strategy and a code generation scheme for the parallelization and locality optimization of imperfectly nested loops, managing memory and exposing concurrency according to the constraints of modern GPUs."
            },
            "venue": {
                "fragments": [],
                "text": "TACO"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1751936"
                        ],
                        "name": "Uday Bondhugula",
                        "slug": "Uday-Bondhugula",
                        "structuredName": {
                            "firstName": "Uday",
                            "lastName": "Bondhugula",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Uday Bondhugula"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1763408"
                        ],
                        "name": "Albert Hartono",
                        "slug": "Albert-Hartono",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Hartono",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Hartono"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145981817"
                        ],
                        "name": "J. Ramanujam",
                        "slug": "J.-Ramanujam",
                        "structuredName": {
                            "firstName": "J.",
                            "lastName": "Ramanujam",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Ramanujam"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145293384"
                        ],
                        "name": "P. Sadayappan",
                        "slug": "P.-Sadayappan",
                        "structuredName": {
                            "firstName": "P.",
                            "lastName": "Sadayappan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Sadayappan"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 76,
                                "start": 73
                            }
                        ],
                        "text": "A new schedule is computed by isl using a variant of the Pluto algorithm [5] (the computation of a new schedule is the step where most loop nest transformations are applied)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 192,
                                "start": 189
                            }
                        ],
                        "text": "The experiments evaluate whether PENCIL enables the parallelization (mapping to OpenCL) of kernels that cannot be parallelized with the current state-of-the-art polyhedral compilers (Pluto [5])."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 62,
                                "start": 57
                            }
                        ],
                        "text": "A new schedule is computed by isl using a variant of the Pluto algorithm [24] (this latter step applies most loop nest transformations)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 204,
                                "start": 199
                            }
                        ],
                        "text": "Our experiments were designed to evaluate (a) whether PENCIL enables the parallelization (mapping to OpenCL) of kernels that cannot be parallelized with current state-ofthe-art polyhedral compilers (Pluto [24]), and (b) whether PENCIL enables the generation of efficient code (by comparing the performance of the automatically generated code to hand-crafted code)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 93,
                                "start": 90
                            }
                        ],
                        "text": "The implementation of a heuristic similar to the smartfuse heuristic implemented by Pluto [5] would allow a better trade-off between parallelism and data locality and would enhance performance."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 50,
                                "start": 45
                            }
                        ],
                        "text": "The implementation of a heuristic similar to Pluto\u2019s smartfuse heuristic [24] would allow a better trade-off between parallelism and data locality and would enhance performance."
                    },
                    "intents": []
                }
            ],
            "corpusId": 7086982,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "f0f4757aa2f923a349e8357e73850a78e9b80fee",
            "isKey": true,
            "numCitedBy": 860,
            "numCiting": 71,
            "paperAbstract": {
                "fragments": [],
                "text": "We present the design and implementation of an automatic polyhedral source-to-source transformation framework that can optimize regular programs (sequences of possibly imperfectly nested loops) for parallelism and locality simultaneously. Through this work, we show the practicality of analytical model-driven automatic transformation in the polyhedral model -- far beyond what is possible by current production compilers. Unlike previous works, our approach is an end-to-end fully automatic one driven by an integer linear optimization framework that takes an explicit view of finding good ways of tiling for parallelism and locality using affine transformations. The framework has been implemented into a tool to automatically generate OpenMP parallel code from C program sections. Experimental results from the tool show very high speedups for local and parallel execution on multi-cores over state-of-the-art compiler frameworks from the research community as well as the best native production compilers. The system also enables the easy use of powerful empirical/iterative optimization for general arbitrarily nested loop sequences."
            },
            "slug": "A-practical-automatic-polyhedral-parallelizer-and-Bondhugula-Hartono",
            "title": {
                "fragments": [],
                "text": "A practical automatic polyhedral parallelizer and locality optimizer"
            },
            "tldr": {
                "abstractSimilarityScore": 60,
                "text": "An automatic polyhedral source-to-source transformation framework that can optimize regular programs for parallelism and locality simultaneously simultaneously and is implemented into a tool to automatically generate OpenMP parallel code from C program sections."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI '08"
            },
            "year": 2008
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38503116"
                        ],
                        "name": "Lee W. Howes",
                        "slug": "Lee-W.-Howes",
                        "structuredName": {
                            "firstName": "Lee",
                            "lastName": "Howes",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lee W. Howes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1777324"
                        ],
                        "name": "Anton Lokhmotov",
                        "slug": "Anton-Lokhmotov",
                        "structuredName": {
                            "firstName": "Anton",
                            "lastName": "Lokhmotov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anton Lokhmotov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1734519"
                        ],
                        "name": "A. Donaldson",
                        "slug": "A.-Donaldson",
                        "structuredName": {
                            "firstName": "Alastair",
                            "lastName": "Donaldson",
                            "middleNames": [
                                "F."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Donaldson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144676513"
                        ],
                        "name": "P. Kelly",
                        "slug": "P.-Kelly",
                        "structuredName": {
                            "firstName": "Paul",
                            "lastName": "Kelly",
                            "middleNames": [
                                "H.",
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Kelly"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "[18])."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [],
                        "text": "As a language construct, they find their origin in the decoupled access/execute (\u00e6cute) model [18], which allows expressing memory access patterns and execution constraints of kernels."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 13754738,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "13adaef164f8671b8f4f426a0ae057ee5154ca37",
            "isKey": false,
            "numCitedBy": 40,
            "numCiting": 24,
            "paperAbstract": {
                "fragments": [],
                "text": "On multi-core architectures with software-managed memories, effectively orchestrating data movement is essential to performance, but is tedious and error-prone. In this paper we show that when the programmer can explicitly specify both the memory access pattern and the execution schedule of a computation kernel, the compiler or run-time system can derive efficient data movement, even if analysis of kernel code is difficult or impossible. We have developed a framework of C++ classes for decoupled Access/Execute specifications, allowing for automatic communication optimisations such as software pipelining and data reuse. We demonstrate the ease and efficiency of programming the Cell Broadband Engine architecture using these classes by implementing a set of benchmarks, which exhibit data reuse and non-affine access functions, and by comparing these implementations against alternative implementations, which use hand-written DMA transfers and software-based caching."
            },
            "slug": "Deriving-Efficient-Data-Movement-from-Decoupled-Howes-Lokhmotov",
            "title": {
                "fragments": [],
                "text": "Deriving Efficient Data Movement from Decoupled Access/Execute Specifications"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "A framework of C++ classes for decoupled Access/Execute specifications is developed, allowing for automatic communication optimisations such as software pipelining and data reuse, and demonstrates the ease and efficiency of programming the Cell Broadband Engine architecture using these classes."
            },
            "venue": {
                "fragments": [],
                "text": "HiPEAC"
            },
            "year": 2009
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3295217"
                        ],
                        "name": "Anthony Danalis",
                        "slug": "Anthony-Danalis",
                        "structuredName": {
                            "firstName": "Anthony",
                            "lastName": "Danalis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anthony Danalis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145220138"
                        ],
                        "name": "G. Marin",
                        "slug": "G.-Marin",
                        "structuredName": {
                            "firstName": "Gabriel",
                            "lastName": "Marin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Marin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145116724"
                        ],
                        "name": "Collin McCurdy",
                        "slug": "Collin-McCurdy",
                        "structuredName": {
                            "firstName": "Collin",
                            "lastName": "McCurdy",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Collin McCurdy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2374686"
                        ],
                        "name": "J. Meredith",
                        "slug": "J.-Meredith",
                        "structuredName": {
                            "firstName": "Jeremy",
                            "lastName": "Meredith",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Meredith"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3128725"
                        ],
                        "name": "P. Roth",
                        "slug": "P.-Roth",
                        "structuredName": {
                            "firstName": "Philip",
                            "lastName": "Roth",
                            "middleNames": [
                                "C."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Roth"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2598131"
                        ],
                        "name": "Kyle Spafford",
                        "slug": "Kyle-Spafford",
                        "structuredName": {
                            "firstName": "Kyle",
                            "lastName": "Spafford",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kyle Spafford"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2845461"
                        ],
                        "name": "V. Tipparaju",
                        "slug": "V.-Tipparaju",
                        "structuredName": {
                            "firstName": "Vinod",
                            "lastName": "Tipparaju",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "V. Tipparaju"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "7553591"
                        ],
                        "name": "J. Vetter",
                        "slug": "J.-Vetter",
                        "structuredName": {
                            "firstName": "Jeffrey",
                            "lastName": "Vetter",
                            "middleNames": [
                                "S."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Vetter"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 181,
                                "start": 177
                            }
                        ],
                        "text": "The set of benchmarks written directly in PENCIL consists of a image processing benchmark suite by Realeyes (Section IV-A) and a selected set of benchmarks from the Rodinia and SHOC suites (Section IV-B)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 367,
                                "start": 363
                            }
                        ],
                        "text": "The applications, which originate from hand-written benchmark suites or were generated by DSL-to-PENCIL compilers, are: \u2022 seven image processing kernels written in PENCIL and\ncovering computationally intensive parts of a computer vision stack used by Realeyes, a leader in recognizing facial emotions (http://www.realeyesit.com); \u2022 five benchmarks extracted from the SHOC [6] and Rodinia [7] suites and re-written in PENCIL; \u2022 six kernels generated using the VOBLA linear algebra DSL compiler [3]; \u2022 two signal processing radar applications generated from code written in the SpearDE streaming DSL [8]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 100,
                                "start": 96
                            }
                        ],
                        "text": "Our second set of benchmarks consists of reverse-engineered benchmarks from the Rodinia [7] and SHOC [6] suites."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 101,
                                "start": 97
                            }
                        ],
                        "text": "We compared the performance of pencilcc-generated code for these benchmarks with the Rodinia and SHOC reference implementations."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 59,
                                "start": 55
                            }
                        ],
                        "text": "When choosing benchmarks from the Rodinia [8] and SHOC [11] benchmark suites for writing in PENCIL (reverse-engineering from OpenCL to PENCIL), we decided to focus our resources on a selection of benchmarks that offer diversity (cover different Berkeley \u201dmotifs\u201d [1] such as dense and sparse linear algebra, structured grids, and graph traversal), and pose a challenge to traditional polyhedral compilers arising from non static-affine code."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 45,
                                "start": 41
                            }
                        ],
                        "text": "\u2022 six benchmarks extracted from the SHOC [11] and the Rodinia [8] benchmark suites re-written in PENCIL;"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 84,
                                "start": 80
                            }
                        ],
                        "text": "C. VOBLA DSL for Linear Algebra\nThe image processing benchmarks and Rodinia and SHOC benchmarks of Sections IV-A and IV-B demonstrate the use of PENCIL as a standalone language."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 197,
                                "start": 193
                            }
                        ],
                        "text": "To demonstrate the potential and performance portability of PENCIL and the PENCIL-to-OpenCL compiler, we consider a number of image processing kernels, a set of benchmarks from the Rodinia and SHOC suites, and DSL embedding scenarios for linear algebra (BLAS) and signal processing radar applications (SpearDE), and present experimental results for four GPU platforms: AMD Radeon HD 5670 and R9 285, NVIDIA GTX 470, and ARM Mali-T604."
                    },
                    "intents": []
                }
            ],
            "corpusId": 10517879,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "c9fdef878c9ca021edb1951d6dae68ce6143396a",
            "isKey": true,
            "numCitedBy": 602,
            "numCiting": 14,
            "paperAbstract": {
                "fragments": [],
                "text": "Scalable heterogeneous computing systems, which are composed of a mix of compute devices, such as commodity multicore processors, graphics processors, reconfigurable processors, and others, are gaining attention as one approach to continuing performance improvement while managing the new challenge of energy efficiency. As these systems become more common, it is important to be able to compare and contrast architectural designs and programming systems in a fair and open forum. To this end, we have designed the Scalable HeterOgeneous Computing benchmark suite (SHOC). SHOC's initial focus is on systems containing graphics processing units (GPUs) and multi-core processors, and on the new OpenCL programming standard. SHOC is a spectrum of programs that test the performance and stability of these scalable heterogeneous computing systems. At the lowest level, SHOC uses microbenchmarks to assess architectural features of the system. At higher levels, SHOC uses application kernels to determine system-wide performance including many system features such as intranode and internode communication among devices. SHOC includes benchmark implementations in both OpenCL and CUDA in order to provide a comparison of these programming models."
            },
            "slug": "The-Scalable-Heterogeneous-Computing-(SHOC)-suite-Danalis-Marin",
            "title": {
                "fragments": [],
                "text": "The Scalable Heterogeneous Computing (SHOC) benchmark suite"
            },
            "tldr": {
                "abstractSimilarityScore": 47,
                "text": "The Scalable HeterOgeneous Computing benchmark suite (SHOC) is a spectrum of programs that test the performance and stability of scalable heterogeneous computing systems and includes benchmark implementations in both OpenCL and CUDA in order to provide a comparison of these programming models."
            },
            "venue": {
                "fragments": [],
                "text": "GPGPU-3"
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "11372918"
                        ],
                        "name": "Shuai Che",
                        "slug": "Shuai-Che",
                        "structuredName": {
                            "firstName": "Shuai",
                            "lastName": "Che",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Shuai Che"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144535607"
                        ],
                        "name": "Michael Boyer",
                        "slug": "Michael-Boyer",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Boyer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Michael Boyer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "36758880"
                        ],
                        "name": "Jiayuan Meng",
                        "slug": "Jiayuan-Meng",
                        "structuredName": {
                            "firstName": "Jiayuan",
                            "lastName": "Meng",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jiayuan Meng"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2924393"
                        ],
                        "name": "D. Tarjan",
                        "slug": "D.-Tarjan",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Tarjan",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Tarjan"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1733020"
                        ],
                        "name": "J. Sheaffer",
                        "slug": "J.-Sheaffer",
                        "structuredName": {
                            "firstName": "Jeremy",
                            "lastName": "Sheaffer",
                            "middleNames": [
                                "W."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Sheaffer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2144574990"
                        ],
                        "name": "Sang-Ha Lee",
                        "slug": "Sang-Ha-Lee",
                        "structuredName": {
                            "firstName": "Sang-Ha",
                            "lastName": "Lee",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sang-Ha Lee"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1735065"
                        ],
                        "name": "K. Skadron",
                        "slug": "K.-Skadron",
                        "structuredName": {
                            "firstName": "Kevin",
                            "lastName": "Skadron",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Skadron"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 118,
                                "start": 115
                            }
                        ],
                        "text": "Figure 3 shows a code fragment of our PENCIL implementation of the breadth-first search benchmark from the Rodinia [8] benchmark suite."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 45,
                                "start": 42
                            }
                        ],
                        "text": "When choosing benchmarks from the Rodinia [8] and SHOC [11] benchmark suites for writing in PENCIL (reverse-engineering from OpenCL to PENCIL), we decided to focus our resources on a selection of benchmarks that offer diversity (cover different Berkeley \u201dmotifs\u201d [1] such as dense and sparse linear algebra, structured grids, and graph traversal), and pose a challenge to traditional polyhedral compilers arising from non static-affine code."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 65,
                                "start": 62
                            }
                        ],
                        "text": "\u2022 six benchmarks extracted from the SHOC [11] and the Rodinia [8] benchmark suites re-written in PENCIL;"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 206915521,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "419f49c47f6fddae7235fb7c72335bccc1a3b743",
            "isKey": false,
            "numCitedBy": 2448,
            "numCiting": 33,
            "paperAbstract": {
                "fragments": [],
                "text": "This paper presents and characterizes Rodinia, a benchmark suite for heterogeneous computing. To help architects study emerging platforms such as GPUs (Graphics Processing Units), Rodinia includes applications and kernels which target multi-core CPU and GPU platforms. The choice of applications is inspired by Berkeley's dwarf taxonomy. Our characterization shows that the Rodinia benchmarks cover a wide range of parallel communication patterns, synchronization techniques and power consumption, and has led to some important architectural insight, such as the growing importance of memory-bandwidth limitations and the consequent importance of data layout."
            },
            "slug": "Rodinia:-A-benchmark-suite-for-heterogeneous-Che-Boyer",
            "title": {
                "fragments": [],
                "text": "Rodinia: A benchmark suite for heterogeneous computing"
            },
            "tldr": {
                "abstractSimilarityScore": 44,
                "text": "This characterization shows that the Rodinia benchmarks cover a wide range of parallel communication patterns, synchronization techniques and power consumption, and has led to some important architectural insight, such as the growing importance of memory-bandwidth limitations and the consequent importance of data layout."
            },
            "venue": {
                "fragments": [],
                "text": "2009 IEEE International Symposium on Workload Characterization (IISWC)"
            },
            "year": 2009
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1760896"
                        ],
                        "name": "K. Asanovi\u0107",
                        "slug": "K.-Asanovi\u0107",
                        "structuredName": {
                            "firstName": "Krste",
                            "lastName": "Asanovi\u0107",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Asanovi\u0107"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1991345"
                        ],
                        "name": "R. Bod\u00edk",
                        "slug": "R.-Bod\u00edk",
                        "structuredName": {
                            "firstName": "Rastislav",
                            "lastName": "Bod\u00edk",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Bod\u00edk"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2301680"
                        ],
                        "name": "Bryan Catanzaro",
                        "slug": "Bryan-Catanzaro",
                        "structuredName": {
                            "firstName": "Bryan",
                            "lastName": "Catanzaro",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Bryan Catanzaro"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2053614"
                        ],
                        "name": "Joseph Gebis",
                        "slug": "Joseph-Gebis",
                        "structuredName": {
                            "firstName": "Joseph",
                            "lastName": "Gebis",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Joseph Gebis"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "38602469"
                        ],
                        "name": "P. Husbands",
                        "slug": "P.-Husbands",
                        "structuredName": {
                            "firstName": "Parry",
                            "lastName": "Husbands",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Husbands"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1732330"
                        ],
                        "name": "K. Keutzer",
                        "slug": "K.-Keutzer",
                        "structuredName": {
                            "firstName": "Kurt",
                            "lastName": "Keutzer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Keutzer"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1701130"
                        ],
                        "name": "D. Patterson",
                        "slug": "D.-Patterson",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Patterson",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Patterson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2160093"
                        ],
                        "name": "W. Plishker",
                        "slug": "W.-Plishker",
                        "structuredName": {
                            "firstName": "William",
                            "lastName": "Plishker",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "W. Plishker"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1746446"
                        ],
                        "name": "J. Shalf",
                        "slug": "J.-Shalf",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Shalf",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Shalf"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145117071"
                        ],
                        "name": "Samuel Williams",
                        "slug": "Samuel-Williams",
                        "structuredName": {
                            "firstName": "Samuel",
                            "lastName": "Williams",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Samuel Williams"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1731111"
                        ],
                        "name": "K. Yelick",
                        "slug": "K.-Yelick",
                        "structuredName": {
                            "firstName": "Katherine",
                            "lastName": "Yelick",
                            "middleNames": [
                                "A."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Yelick"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 266,
                                "start": 263
                            }
                        ],
                        "text": "When choosing benchmarks from the Rodinia [8] and SHOC [11] benchmark suites for writing in PENCIL (reverse-engineering from OpenCL to PENCIL), we decided to focus our resources on a selection of benchmarks that offer diversity (cover different Berkeley \u201dmotifs\u201d [1] such as dense and sparse linear algebra, structured grids, and graph traversal), and pose a challenge to traditional polyhedral compilers arising from non static-affine code."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 62143065,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ceb3fd01e1d5ece659654638e1c7cde2c4704a7a",
            "isKey": false,
            "numCitedBy": 2312,
            "numCiting": 141,
            "paperAbstract": {
                "fragments": [],
                "text": "Author(s): Asanovic, K; Bodik, R; Catanzaro, B; Gebis, J; Husbands, P; Keutzer, K; Patterson, D; Plishker, W; Shalf, J; Williams, SW | Abstract: The recent switch to parallel microprocessors is a milestone in the history of computing. Industry has laid out a roadmap for multicore designs that preserves the programming paradigm of the past via binary compatibility and cache coherence. Conventional wisdom is now to double the number of cores on a chip with each silicon generation. A multidisciplinary group of Berkeley researchers met nearly two years to discuss this change. Our view is that this evolutionary approach to parallel hardware and software may work from 2 or 8 processor systems, but is likely to face diminishing returns as 16 and 32 processor systems are realized, just as returns fell with greater instruction-level parallelism. We believe that much can be learned by examining the success of parallelism at the extremes of the computing spectrum, namely embedded computing and high performance computing. This led us to frame the parallel landscape with seven questions, and to recommend the following: \u2022 The overarching goal should be to make it easy to write programs that execute efficiently on highly parallel computing systems \u2022 The target should be 1000s of cores per chip, as these chips are built from processing elements that are the most efficient in MIPS (Million Instructions per Second) per watt, MIPS per area of silicon, and MIPS per development dollar. \u2022 Instead of traditional benchmarks, use 13 \u201cDwarfs\u201d to design and evaluate parallel programming models and architectures. (A dwarf is an algorithmic method that captures a pattern of computation and communication.) \u2022 \u201cAutotuners\u201d should play a larger role than conventional compilers in translating parallel programs. \u2022 To maximize programmer productivity, future programming models must be more human-centric than the conventional focus on hardware or applications. \u2022 To be successful, programming models should be independent of the number of processors. \u2022 To maximize application efficiency, programming models should support a wide range of data types and successful models of parallelism: task-level parallelism, word-level parallelism, and bit-level parallelism. 1 The Landscape of Parallel Computing Research: A View From Berkeley \u2022 Architects should not include features that significantly affect performance or energy if programmers cannot accurately measure their impact via performance counters and energy counters. \u2022 Traditional operating systems will be deconstructed and operating system functionality will be orchestrated using libraries and virtual machines. \u2022 To explore the design space rapidly, use system emulators based on Field Programmable Gate Arrays (FPGAs) that are highly scalable and low cost. Since real world applications are naturally parallel and hardware is naturally parallel, what we need is a programming model, system software, and a supporting architecture that are naturally parallel. Researchers have the rare opportunity to re-invent these cornerstones of computing, provided they simplify the efficient programming of highly parallel systems."
            },
            "slug": "The-Landscape-of-Parallel-Computing-Research:-A-Asanovi\u0107-Bod\u00edk",
            "title": {
                "fragments": [],
                "text": "The Landscape of Parallel Computing Research: A View from Berkeley"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "The parallel landscape is frame with seven questions, and the following are recommended to explore the design space rapidly: \u2022 The overarching goal should be to make it easy to write programs that execute efficiently on highly parallel computing systems \u2022 The target should be 1000s of cores per chip, as these chips are built from processing elements that are the most efficient in MIPS (Million Instructions per Second) per watt, MIPS per area of silicon, and MIPS each development dollar."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2006
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2759686"
                        ],
                        "name": "K. Trifunovic",
                        "slug": "K.-Trifunovic",
                        "structuredName": {
                            "firstName": "Konrad",
                            "lastName": "Trifunovic",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Trifunovic"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 144,
                                "start": 141
                            }
                        ],
                        "text": "This set of local variables is used by PPCG to ensure that their live ranges do not overlap in any affine transformation in a way similar to [2], and to privatize them if needed when generating parallel code."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 15408140,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ceabf51970a6977fad0db5927c531a3d0d68b38b",
            "isKey": false,
            "numCitedBy": 19,
            "numCiting": 43,
            "paperAbstract": {
                "fragments": [],
                "text": "To preserve the validity of loop nest transformations and parallelization, data dependences need to be analyzed. Memory dependences come in two varieties: true dependences or false dependences. While true dependences must be satisfied in order to preserve the correct order of computations, false dependences are induced by the reuse of a single memory location to store multiple values. False dependences reduce the degrees of freedom for loop transformations. In particular, loop tiling is severely limited in the presence of these dependences. While array expansion removes all false dependences, the overhead on memory and the detrimental impact on register-level reuse can be catastrophic.\n We propose and evaluate a compilation technique to safely ignore a large number of false dependences in order to enable loop nest tiling in the polyhedral model. It is based on the precise characterization of interferences between live range intervals, and it does not incur any scalar or array expansion. Our algorithms have been implemented in the Pluto polyhedral compiler, and evaluated on the PolyBench suite."
            },
            "slug": "Improved-loop-tiling-based-on-the-removal-of-false-Baghdadi-Cohen",
            "title": {
                "fragments": [],
                "text": "Improved loop tiling based on the removal of spurious false dependences"
            },
            "tldr": {
                "abstractSimilarityScore": 42,
                "text": "A compilation technique to safely ignore a large number of false dependences in order to enable loop nest tiling in the polyhedral model is proposed and evaluated, based on the precise characterization of interferences between live range intervals."
            },
            "venue": {
                "fragments": [],
                "text": "TACO"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 159,
                                "start": 155
                            }
                        ],
                        "text": "PPCG relies on the pet library [25] to extract the iteration domain and the access relations while the dependence analysis is performed by the isl library [23]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 9220965,
            "fieldsOfStudy": [
                "Art"
            ],
            "id": "1c5b15587e4034c97610b2017697ad1ea663a8fa",
            "isKey": false,
            "numCitedBy": 351,
            "numCiting": 19,
            "paperAbstract": {
                "fragments": [],
                "text": "In compiler research, polytopes and related mathematical objects have been successfully used for several decades to represent and manipulate computer programs in an approach that has become known as the polyhedral model. The key insight is that the kernels of many compute-intensive applications are composed of loops with bounds that are affine combinations of symbolic constants and outer loop iterators. The iterations of a loop nest can then be represented as the integer points in a (parametric) polytope and manipulated as a whole, rather than as individual iterations. A similar reasoning holds for the elements of an array and for mappings between loop iterations and array elements."
            },
            "slug": "isl:-An-Integer-Set-Library-for-the-Polyhedral-Verdoolaege",
            "title": {
                "fragments": [],
                "text": "isl: An Integer Set Library for the Polyhedral Model"
            },
            "tldr": {
                "abstractSimilarityScore": 100,
                "text": "In compiler research, polytopes and related mathematical objects have been successfully used for several decades to represent and manipulate computer programs in an approach that has become known as the polyhedral model."
            },
            "venue": {
                "fragments": [],
                "text": "ICMS"
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "121841655"
                        ],
                        "name": "M. Metcalf",
                        "slug": "M.-Metcalf",
                        "structuredName": {
                            "firstName": "Michael",
                            "lastName": "Metcalf",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Metcalf"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 144,
                                "start": 140
                            }
                        ],
                        "text": "The independent directive is used to annotate loops, and is semantically similar to the High Performance Fortran directive of the same name [15]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 105,
                                "start": 101
                            }
                        ],
                        "text": "A semantically similar directive, also called independent, has been part of High Performance Fortran [15]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 93,
                                "start": 69
                            }
                        ],
                        "text": "A semantically similar directive, also called independent, occurs in High Performance Fortran [17]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 129,
                                "start": 105
                            }
                        ],
                        "text": "The independent directive is used as a loop annotation, and is semantically similar to the equally named High Performance Fortran directive [17]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 9936543,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "629ef2aeacfeb2e290c0d91c3d9182bc28629ab1",
            "isKey": true,
            "numCitedBy": 138,
            "numCiting": 1,
            "paperAbstract": {
                "fragments": [],
                "text": "A basic problem in programming for parallel architectures is that each machine has its own design, and also its own specific software for accessing its hardware features. In 1992, as a response to this situation, the High Performance Fortran Forum (HPFF) was founded, under the guidance of Professor Ken Kennedy, to produce a portable Fortran-based interface to parallel machines for the solution of data-parallel problems, mainly involving regular grids. Over 40 organizations participated, and the work used existing dialects, such as Fortran D (Rice University), Vienna Fortran and CM Fortran (Thinking Machines), as inspiration. It was realised early on that much of the desired functionality already existed in the, then, very new Fortran 90 (see [1]), and this was selected as the base language on which to build HPF itself. The array processing features of Fortran 90 are particularly relevant. This enabled the goal of producing an ad hoc standard for HPF within a year to be met, and full details can be found in [2]. The standard document itself is obtainable by anonymous ftp at titan.cs.rice.edu in the directory public/HPFF/draft as the file hpf-v10-final.ps.Z. At the time of writing, HPFF has reconvened to produce a second, more advanced, version \u2013 HPF II. One new feature is expected to be an extension for irregular grids. The basic approach adopted was that of designing a set of directives that may be added to Fortran 90 programs, together with a few syntactical additions and some extra libraries, thus creating a data parallel programming language that is independent of the details of the architecture of the parallel computer it is run on. The principle is to arrange for locality of reference of the data by aligning related data sets to one another, and distributing the aligned sets over memory regions such that, usually, calculations on a given processor are performed between operands already on that processor. Any message passing that might nevertheless be necessary to communicate data between processors is handled by the compiler and run-time system."
            },
            "slug": "High-performance-Fortran-Metcalf",
            "title": {
                "fragments": [],
                "text": "High performance Fortran"
            },
            "tldr": {
                "abstractSimilarityScore": 41,
                "text": "The basic approach adopted was designing a set of directives that may be added to Fortran 90 programs, together with a few syntactical additions and some extra libraries, thus creating a data parallel programming language that is independent of the details of the architecture of the parallel computer it is run on."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1995
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 35,
                                "start": 31
                            }
                        ],
                        "text": "PPCG relies on the pet library [25] to extract the iteration domain and the access relations while the dependence analysis is performed by the isl library [23]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 13921165,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "d79ead5a5c9e932ba3ab5bb41a7a2ac19d551346",
            "isKey": false,
            "numCitedBy": 112,
            "numCiting": 43,
            "paperAbstract": {
                "fragments": [],
                "text": "We present a new library for extracting a polyhedral model from C source. The library is based on clang, the LLVM C frontend, and isl, a library for manipulating quasi-ane sets and relations. The use of clang for parsing the C code brings advanced diagnostics and full support for C99. The use of isl allows for an easy construction and a powerful and compact representation of the polyhedral model. Besides allowing arbitrary piecewise quasi-ane index expressions and conditions, the library also supports some data dependent constructs and has special treatment for unsigned integers. The library has been successfully used to obtain polyhedral models for use in an equivalence checker, a tool for constructing polyhedral process networks, a parallelizer targeting GPUs and an interactive polyhedral environment."
            },
            "slug": "Polyhedral-Extraction-Tool-Verdoolaege-Grosser",
            "title": {
                "fragments": [],
                "text": "Polyhedral Extraction Tool"
            },
            "tldr": {
                "abstractSimilarityScore": 73,
                "text": "A new library for extracting a polyhedral model from C source based on clang, the LLVM C frontend, and isl, a library for manipulating quasi-ane sets and relations, which allows for an easy construction and a powerful and compact representation of thepolyhedral model."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2012
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1758245"
                        ],
                        "name": "Riyadh Baghdadi",
                        "slug": "Riyadh-Baghdadi",
                        "structuredName": {
                            "firstName": "Riyadh",
                            "lastName": "Baghdadi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Riyadh Baghdadi"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145509576"
                        ],
                        "name": "Albert Cohen",
                        "slug": "Albert-Cohen",
                        "structuredName": {
                            "firstName": "Albert",
                            "lastName": "Cohen",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Albert Cohen"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1793540"
                        ],
                        "name": "Serge Guelton",
                        "slug": "Serge-Guelton",
                        "structuredName": {
                            "firstName": "Serge",
                            "lastName": "Guelton",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Serge Guelton"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2065505538"
                        ],
                        "name": "Jun Inoue",
                        "slug": "Jun-Inoue",
                        "structuredName": {
                            "firstName": "Jun",
                            "lastName": "Inoue",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Jun Inoue"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1756389"
                        ],
                        "name": "T. Grosser",
                        "slug": "T.-Grosser",
                        "structuredName": {
                            "firstName": "Tobias",
                            "lastName": "Grosser",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Grosser"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1769870"
                        ],
                        "name": "Georgia Kouveli",
                        "slug": "Georgia-Kouveli",
                        "structuredName": {
                            "firstName": "Georgia",
                            "lastName": "Kouveli",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Georgia Kouveli"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145510407"
                        ],
                        "name": "Alexey Kravets",
                        "slug": "Alexey-Kravets",
                        "structuredName": {
                            "firstName": "Alexey",
                            "lastName": "Kravets",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Alexey Kravets"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1777324"
                        ],
                        "name": "Anton Lokhmotov",
                        "slug": "Anton-Lokhmotov",
                        "structuredName": {
                            "firstName": "Anton",
                            "lastName": "Lokhmotov",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Anton Lokhmotov"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145753386"
                        ],
                        "name": "C. Nugteren",
                        "slug": "C.-Nugteren",
                        "structuredName": {
                            "firstName": "Cedric",
                            "lastName": "Nugteren",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Nugteren"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "40105186"
                        ],
                        "name": "Fraser Waters",
                        "slug": "Fraser-Waters",
                        "structuredName": {
                            "firstName": "Fraser",
                            "lastName": "Waters",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Fraser Waters"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1734519"
                        ],
                        "name": "A. Donaldson",
                        "slug": "A.-Donaldson",
                        "structuredName": {
                            "firstName": "Alastair",
                            "lastName": "Donaldson",
                            "middleNames": [
                                "F."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Donaldson"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [],
            "corpusId": 10777608,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ac5956d8f51fd1142a3c35b0b44319416c0514f9",
            "isKey": false,
            "numCitedBy": 17,
            "numCiting": 8,
            "paperAbstract": {
                "fragments": [],
                "text": "We motivate the design and implementation of a platform-neutral compute intermediate language (PENCIL) for productive and performance-portable accelerator programming."
            },
            "slug": "PENCIL:-Towards-a-Platform-Neutral-Compute-Language-Baghdadi-Cohen",
            "title": {
                "fragments": [],
                "text": "PENCIL: Towards a Platform-Neutral Compute Intermediate Language for DSLs"
            },
            "tldr": {
                "abstractSimilarityScore": 97,
                "text": "This work motivates the design and implementation of a platform-neutral compute intermediate language (PENCIL) for productive and performance-portable accelerator programming."
            },
            "venue": {
                "fragments": [],
                "text": "HiPC 2013"
            },
            "year": 2013
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1772079"
                        ],
                        "name": "Sven Verdoolaege",
                        "slug": "Sven-Verdoolaege",
                        "structuredName": {
                            "firstName": "Sven",
                            "lastName": "Verdoolaege",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Sven Verdoolaege"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 105,
                                "start": 101
                            }
                        ],
                        "text": "For a detailed description of these changes, including support for arrays of structures, we refer to [24]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 72,
                                "start": 68
                            }
                        ],
                        "text": "This information is used in several ways, as explained in detail in [24]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 63556415,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "91cd41dae81209e7dd71337825c8c0c0d578a6d2",
            "isKey": false,
            "numCitedBy": 7,
            "numCiting": 13,
            "paperAbstract": {
                "fragments": [],
                "text": "This report describes various changes to the polyhedral model \nextractor pet and the automatic parallelizer PPCG, \nincluding support for generic statements, arrays of structures, \nfunction summaries, dead code elimination and live-range reordering \nas well as support for annotations allowing the user to explicitly \ndescribe relations among program variables, kills and \nthe absence of loop-carried dependences. \nMost of these changes are instrumental in supporting pencil in PPCG. \nThe report also describes how synchronization is introduced by PPCG."
            },
            "slug": "PENCIL-support-in-pet-and-PPCG-Verdoolaege",
            "title": {
                "fragments": [],
                "text": "PENCIL support in pet and PPCG"
            },
            "tldr": {
                "abstractSimilarityScore": 92,
                "text": "Various changes to the polyhedral model extractor pet and the automatic parallelizer PPCG are described, including support for generic statements, arrays of structures, function summaries, dead code elimination and live-range reordering and support for annotations allowing the user to explicitly describe relations among program variables, kills and the absence of loop-carried dependences."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2015
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3241210"
                        ],
                        "name": "J. Stone",
                        "slug": "J.-Stone",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Stone",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Stone"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1392376272"
                        ],
                        "name": "D. Gohara",
                        "slug": "D.-Gohara",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Gohara",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Gohara"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1797651"
                        ],
                        "name": "Guochun Shi",
                        "slug": "Guochun-Shi",
                        "structuredName": {
                            "firstName": "Guochun",
                            "lastName": "Shi",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Guochun Shi"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                },
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 93,
                                "start": 89
                            }
                        ],
                        "text": "Software for such accelerators is currently written using low-level APIs, such as OpenCL [22] and CUDA [17]."
                    },
                    "intents": []
                }
            ],
            "corpusId": 15226591,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "03ff27135b30927ea2a314247fb690b7e56c4215",
            "isKey": false,
            "numCitedBy": 1476,
            "numCiting": 26,
            "paperAbstract": {
                "fragments": [],
                "text": "The OpenCL standard offers a common API for program execution on systems composed of different types of computational devices such as multicore CPUs, GPUs, or other accelerators."
            },
            "slug": "OpenCL:-A-Parallel-Programming-Standard-for-Systems-Stone-Gohara",
            "title": {
                "fragments": [],
                "text": "OpenCL: A Parallel Programming Standard for Heterogeneous Computing Systems"
            },
            "tldr": {
                "abstractSimilarityScore": 100,
                "text": "The OpenCL standard offers a common API for program execution on systems composed of different types of computational devices such as multicore CPUs, GPUs, or other accelerators."
            },
            "venue": {
                "fragments": [],
                "text": "Computing in Science & Engineering"
            },
            "year": 2010
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145064923"
                        ],
                        "name": "C. Lawson",
                        "slug": "C.-Lawson",
                        "structuredName": {
                            "firstName": "Charles",
                            "lastName": "Lawson",
                            "middleNames": [
                                "L."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "C. Lawson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144308260"
                        ],
                        "name": "R. Hanson",
                        "slug": "R.-Hanson",
                        "structuredName": {
                            "firstName": "Richard",
                            "lastName": "Hanson",
                            "middleNames": [
                                "J."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Hanson"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2587716"
                        ],
                        "name": "D. Kincaid",
                        "slug": "D.-Kincaid",
                        "structuredName": {
                            "firstName": "David",
                            "lastName": "Kincaid",
                            "middleNames": [
                                "R."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "D. Kincaid"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2478515"
                        ],
                        "name": "F. Krogh",
                        "slug": "F.-Krogh",
                        "structuredName": {
                            "firstName": "Fred",
                            "lastName": "Krogh",
                            "middleNames": [
                                "T."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Krogh"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 173,
                                "start": 169
                            }
                        ],
                        "text": "For example, for the VOBLA linear algebra DSL, we were able to generate code that has performance close to the cuBlas [18] and clMath [10] BLAS linear algebra libraries [13]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "corpusId": 6585321,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "ef62e60b81317a24dbeb8ded6dc4a8ed89b776a8",
            "isKey": false,
            "numCitedBy": 1854,
            "numCiting": 30,
            "paperAbstract": {
                "fragments": [],
                "text": "A package of 38 low level subprograms for many of the basic operations of numerical linear algebra is presented. The package is intended to be used with FORTRAN. The operations in the package are dot products, elementary vector operations, Givens transformations, vector copy and swap, vector norms, vector scaling, and the indices of components of largest magnitude. The subprograms and a test driver are available in portable FORTRAN. Versions of the subprograms are also provided in assembly language for the IBM 360/67, the CDC 6600 and CDC 7600, and the Univac 1108."
            },
            "slug": "Basic-Linear-Algebra-Subprograms-for-Fortran-Usage-Lawson-Hanson",
            "title": {
                "fragments": [],
                "text": "Basic Linear Algebra Subprograms for Fortran Usage"
            },
            "tldr": {
                "abstractSimilarityScore": 90,
                "text": "A package of 38 low level subprograms for many of the basic operations of numerical linear algebra is presented, intended to be used with FORTRAN."
            },
            "venue": {
                "fragments": [],
                "text": "TOMS"
            },
            "year": 1979
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2912411"
                        ],
                        "name": "F. Irigoin",
                        "slug": "F.-Irigoin",
                        "structuredName": {
                            "firstName": "Fran\u00e7ois",
                            "lastName": "Irigoin",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "F. Irigoin"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2913872"
                        ],
                        "name": "P. Jouvelot",
                        "slug": "P.-Jouvelot",
                        "structuredName": {
                            "firstName": "Pierre",
                            "lastName": "Jouvelot",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "P. Jouvelot"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3317184"
                        ],
                        "name": "R. Triolet",
                        "slug": "R.-Triolet",
                        "structuredName": {
                            "firstName": "R\u00e9mi",
                            "lastName": "Triolet",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. Triolet"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "Summary functions have first been proposed as abstract domain transformers of numerical libraries in PIPS [26]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 15561989,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "eca0ea8a741df3fffb40882b0b6c976d9eeb0839",
            "isKey": false,
            "numCitedBy": 230,
            "numCiting": 39,
            "paperAbstract": {
                "fragments": [],
                "text": "PIPS is an experhnental FORTRAN source-to-source parallelizer that combines the goal of exploring interprocedural and semantical analysis with a requirement for compilation speed. We present in this paper the main features of PIPS, i.e., demand-driven architecture, automatic support for multiple implementation languages, structured control graph, predicates and regions for interprocedural analysis and global nested loop paralle~lzation, with an emphasis on its core data structures and transformation phases. Some preliminary results on the practical impact of our design choices are discussed. This research is partially funded by DRET, under contract 87-017."
            },
            "slug": "Semantical-interprocedural-parallelization:-an-of-Irigoin-Jouvelot",
            "title": {
                "fragments": [],
                "text": "Semantical interprocedural parallelization: an overview of the PIPS project"
            },
            "tldr": {
                "abstractSimilarityScore": 43,
                "text": "The main features of PIPS are presented, i.e., demand-driven architecture, automatic support for multiple implementation languages, structured control graph, predicates and regions for interprocedural analysis and global nested loop paralle~lzation, with an emphasis on its core data structures and transformation phases."
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 1991
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145141724"
                        ],
                        "name": "M. Luj\u00e1n",
                        "slug": "M.-Luj\u00e1n",
                        "structuredName": {
                            "firstName": "Mikel",
                            "lastName": "Luj\u00e1n",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Luj\u00e1n"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "144982567"
                        ],
                        "name": "T. Freeman",
                        "slug": "T.-Freeman",
                        "structuredName": {
                            "firstName": "T.",
                            "lastName": "Freeman",
                            "middleNames": [
                                "L."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "T. Freeman"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1792579"
                        ],
                        "name": "J. Gurd",
                        "slug": "J.-Gurd",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Gurd",
                            "middleNames": [
                                "R."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Gurd"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "UNPAYWALL"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 118,
                                "start": 114
                            }
                        ],
                        "text": "Using such an approach, DSL compilers like Halide [21] and Diderot [9], designed for image processing, and OoLaLa [16], designed for linear algebra, show promising results."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 107,
                                "start": 101
                            }
                        ],
                        "text": "Using such an approach, DSL compilers such as Halide [4] and Diderot [29] (for image processing) and OoLaLa [30] (for linear algebra) show promising results."
                    },
                    "intents": []
                }
            ],
            "corpusId": 15425064,
            "fieldsOfStudy": [
                "Computer Science",
                "Mathematics"
            ],
            "id": "5a5ffa3e64b1b465aa6b7f6a466a546056533584",
            "isKey": false,
            "numCitedBy": 30,
            "numCiting": 73,
            "paperAbstract": {
                "fragments": [],
                "text": "In this paper we review the design of a sequential object oriented linear algebra library, O<sc>O</sc>L<sc>A</sc>L<sc>A</sc>. Several designs are proposed and used to classify existing sequential object oriented libraries. The classification is based on the way that matrices and matrix operations are represented. O<sc>O</sc>L<sc>A</sc>L<sc>A</sc>'s representation of matrices is capable of dealing with certain matrix operations that, although mathematically valid, are not handled correctly by existing libraries. O<sc>O</sc>L<sc>A</sc>L<sc>A</sc> also enables implementations of matrix calculations at various abstraction levels ranging from the relatively low-level abstraction of a Fortran BLAS-like implementation to higher-level abstractions that hide many implementation details. O<sc>O</sc>L<sc>A</sc>L<sc>A</sc> addresses a wide range of numerical linear algebra functionality while the reviewed object oriented libraries concen trate on parts of such functionality. We include some preliminary performance results for a Java implementation of O<sc>O</sc>L<sc>A</sc>L<sc>A</sc>."
            },
            "slug": "OoLALA:-an-object-oriented-analysis-and-design-of-Luj\u00e1n-Freeman",
            "title": {
                "fragments": [],
                "text": "OoLALA: an object oriented analysis and design of numerical linear algebra"
            },
            "tldr": {
                "abstractSimilarityScore": 65,
                "text": "This paper reviews the design of a sequential object oriented linear algebra library that addresses a wide range of numerical linear algebra functionality while the reviewed object oriented libraries concen trate on parts of such functionality."
            },
            "venue": {
                "fragments": [],
                "text": "OOPSLA '00"
            },
            "year": 2000
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2803579"
                        ],
                        "name": "Mike Barnett",
                        "slug": "Mike-Barnett",
                        "structuredName": {
                            "firstName": "Mike",
                            "lastName": "Barnett",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Mike Barnett"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1759442"
                        ],
                        "name": "B. E. Chang",
                        "slug": "B.-E.-Chang",
                        "structuredName": {
                            "firstName": "Bor-Yuh",
                            "lastName": "Chang",
                            "middleNames": [
                                "Evan"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "B. E. Chang"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1710751"
                        ],
                        "name": "R. DeLine",
                        "slug": "R.-DeLine",
                        "structuredName": {
                            "firstName": "Robert",
                            "lastName": "DeLine",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "R. DeLine"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145511756"
                        ],
                        "name": "B. Jacobs",
                        "slug": "B.-Jacobs",
                        "structuredName": {
                            "firstName": "Bart",
                            "lastName": "Jacobs",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "B. Jacobs"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "145189240"
                        ],
                        "name": "K. Leino",
                        "slug": "K.-Leino",
                        "structuredName": {
                            "firstName": "K.",
                            "lastName": "Leino",
                            "middleNames": [
                                "Rustan",
                                "M."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "K. Leino"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "This nicely fits any static analysis capable of extracting may and/or must information from conditional expressions and is also consistent with the usage of wildcards in intermediate verification languages such as Boogie [19]."
                    },
                    "intents": [
                        {
                            "id": "result"
                        }
                    ]
                }
            ],
            "corpusId": 8060283,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "31120ae4647ed520efa75ddcaaa3316966f4eff9",
            "isKey": false,
            "numCitedBy": 912,
            "numCiting": 64,
            "paperAbstract": {
                "fragments": [],
                "text": "A program verifier is a complex system that uses compiler technology, program semantics, property inference, verification-condition generation, automatic decision procedures, and a user interface. This paper describes the architecture of a state-of-the-art program verifier for object-oriented programs."
            },
            "slug": "Boogie:-A-Modular-Reusable-Verifier-for-Programs-Barnett-Chang",
            "title": {
                "fragments": [],
                "text": "Boogie: A Modular Reusable Verifier for Object-Oriented Programs"
            },
            "tldr": {
                "abstractSimilarityScore": 75,
                "text": "The architecture of a state-of-the-art program verifier for object-oriented programs for compiler technology, program semantics, property inference, verification-condition generation, automatic decision procedures, and a user interface are described."
            },
            "venue": {
                "fragments": [],
                "text": "FMCO"
            },
            "year": 2005
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3250583"
                        ],
                        "name": "M. Aln\u00e6s",
                        "slug": "M.-Aln\u00e6s",
                        "structuredName": {
                            "firstName": "Martin",
                            "lastName": "Aln\u00e6s",
                            "middleNames": [
                                "Sandve"
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Aln\u00e6s"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2717947"
                        ],
                        "name": "A. Logg",
                        "slug": "A.-Logg",
                        "structuredName": {
                            "firstName": "Anders",
                            "lastName": "Logg",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "A. Logg"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2674252"
                        ],
                        "name": "Kristian B. \u00d8lgaard",
                        "slug": "Kristian-B.-\u00d8lgaard",
                        "structuredName": {
                            "firstName": "Kristian",
                            "lastName": "\u00d8lgaard",
                            "middleNames": [
                                "B."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Kristian B. \u00d8lgaard"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2003051"
                        ],
                        "name": "M. Rognes",
                        "slug": "M.-Rognes",
                        "structuredName": {
                            "firstName": "Marie",
                            "lastName": "Rognes",
                            "middleNames": [
                                "E."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "M. Rognes"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2665928"
                        ],
                        "name": "G. N. Wells",
                        "slug": "G.-N.-Wells",
                        "structuredName": {
                            "firstName": "Garth",
                            "lastName": "Wells",
                            "middleNames": [
                                "N."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. N. Wells"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 17,
                                "start": 14
                            }
                        ],
                        "text": "A compelling alternative for developers is to program in higher-level languages and to rely on compilers to automatically generate efficient low level code."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "corpusId": 15216522,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "8e7ab565d5ef36cdaf686b1866cc8db39510473f",
            "isKey": false,
            "numCitedBy": 321,
            "numCiting": 79,
            "paperAbstract": {
                "fragments": [],
                "text": "We present the Unified Form Language (UFL), which is a domain-specific language for representing weak formulations of partial differential equations with a view to numerical approximation. Features of UFL include support for variational forms and functionals, automatic differentiation of forms and expressions, arbitrary function space hierarchies for multifield problems, general differential operators and flexible tensor algebra. With these features, UFL has been used to effortlessly express finite element methods for complex systems of partial differential equations in near-mathematical notation, resulting in compact, intuitive and readable programs. We present in this work the language and its construction. An implementation of UFL is freely available as an open-source software library. The library generates abstract syntax tree representations of variational problems, which are used by other software libraries to generate concrete low-level implementations. Some application examples are presented and libraries that support UFL are highlighted."
            },
            "slug": "Unified-form-language:-A-domain-specific-language-Aln\u00e6s-Logg",
            "title": {
                "fragments": [],
                "text": "Unified form language: A domain-specific language for weak formulations of partial differential equations"
            },
            "tldr": {
                "abstractSimilarityScore": 67,
                "text": "The Unified Form Language is presented, which is a domain-specific language for representing weak formulations of partial differential equations with a view to numerical approximation and generates abstract syntax tree representations of variational problems, which are used by other software libraries to generate concrete low-level implementations."
            },
            "venue": {
                "fragments": [],
                "text": "TOMS"
            },
            "year": 2014
        },
        {
            "authors": [
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1911989"
                        ],
                        "name": "Charisee Chiw",
                        "slug": "Charisee-Chiw",
                        "structuredName": {
                            "firstName": "Charisee",
                            "lastName": "Chiw",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Charisee Chiw"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "1704822"
                        ],
                        "name": "G. Kindlmann",
                        "slug": "G.-Kindlmann",
                        "structuredName": {
                            "firstName": "Gordon",
                            "lastName": "Kindlmann",
                            "middleNames": [
                                "L."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "G. Kindlmann"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "3175026"
                        ],
                        "name": "J. Reppy",
                        "slug": "J.-Reppy",
                        "structuredName": {
                            "firstName": "John",
                            "lastName": "Reppy",
                            "middleNames": [
                                "H."
                            ]
                        }
                    },
                    {
                        "fragments": [],
                        "text": "J. Reppy"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2406623"
                        ],
                        "name": "Lamont Samuels",
                        "slug": "Lamont-Samuels",
                        "structuredName": {
                            "firstName": "Lamont",
                            "lastName": "Samuels",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Lamont Samuels"
                    }
                ],
                [
                    {
                        "bitmap$0": false,
                        "ids": [
                            "2071582010"
                        ],
                        "name": "Nicholas Seltzer",
                        "slug": "Nicholas-Seltzer",
                        "structuredName": {
                            "firstName": "Nicholas",
                            "lastName": "Seltzer",
                            "middleNames": []
                        }
                    },
                    {
                        "fragments": [],
                        "text": "Nicholas Seltzer"
                    }
                ]
            ],
            "badges": [
                {
                    "id": "OPEN_ACCESS"
                }
            ],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 70,
                                "start": 67
                            }
                        ],
                        "text": "Using such an approach, DSL compilers like Halide [21] and Diderot [9], designed for image processing, and OoLaLa [16], designed for linear algebra, show promising results."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 68,
                                "start": 61
                            }
                        ],
                        "text": "Using such an approach, DSL compilers such as Halide [4] and Diderot [29] (for image processing) and OoLaLa [30] (for linear algebra) show promising results."
                    },
                    "intents": []
                }
            ],
            "corpusId": 14458420,
            "fieldsOfStudy": [
                "Computer Science"
            ],
            "id": "0850cf5b422c2b93ad081cdf10651fa3dec9ac37",
            "isKey": false,
            "numCitedBy": 72,
            "numCiting": 36,
            "paperAbstract": {
                "fragments": [],
                "text": "Research scientists and medical professionals use imaging technology, such as computed tomography (CT) and magnetic resonance imaging (MRI) to measure a wide variety of biological and physical objects. The increasing sophistication of imaging technology creates demand for equally sophisticated computational techniques to analyze and visualize the image data. Analysis and visualization codes are often crafted for a specific experiment or set of images, thus imaging scientists need support for quickly developing codes that are reliable, robust, and efficient. In this paper, we present the design and implementation of Diderot, which is a parallel domain-specific language for biomedical image analysis and visualization. Diderot supports a high-level model of computation that is based on continuous tensor fields. These tensor fields are reconstructed from discrete image data using separable convolution kernels, but may also be defined by applying higher-order operations, such as differentiation (\u2207). Early experiments demonstrate that Diderot provides both a high-level concise notation for image analysis and visualization algorithms, as well as high sequential and parallel performance."
            },
            "slug": "Diderot:-a-parallel-DSL-for-image-analysis-and-Chiw-Kindlmann",
            "title": {
                "fragments": [],
                "text": "Diderot: a parallel DSL for image analysis and visualization"
            },
            "tldr": {
                "abstractSimilarityScore": 40,
                "text": "The design and implementation of Diderot is presented, which is a parallel domain-specific language for biomedical image analysis and visualization that supports a high-level model of computation that is based on continuous tensor fields."
            },
            "venue": {
                "fragments": [],
                "text": "PLDI"
            },
            "year": 2012
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 122,
                                "start": 119
                            }
                        ],
                        "text": "Software for hardware accelerators is currently written using low-level APIs and languages such as OpenCL [1] and CUDA [2], which have a steep learning curve, are laborious and error-prone to program with, and lack performance portability: the performance of an accelerated application may vary dramatically across platforms."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 46,
                                "start": 42
                            }
                        ],
                        "text": "In this case we used pencilcc to generate CUDA code instead of OpenCL code."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 242,
                                "start": 238
                            }
                        ],
                        "text": "Keywords-automatic optimization; intermediate language; polyhedral model; domain specific languages; OpenCL\nI. INTRODUCTION Software for hardware accelerators is currently written using low-level APIs and languages such as OpenCL [1] and CUDA [2], which have a steep learning curve, are laborious and error-prone to program with, and lack performance portability: the performance of an accelerated application may vary dramatically across platforms."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 79,
                                "start": 75
                            }
                        ],
                        "text": "DSL compilers targeting GPUs typically map DSL code directly to OpenCL and CUDA, relying on DSL constructs that express parallelism."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 132,
                                "start": 128
                            }
                        ],
                        "text": "A drawback of the DSL approach is the significant effort required to implement a compiler generating highly optimized OpenCL or CUDA code for multiple platforms."
                    },
                    "intents": []
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Nvidia CUDA C programming guide 4.0"
            },
            "venue": {
                "fragments": [],
                "text": "2011. [Online]. Available: http://docs.nvidia.com/cuda/ cuda-c-programming-guide"
            },
            "year": 2011
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 133,
                                "start": 129
                            }
                        ],
                        "text": "The constructs allow communicating information that is difficult for a compiler to extract, but that can be easily captured from DSLs or expressed by expert programmers."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 31,
                                "start": 27
                            }
                        ],
                        "text": "Domain-specific languages (DSLs) can help to side-step this problem: it is often clear how parallelism can be exploited given high-level knowledge about standard operations in a particular domain, such as linear algebra [3], image processing [4] or partial differential equations [5]."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 87,
                                "start": 83
                            }
                        ],
                        "text": "The code generated by DSL-toPENCIL compilers originates from the VOBLA and SpearDE DSLs (Sections IV-C and IV-D)."
                    },
                    "intents": []
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 88,
                                "start": 84
                            }
                        ],
                        "text": "In designing the PENCIL extensions to C99, we analyzed numerous benchmarks and DSLs [13] and identified language constructs that would be helpful in exposing parallelism and enabling compiler optimizations."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "CARP deliverable D2.2.A: requirements analysis"
            },
            "venue": {
                "fragments": [],
                "text": "2012. [Online]. Available: http: //carp.doc.ic.ac.uk/external/publications/D2.2A.pdf"
            },
            "year": 2012
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "We therefore believe that generic DSL frameworks like Delite can benefit from using PENCIL and a polyhedral compiler."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 8,
                                "start": 4
                            }
                        ],
                        "text": "Since pencilcc does not perform vectorization, it fails to reach the performance levels for clMath on this platform."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 150,
                                "start": 146
                            }
                        ],
                        "text": "\u2026\u2022 seven image processing kernels written in PENCIL and\ncovering computationally intensive parts of a computer vision stack used by Realeyes, a leader in recognizing facial emotions (http://www.realeyesit.com); \u2022 five benchmarks extracted from the SHOC [6] and Rodinia [7] suites and re-written\u2026"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "OpenCL math library"
            },
            "venue": {
                "fragments": [],
                "text": "clMath Developers Team"
            },
            "year": 2013
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 41,
                                "start": 37
                            }
                        ],
                        "text": "Moreover, the BLAS libraries (clMath [10] and cuBlas [9]) do not require autotuning: they are already configured with a set of optimal parameters for their target"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 137,
                                "start": 133
                            }
                        ],
                        "text": "For example, for the VOBLA linear algebra DSL, we were able to generate code that has performance close to the cuBlas [9] and clMath [10] BLAS libraries [11]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 6,
                                "start": 2
                            }
                        ],
                        "text": "0 [10] BLAS library provided by AMD and used for comparison on the AMD platforms, and \u2022 the cuBlas 5."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": true,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "OpenCL math library"
            },
            "venue": {
                "fragments": [],
                "text": "2013. [Online]. Available: https://github.com/clMathLibraries"
            },
            "year": 2013
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "We would like to thank our partners at Thales Research and Technology for their collaboration on a PENCIL-based interface within the SpearDE framework."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "OpenMP application program interface, v3"
            },
            "venue": {
                "fragments": [],
                "text": "OpenMP Architecture Review Board"
            },
            "year": 2008
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Nvidia CUDA C programming guide 4 . 0 , \u201d 2011 . [ Online ]"
            },
            "venue": {
                "fragments": [],
                "text": ""
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 71,
                                "start": 67
                            }
                        ],
                        "text": "Arrays must be declared using the C99 variable-length array syntax [16], and the declaration of each function argument that is of array type must use pencil_attributes, a macro expanding to the C99 restrict and const type qualifiers followed by the static keyword (see Figure 4)."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "ISO/IEC 9899:1999, Programming languages \u2013 C"
            },
            "venue": {
                "fragments": [],
                "text": "1999."
            },
            "year": 1999
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [],
                        "text": "We would like to thank our partners at Thales Research and Technology for their collaboration on a PENCIL-based interface within the SpearDE framework."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "The OpenACC application programming interface, v1"
            },
            "venue": {
                "fragments": [],
                "text": "The OpenACC application programming interface, v1"
            },
            "year": 2011
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 128,
                                "start": 124
                            }
                        ],
                        "text": "For the Realeyes image processing benchmarks, we could match, and sometimes outperform, the OpenCV image processing library [12]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Open source computer vision library"
            },
            "venue": {
                "fragments": [],
                "text": "2002. [Online]. Available: http://opencv.org"
            },
            "year": 2002
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 12,
                                "start": 8
                            }
                        ],
                        "text": "SpearDE [14] is a domain-specific modeling and programming framework for signal processing applications, designed by Thales Research and Technology."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 113,
                                "start": 109
                            }
                        ],
                        "text": "\u2022 two signal processing radar applications generated from the SpearDE streaming DSL and modeling environment [14]."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "An industrial perspective: A pragmatic high end signal processing design environment at Thales"
            },
            "venue": {
                "fragments": [],
                "text": "SAMOS, pages 52\u201357,"
            },
            "year": 2003
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Semantical interpro - cedural parallelization : An overview of the PIPS project , \u201d in ICS , 1991 . [ 27 ] OpenMP Architecture Review Board , \u201c OpenMP application program interface , v 3 . 0 , \u201d"
            },
            "venue": {
                "fragments": [],
                "text": ""
            },
            "year": 2008
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 98,
                                "start": 94
                            }
                        ],
                        "text": "PENCIL\u2019s directives are inspired by directive-based languages such as OpenMP [27] and OpenACC [28]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "The OpenACC application programming interface, v1.0"
            },
            "venue": {
                "fragments": [],
                "text": "2011."
            },
            "year": 2011
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 34,
                                "start": 31
                            }
                        ],
                        "text": "The polyhedral compiler, extended to handle data-dependent control flow and non-affine array accesses, generates optimized OpenCL code."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Nvidia CUDA C programming guide 4 Available: http://docs.nvidia.com/cuda/ cuda-c-programming-guide"
            },
            "venue": {
                "fragments": [],
                "text": "Nvidia CUDA C programming guide 4 Available: http://docs.nvidia.com/cuda/ cuda-c-programming-guide"
            },
            "year": 2011
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 81,
                                "start": 77
                            }
                        ],
                        "text": "PENCIL\u2019s directives are inspired by directive-based languages such as OpenMP [27] and OpenACC [28]."
                    },
                    "intents": [
                        {
                            "id": "background"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "OpenMP application program interface, v3.0"
            },
            "venue": {
                "fragments": [],
                "text": "2008."
            },
            "year": 2008
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Available: https://github.com/clMathLibraries"
            },
            "venue": {
                "fragments": [],
                "text": "Available: https://github.com/clMathLibraries"
            }
        },
        {
            "authors": [],
            "badges": [],
            "citationContexts": [
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 81,
                                "start": 77
                            }
                        ],
                        "text": "We compared the pencilcc-generated code with the sequential CPU version, because no parallel version was available to us."
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                },
                {
                    "context": {
                        "fragments": [
                            {
                                "end": 150,
                                "start": 146
                            }
                        ],
                        "text": "\u2026in recognizing facial emotions (http://www.realeyesit.com); \u2022 five benchmarks extracted from the SHOC [6] and Rodinia [7] suites and re-written in PENCIL; \u2022 six kernels generated using the VOBLA linear algebra DSL compiler [3]; \u2022 two signal processing radar applications generated from code\u2026"
                    },
                    "intents": [
                        {
                            "id": "methodology"
                        }
                    ]
                }
            ],
            "fieldsOfStudy": [],
            "isKey": false,
            "numCitedBy": 0,
            "numCiting": 0,
            "paperAbstract": {
                "fragments": [],
                "text": ""
            },
            "slug": "+",
            "title": {
                "fragments": [],
                "text": "Open source computer vision library"
            },
            "venue": {
                "fragments": [],
                "text": "Open source computer vision library"
            },
            "year": 2002
        }
    ],
    "meta_info": {
        "citationIntent": "all",
        "citationIntentCount": {
            "background": 14,
            "methodology": 25,
            "result": 1
        },
        "citationType": "citedPapers",
        "pageNumber": 1,
        "requestedPageSize": 10,
        "sort": "relevance",
        "totalCitations": 39,
        "totalPages": 4
    },
    "page_url": "https://www.semanticscholar.org/paper/PENCIL:-A-Platform-Neutral-Compute-Intermediate-for-Baghdadi-Beaugnon/e61e896ee96c8d6ae13c34c9d66e8ee879489f75?sort=total-citations"
}